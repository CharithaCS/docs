"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[561],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>m});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var s=r.createContext({}),c=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},p=function(e){var t=c(e.components);return r.createElement(s.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,i=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),u=c(n),m=o,f=u["".concat(s,".").concat(m)]||u[m]||d[m]||i;return n?r.createElement(f,a(a({ref:t},p),{},{components:n})):r.createElement(f,a({ref:t},p))}));function m(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=n.length,a=new Array(i);a[0]=u;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:o,a[1]=l;for(var c=2;c<i;c++)a[c]=n[c];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}u.displayName="MDXCreateElement"},3742:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>a,default:()=>d,frontMatter:()=>i,metadata:()=>l,toc:()=>c});var r=n(7462),o=(n(7294),n(3905));const i={sidebar_position:1},a="Overview",l={unversionedId:"documentation/components/operator",id:"documentation/components/operator",title:"Overview",description:"Otterize manages client intents and credentials provisioning with the help of multiple K8s operators.",source:"@site/docs/documentation/5-components/1-operator.md",sourceDirName:"documentation/5-components",slug:"/documentation/components/operator",permalink:"/documentation/components/operator",draft:!1,editUrl:"https://github.com/otterize/docs/edit/main/docs/documentation/5-components/1-operator.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"docSidebar",previous:{title:"Resolving service names in Kubernetes",permalink:"/documentation/core/resolving-service-names"},next:{title:"Credential operator",permalink:"/documentation/components/credential-operator"}},s={},c=[{value:"Components",id:"components",level:2},{value:"Credential Operator",id:"credential-operator",level:3},{value:"SPIRE server",id:"spire-server",level:3},{value:"Credentials",id:"credentials",level:2},{value:"Lifecycle",id:"lifecycle",level:3},{value:"Types",id:"types",level:3},{value:"What you&#39;ll need",id:"what-youll-need",level:3}],p={toc:c};function d(e){let{components:t,...n}=e;return(0,o.kt)("wrapper",(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"overview"},"Overview"),(0,o.kt)("p",null,"Otterize manages client intents and credentials provisioning with the help of multiple K8s operators."),(0,o.kt)("h2",{id:"components"},"Components"),(0,o.kt)("h3",{id:"credential-operator"},"Credential Operator"),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"Credential Operator")," is responsible for credential generation. It uses a ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/spiffe/spire"},(0,o.kt)("inlineCode",{parentName:"a"},"SPIRE")),"\nserver as a key store and a provisioning mechanism.\nResponsible for tracking annotated pods and generating credentials accordingly."),(0,o.kt)("h3",{id:"spire-server"},"SPIRE server"),(0,o.kt)("p",null,"Otterize provides a built-in ",(0,o.kt)("inlineCode",{parentName:"p"},"SPIRE")," server for easy integration, but users are welcome to use their own.\nSee ","[configuration]"," for details about how to configure Otterize to work with your existing SPIRE server."),(0,o.kt)("h2",{id:"credentials"},"Credentials"),(0,o.kt)("h3",{id:"lifecycle"},"Lifecycle"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"On ",(0,o.kt)("inlineCode",{parentName:"li"},"Pod Start")," if it is annotated with ",(0,o.kt)("inlineCode",{parentName:"li"},"spire-integration.otterize.com/tls-secret-name")," credentials are generated and stored in a K8s secret named as the value of the annotation")),(0,o.kt)("h3",{id:"types"},"Types"),(0,o.kt)("p",null,"x509 credentials can be generated in two flavors:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"PEM files",(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},"Trust bundle"),(0,o.kt)("li",{parentName:"ul"},"SVID"),(0,o.kt)("li",{parentName:"ul"},"private key"))),(0,o.kt)("li",{parentName:"ul"},"Trust and key stores")),(0,o.kt)("h3",{id:"what-youll-need"},"What you'll need"))}d.isMDXComponent=!0}}]);