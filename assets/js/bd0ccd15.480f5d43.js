"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[77],{691:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>d,contentTitle:()=>p,default:()=>k,frontMatter:()=>s,metadata:()=>u,toc:()=>m});var n=a(7462),r=(a(7294),a(3905)),l=a(3901),o=a(5488),i=a(5162);const s={sidebar_position:1},p="Network Mapper",u={unversionedId:"documentation/getting-started/tutorials/network-mapper",id:"documentation/getting-started/tutorials/network-mapper",title:"Network Mapper",description:"Get started with Otterize.",source:"@site/docs/documentation/getting-started/tutorials/network-mapper.md",sourceDirName:"documentation/getting-started/tutorials",slug:"/documentation/getting-started/tutorials/network-mapper",permalink:"/documentation/getting-started/tutorials/network-mapper",draft:!1,editUrl:"https://github.com/otterize/docs/edit/main/docs/documentation/getting-started/tutorials/network-mapper.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"docSidebar",previous:{title:"Quickstart",permalink:"/documentation/getting-started/quickstart"},next:{title:"Deploy mTLS",permalink:"/documentation/getting-started/tutorials/mtls"}},d={},m=[{value:"Enable the Network Mapper",id:"enable-the-network-mapper",level:2},{value:"Concepts",id:"concepts",level:2},{value:"Otterize pod identity resolution",id:"otterize-pod-identity-resolution",level:3},{value:"Demo",id:"demo",level:2},{value:"Show mapped traffic",id:"show-mapped-traffic",level:3},{value:"Change traffic -&gt; Sniff&amp;Diff",id:"change-traffic---sniffdiff",level:3},{value:"Teardown",id:"teardown",level:3},{value:"What&#39;s next",id:"whats-next",level:2}],c={toc:m};function k(e){let{components:t,...a}=e;return(0,r.kt)("wrapper",(0,n.Z)({},c,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"network-mapper"},"Network Mapper"),(0,r.kt)("p",null,"Get started with Otterize."),(0,r.kt)(l.Z,{toc:m,mdxType:"TOCInline"}),(0,r.kt)("h2",{id:"enable-the-network-mapper"},"Enable the Network Mapper"),(0,r.kt)(o.Z,{mdxType:"Tabs"},(0,r.kt)(i.Z,{value:"cli",label:"Otterize CLI",default:!0,mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"otterize observer enable\n"))),(0,r.kt)(i.Z,{value:"helm",label:"Helm",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"helm repo add\nhelm install\n")))),(0,r.kt)("h2",{id:"concepts"},"Concepts"),(0,r.kt)("h3",{id:"otterize-pod-identity-resolution"},"Otterize pod identity resolution"),(0,r.kt)("p",null,"Otterize resolves pod identities automatically by using their ",(0,r.kt)("inlineCode",{parentName:"p"},"resource owner")," (e.g. deployment) ",(0,r.kt)("strong",{parentName:"p"},"name")," and ",(0,r.kt)("strong",{parentName:"p"},"\nnamespace"),"."),(0,r.kt)("p",null,"In this example the pod identity will be resolved to ",(0,r.kt)("inlineCode",{parentName:"p"},"client.tutorial"),"."),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("p",{parentName:"admonition"},"To read more about how Otterize resolves pod identities and how to manually control the process pleas read XXX.")),(0,r.kt)("admonition",{type:"danger"},(0,r.kt)("p",{parentName:"admonition"},"Decide if we show mapped traffic by namespace or not. If not, then the explanation about pod identities will confuse\nusers as the output ignores namespace.")),(0,r.kt)("h2",{id:"demo"},"Demo"),(0,r.kt)("h3",{id:"show-mapped-traffic"},"Show mapped traffic"),(0,r.kt)("p",null,"You can view mapped traffic by calling the CLI ",(0,r.kt)("inlineCode",{parentName:"p"},"export")," command. It supports multiple output formats such as ",(0,r.kt)("inlineCode",{parentName:"p"},"intents"),"\nand ",(0,r.kt)("inlineCode",{parentName:"p"},"JSON"),".\nThe following example shows the CLI output for a cluster running three pods: checkout, kafka, zookeeper."),(0,r.kt)("p",null,"You should see similar structured results on your cluster."),(0,r.kt)(o.Z,{mdxType:"Tabs"},(0,r.kt)(i.Z,{value:"plain",label:"Plain",default:!0,mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"otterize observer export\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell",metastring:'title="Output"',title:'"Output"'},"kafka calls:\n  - zookeeper\n\ncheckout calls:\n  - kafka\n"))),(0,r.kt)(i.Z,{value:"intents",label:"Intents",default:!0,mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"otterize observer export -o intents\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell",metastring:'title="Output"',title:'"Output"'},"apiVersion: k8s.otterize.com/v1\nkind: ClientIntents\nmetadata:\n  name: kafka\nspec:\n  service:\n    name: kafka\n    calls:\n      - name: zookeeper\n---\napiVersion: k8s.otterize.com/v1\nkind: ClientIntents\nmetadata:\n  name: checkout\nspec:\n  service:\n    name: checkout\n    calls:\n      - name: kafka\n"))),(0,r.kt)(i.Z,{value:"json",label:"JSON",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"otterize observer export -o yaml\n")))),(0,r.kt)("h3",{id:"change-traffic---sniffdiff"},"Change traffic -> Sniff&Diff"),(0,r.kt)("p",null,"One of the benefits for using the network mapper is the ability to track changes over time for communication within your\ncluster.\nLet's add traffic to the cluster and see how the Network Mapper tracks it. You can do that by deploying our example\nwhich\nconsists of two pods: client and server, communicating over HTTP."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"kubectl create namespace otterize-tutorial-mapper && \\\nkubectl apply -n otterize-tutorial-mapper -f code-examples/getting-started/tutorials/network-mapper\n")),(0,r.kt)("details",null,(0,r.kt)("summary",null,"Output"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"namespace/otterize-tutorial-mapper created\ndeployment.apps/client created\ndeployment.apps/server created\nservice/server created\n"))),(0,r.kt)("p",null,"And now export the updated observed intents. There you will now see the client and server pods communication in addition\nto the previously observed traffic."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"otterize observer export\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell",metastring:'title="Output"',title:'"Output"'},"# highlight-start\nclient calls:\n  - server\n# highlight-end\n\nkafka calls:\n  - zookeeper\n\ncheckout calls:\n  - kafka\n")),(0,r.kt)("h3",{id:"teardown"},"Teardown"),(0,r.kt)("p",null,"To remove the deployed resources run"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"kubectl delete namespace otterize-tutorial-mapper\n")),(0,r.kt)("details",null,(0,r.kt)("summary",null,"Output"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell",metastring:'title="Output"',title:'"Output"'},'namespace "otterize-tutorial-mapper" deleted\n'))),(0,r.kt)("h2",{id:"whats-next"},"What's next"),(0,r.kt)("p",null,"Now that we observed cluster intents we can use them with the Intents Operator."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Configure ",(0,r.kt)("a",{parentName:"li",href:"/documentation/getting-started/network-policies"},"Network Policies")),(0,r.kt)("li",{parentName:"ul"},"Configure secure access for Kafka")))}k.isMDXComponent=!0}}]);