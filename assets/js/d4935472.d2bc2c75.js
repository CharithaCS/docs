"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[842],{5162:(e,t,n)=>{n.d(t,{Z:()=>i});var a=n(7294),l=n(6010);const o="tabItem_Ymn6";function i(e){let{children:t,hidden:n,className:i}=e;return a.createElement("div",{role:"tabpanel",className:(0,l.Z)(o,i),hidden:n},t)}},5488:(e,t,n)=>{n.d(t,{Z:()=>d});var a=n(7462),l=n(7294),o=n(6010),i=n(2389),r=n(7392),s=n(7094),c=n(2466);const p="tabList__CuJ",u="tabItem_LNqP";function m(e){var t,n;const{lazy:i,block:m,defaultValue:d,values:h,groupId:k,className:g}=e,w=l.Children.map(e.children,(e=>{if((0,l.isValidElement)(e)&&"value"in e.props)return e;throw new Error("Docusaurus error: Bad <Tabs> child <"+("string"==typeof e.type?e.type:e.type.name)+'>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.')})),y=null!=h?h:w.map((e=>{let{props:{value:t,label:n,attributes:a}}=e;return{value:t,label:n,attributes:a}})),b=(0,r.l)(y,((e,t)=>e.value===t.value));if(b.length>0)throw new Error('Docusaurus error: Duplicate values "'+b.map((e=>e.value)).join(", ")+'" found in <Tabs>. Every value needs to be unique.');const f=null===d?d:null!=(t=null!=d?d:null==(n=w.find((e=>e.props.default)))?void 0:n.props.value)?t:w[0].props.value;if(null!==f&&!y.some((e=>e.value===f)))throw new Error('Docusaurus error: The <Tabs> has a defaultValue "'+f+'" but none of its children has the corresponding value. Available values are: '+y.map((e=>e.value)).join(", ")+". If you intend to show no default tab, use defaultValue={null} instead.");const{tabGroupChoices:N,setTabGroupChoices:v}=(0,s.U)(),[C,z]=(0,l.useState)(f),T=[],{blockElementScrollPositionUntilNextRender:I}=(0,c.o5)();if(null!=k){const e=N[k];null!=e&&e!==C&&y.some((t=>t.value===e))&&z(e)}const O=e=>{const t=e.currentTarget,n=T.indexOf(t),a=y[n].value;a!==C&&(I(t),z(a),null!=k&&v(k,String(a)))},S=e=>{var t;let n=null;switch(e.key){case"ArrowRight":{var a;const t=T.indexOf(e.currentTarget)+1;n=null!=(a=T[t])?a:T[0];break}case"ArrowLeft":{var l;const t=T.indexOf(e.currentTarget)-1;n=null!=(l=T[t])?l:T[T.length-1];break}}null==(t=n)||t.focus()};return l.createElement("div",{className:(0,o.Z)("tabs-container",p)},l.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,o.Z)("tabs",{"tabs--block":m},g)},y.map((e=>{let{value:t,label:n,attributes:i}=e;return l.createElement("li",(0,a.Z)({role:"tab",tabIndex:C===t?0:-1,"aria-selected":C===t,key:t,ref:e=>T.push(e),onKeyDown:S,onFocus:O,onClick:O},i,{className:(0,o.Z)("tabs__item",u,null==i?void 0:i.className,{"tabs__item--active":C===t})}),null!=n?n:t)}))),i?(0,l.cloneElement)(w.filter((e=>e.props.value===C))[0],{className:"margin-top--md"}):l.createElement("div",{className:"margin-top--md"},w.map(((e,t)=>(0,l.cloneElement)(e,{key:t,hidden:e.props.value!==C})))))}function d(e){const t=(0,i.Z)();return l.createElement(m,(0,a.Z)({key:String(t)},e))}},1681:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>s,default:()=>d,frontMatter:()=>r,metadata:()=>c,toc:()=>u});var a=n(7462),l=(n(7294),n(3905)),o=(n(814),n(5488)),i=n(5162);const r={sidebar_position:1,title:"Simple network policy automation"},s=void 0,c={unversionedId:"quick-tutorials/k8s-network-policies",id:"quick-tutorials/k8s-network-policies",title:"Simple network policy automation",description:"Otterize automates pod-to-pod access control with network policies, within your cluster.",source:"@site/docs/quick-tutorials/k8s-network-policies.mdx",sourceDirName:"quick-tutorials",slug:"/quick-tutorials/k8s-network-policies",permalink:"/quick-tutorials/k8s-network-policies",draft:!1,editUrl:"https://github.com/otterize/docs/edit/main/docs/quick-tutorials/k8s-network-policies.mdx",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1,title:"Simple network policy automation"},sidebar:"docSidebar",previous:{title:"Getting started",permalink:"/"},next:{title:"Simple, secure Kafka access",permalink:"/quick-tutorials/k8s-kafka-mtls"}},p={},u=[{value:"Prerequisites",id:"prerequisites",level:2},{value:"Create an Otterize Cloud account",id:"create-an-otterize-cloud-account",level:4},{value:"Install Otterize OSS, connected to Otterize Cloud",id:"install-otterize-oss-connected-to-otterize-cloud",level:4},{value:"Deploy the server and the two clients",id:"deploy-the-server-and-the-two-clients",level:2},{value:"Apply intents",id:"apply-intents",level:2},{value:"See it in action",id:"see-it-in-action",level:3},{value:"What did we accomplish?",id:"what-did-we-accomplish",level:2},{value:"What&#39;s next",id:"whats-next",level:2},{value:"Teardown",id:"teardown",level:2}],m={toc:u};function d(e){let{components:t,...r}=e;return(0,l.kt)("wrapper",(0,a.Z)({},m,r,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("p",null,"Otterize automates pod-to-pod access control with network policies, within your cluster."),(0,l.kt)("p",null,"Instead of managing pod identities, labeling clients, servers and namespaces,\nand manually authoring individual network policies, Otterize implements ",(0,l.kt)("strong",{parentName:"p"},"intent-based access control")," (IBAC).\nYou just declare what calls the client pods intend to make,\nand everything is automatically wired together so only intended calls are allowed."),(0,l.kt)("p",null,"In this tutorial, we will:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Deploy a server pod, and two client pods calling it."),(0,l.kt)("li",{parentName:"ul"},"Declare that the first client intends to call the server."),(0,l.kt)("li",{parentName:"ul"},"See that a network policy was autogenerated to allow just that, and block the (undeclared) calls from the other client.")),(0,l.kt)("h2",{id:"prerequisites"},"Prerequisites"),(0,l.kt)("details",null,(0,l.kt)("summary",null,"Prepare a cluster that supports network policies"),(0,l.kt)("p",null,"Before you start, you need a Kubernetes cluster with a ",(0,l.kt)("a",{parentName:"p",href:"https://kubernetes.io/docs/concepts/extend-kubernetes/compute-storage-net/network-plugins/"},"CNI")," that supports ",(0,l.kt)("a",{parentName:"p",href:"https://kubernetes.io/docs/concepts/services-networking/network-policies/"},"NetworkPolicies"),"."),(0,l.kt)("p",null,"Below are instructions for setting up a Kubernetes cluster with network policies.\nIf you don't have a cluster already, we recommend starting out with a Minikube cluster."),(0,l.kt)(o.Z,{groupId:"cni",mdxType:"Tabs"},(0,l.kt)(i.Z,{value:"minikube",label:"Minikube",mdxType:"TabItem"},(0,l.kt)("p",null,"If you don't have the Minikube CLI, first ",(0,l.kt)("a",{parentName:"p",href:"https://minikube.sigs.k8s.io/docs/start/"},"install it"),". "),(0,l.kt)("p",null,"Then start your Minikube cluster with Calico, in order to enforce network policies."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"minikube start --network-plugin=cni --cni=calico\n"))),(0,l.kt)(i.Z,{value:"gke",label:"Google GKE",mdxType:"TabItem"},(0,l.kt)("a",{href:"https://cloud.google.com/kubernetes-engine/docs/how-to/network-policy#gcloud"},"Visit the official documentation"),", or follow the instructions below:",(0,l.kt)(o.Z,{mdxType:"Tabs"},(0,l.kt)(i.Z,{value:"cli",label:"gcloud CLI",mdxType:"TabItem"},(0,l.kt)("p",null,"To use the gcloud CLI for this tutorial, first ",(0,l.kt)("a",{parentName:"p",href:"https://cloud.google.com/sdk/docs/install"},"install")," and then\n",(0,l.kt)("a",{parentName:"p",href:"https://cloud.google.com/sdk/docs/initializing"},"initialize")," it."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},(0,l.kt)("em",{parentName:"strong"},"To enable network policy enforcement when creating a new cluster:"))),(0,l.kt)("p",null,"Run the following command:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"gcloud container clusters create CLUSTER_NAME --enable-network-policy --zone=ZONE\n")),(0,l.kt)("p",null,"(Replace ",(0,l.kt)("inlineCode",{parentName:"p"},"CLUSTER_NAME")," with the name of the new cluster and ",(0,l.kt)("inlineCode",{parentName:"p"},"ZONE")," with your zone.)"),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},(0,l.kt)("em",{parentName:"strong"},"To enable network policy enforcement for an existing cluster, perform the following tasks:"))),(0,l.kt)("p",null,"Run the following command to enable the add-on:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"gcloud container clusters update CLUSTER_NAME --update-addons=NetworkPolicy=ENABLED\n")),(0,l.kt)("p",null,"(Replace ",(0,l.kt)("inlineCode",{parentName:"p"},"CLUSTER_NAME")," with the name of the cluster.)"),(0,l.kt)("p",null,"Then enable network policy enforcement on your cluster, re-creating your cluster's node pools with network policy enforcement enabled:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"gcloud container clusters update CLUSTER_NAME --enable-network-policy\n")),(0,l.kt)("p",null,"(Replace ",(0,l.kt)("inlineCode",{parentName:"p"},"CLUSTER_NAME")," with the name of the cluster.)")),(0,l.kt)(i.Z,{value:"console",label:"Console",mdxType:"TabItem"},(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},(0,l.kt)("em",{parentName:"strong"},"To enable network policy enforcement when creating a new cluster:"))),(0,l.kt)("ol",null,(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("p",{parentName:"li"},"Go to the Google Kubernetes Engine page in the Google Cloud console.\nThe remaining steps will appear automatically in the Google Cloud console.")),(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("p",{parentName:"li"},"On the Google Kubernetes Engine page, click Create.")),(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("p",{parentName:"li"},"Configure your cluster as desired.")),(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("p",{parentName:"li"},"From the navigation pane, under Cluster, click Networking.")),(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("p",{parentName:"li"},"Select the checkbox to Enable network policy.")),(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("p",{parentName:"li"},"Click Create."))),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},(0,l.kt)("em",{parentName:"strong"},"To enable network policy enforcement for an existing cluster:"))),(0,l.kt)("ol",null,(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("p",{parentName:"li"},"Go to the Google Kubernetes Engine page in the Google Cloud console. The remaining steps will appear automatically in the Google Cloud console.")),(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("p",{parentName:"li"},"In the cluster list, click the name of the cluster you want to modify.")),(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("p",{parentName:"li"},"Under Networking, in the Network policy field, click Edit network policy.")),(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("p",{parentName:"li"},"Select the checkbox to Enable network policy for master and click Save Changes.")),(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("p",{parentName:"li"},"Wait for your changes to apply, and then click Edit network policy again.")),(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("p",{parentName:"li"},"Select the checkbox to Enable network policy for nodes.")),(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("p",{parentName:"li"},"Click Save Changes.")))))),(0,l.kt)(i.Z,{value:"eks",label:"AWS EKS",mdxType:"TabItem"},(0,l.kt)("a",{href:"https://docs.aws.amazon.com/eks/latest/userguide/calico.html"},"Visit the official documentation"),", or follow the instructions below:",(0,l.kt)("ol",null,(0,l.kt)("li",{parentName:"ol"},"Spin up an ",(0,l.kt)("a",{parentName:"li",href:"https://docs.aws.amazon.com/eks/latest/userguide/create-cluster.html"},"EKS cluster")," using the console, AWS CLI or ",(0,l.kt)("inlineCode",{parentName:"li"},"eksctl"),"."),(0,l.kt)("li",{parentName:"ol"},"Install Calico for network policy enforcement, without replacing the CNI:")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"kubectl apply -f https://raw.githubusercontent.com/aws/amazon-vpc-cni-k8s/v1.12.6/config/master/calico-operator.yaml\nkubectl apply -f https://raw.githubusercontent.com/aws/amazon-vpc-cni-k8s/v1.12.6/config/master/calico-crs.yaml\n"))),(0,l.kt)(i.Z,{value:"aks",label:"Azure AKS",mdxType:"TabItem"},(0,l.kt)("p",null,"You can set up an AKS cluster using this ",(0,l.kt)("a",{parentName:"p",href:"https://learn.microsoft.com/en-us/azure/aks/learn/quick-kubernetes-deploy-cli"},"guide"),"."),(0,l.kt)("p",null,"For network policy support, no setup is required: Azure AKS comes with a built-in network policy implementation called Azure Network Policy Manager. You can choose whether you'd like to use this option or Calico when you create a cluster."),(0,l.kt)("a",{href:"https://learn.microsoft.com/en-us/azure/aks/use-network-policies"}," Read more at the official documentation site"),"."))),(0,l.kt)("p",null,"You can now install (or reinstall) Otterize in your cluster, and optionally connect to Otterize Cloud. Connecting to Cloud lets you:"),(0,l.kt)("ol",null,(0,l.kt)("li",{parentName:"ol"},'See what\'s happening visually in your browser, through the "access graph";'),(0,l.kt)("li",{parentName:"ol"},"Avoid using SPIRE (which can be installed with Otterize) for issuing certificates, as Otterize Cloud provides a certificate service.")),(0,l.kt)("p",null,"So either forego browser visualization and:"),(0,l.kt)("details",null,(0,l.kt)("summary",null,"Install Otterize in your cluster, ",(0,l.kt)("b",null,"without")," Otterize Cloud"),(0,l.kt)("admonition",{title:"Basic system memory requirements",type:"note"},(0,l.kt)("p",{parentName:"admonition"},"Otterize requires about 200 MBs and 200 mCPU for all components (including a SPIRE deployment) to install and run properly on Minikube and EKS clusters.")),(0,l.kt)("p",null,"   You'll need ",(0,l.kt)("a",{parentName:"p",href:"https://helm.sh/docs/intro/install/"},"Helm")," installed on your machine to install Otterize as follows:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-shell"},"helm repo add otterize https://helm.otterize.com\nhelm repo update\nhelm install otterize otterize/otterize-kubernetes -n otterize-system --create-namespace\n")),(0,l.kt)("p",null,"This chart is a bundle of the Otterize intents operator, Otterize credentials operator, Otterize network mapper, and SPIRE.\nInitial deployment may take a couple of minutes.\nYou can add the ",(0,l.kt)("inlineCode",{parentName:"p"},"--wait")," flag for Helm to wait for deployment to complete and all pods to be Ready, or manually watch for all pods to be ",(0,l.kt)("inlineCode",{parentName:"p"},"Ready")," using ",(0,l.kt)("inlineCode",{parentName:"p"},"kubectl get pods -n otterize-system -w"),"."),(0,l.kt)("p",null,"After all the pods are ready you should see the following (or similar) in your terminal when you run ",(0,l.kt)("inlineCode",{parentName:"p"},"kubectl get pods -n otterize-system"),":"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"NAME                                                       READY  STATUS  RESTARTS AGE\ncredentials-operator-controller-manager-6c56fcfcfb-vg6m9   2/2    Running   0     9s\nintents-operator-controller-manager-65bb6d4b88-bp9pf       2/2    Running   0     9s\notterize-network-mapper-779fffd959-twjqd                   1/1    Running   0     9s\notterize-network-sniffer-65mjt                             1/1    Running   0     9s\notterize-spire-agent-lcbq2                                 1/1    Running   0     9s\notterize-spire-server-0                                    2/2    Running   0     9s\notterize-watcher-b9bf87bcd-276nt                           1/1    Running   0     9s\n"))),(0,l.kt)("p",null,"Or choose to include browser visualization and:"),(0,l.kt)("details",null,(0,l.kt)("summary",null,"Install Otterize in your cluster, ",(0,l.kt)("b",null,"with")," Otterize Cloud"),(0,l.kt)("h4",{id:"create-an-otterize-cloud-account"},"Create an Otterize Cloud account"),(0,l.kt)("p",null,"If you don't already have an account, browse to ",(0,l.kt)("a",{parentName:"p",href:"https://app.otterize.com"},"https://app.otterize.com")," to set one up."),(0,l.kt)("p",null,"If someone in your team has already created an org in Otterize Cloud, and invited you (using your email address), you may see an invitation to accept."),(0,l.kt)("p",null,"Otherwise, you'll create a new org, which you can later rename, and invite your teammates to join you there."),(0,l.kt)("h4",{id:"install-otterize-oss-connected-to-otterize-cloud"},"Install Otterize OSS, connected to Otterize Cloud"),(0,l.kt)("p",null,'If no Kubernetes clusters are connected to your account, click the "connect your cluster" button to:'),(0,l.kt)("ol",null,(0,l.kt)("li",{parentName:"ol"},"Create a Cloud cluster object, specifying its name and the name of an environment to which all namespaces in that cluster will belong, by default."),(0,l.kt)("li",{parentName:"ol"},'Connect it with your actual Kubernetes cluster, by clicking on the "Connection guide ',"\u2192",'" link and running the Helm commands shown there.',(0,l.kt)("ol",{parentName:"li"},(0,l.kt)("li",{parentName:"ol"},"Follow the instructions to install Otterize ",(0,l.kt)("b",null,"with enforcement on")," (not in shadow mode) for this tutorial. In other words, ",(0,l.kt)("b",null,"omit")," the following flag in the Helm command: ",(0,l.kt)("inlineCode",{parentName:"li"},"--set intentsOperator.operator.enableEnforcement=false"))))),(0,l.kt)("details",null,(0,l.kt)("summary",null,"More details, if you're curious"),(0,l.kt)("p",null,"Connecting your cluster simply entails installing Otterize OSS via Helm, using credentials from your account so Otterize OSS can report information needed to visualize the cluster."),(0,l.kt)("p",null,"The credentials will already be inlined into the Helm command shown in the Cloud UI, so you just need to copy that line and run it from your shell.\nIf you don't give it the Cloud credentials, Otterize OSS will run fully standalone in your cluster ","\u2014"," you just won't have the visualization in Otterize Cloud."),(0,l.kt)("p",null,'The Helm command shown in the Cloud UI also includes flags to turn off enforcement: Otterize OSS will be running in "shadow mode," meaning that it will show you what ',(0,l.kt)("strong",{parentName:"p"},"would")," happen if it created network policies to restrict pod-to-pod traffic, and created Kafka ACLs to control access to Kafka topics. While that's useful for gradually rolling out IBAC, for this tutorial we go straight to active enforcement."))),(0,l.kt)("h2",{id:"deploy-the-server-and-the-two-clients"},"Deploy the server and the two clients"),(0,l.kt)("p",null,"Our simple example consists of three pods: an HTTP server and two clients that call it."),(0,l.kt)("details",null,(0,l.kt)("summary",null,"Expand to see the example YAML files"),(0,l.kt)(o.Z,{mdxType:"Tabs"},(0,l.kt)(i.Z,{value:"namespace.yaml",label:"namespace.yaml",default:!0,mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-yaml"},"apiVersion: v1\nkind: Namespace\nmetadata:\n  name: otterize-tutorial-npol\n"))),(0,l.kt)(i.Z,{value:"server.yaml",label:"server.yaml",default:!0,mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-yaml"},'apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: server\n  namespace:  otterize-tutorial-npol\nspec:\n  selector:\n    matchLabels:\n      app: server\n  template:\n    metadata:\n      labels:\n        app: server\n    spec:\n      containers:\n        - name: server\n          image: node\n          command: [ "/bin/sh","-c" ]\n          args: [ "echo \\"Hi, I am the server, you called, may I help you?\\" > index.html; npx --yes http-server -p 80 " ]\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: server\n  namespace:  otterize-tutorial-npol\nspec:\n  selector:\n    app: server\n  ports:\n    - protocol: TCP\n      port: 80\n      targetPort: 80\n'))),(0,l.kt)(i.Z,{value:"client.yaml",label:"client.yaml",default:!0,mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-yaml"},'apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: client\n  namespace:  otterize-tutorial-npol\nspec:\n  selector:\n    matchLabels:\n      app: client\n  template:\n    metadata:\n      labels:\n        app: client\n    spec:\n      containers:\n        - name: client\n          image: alpine/curl\n          command: [ "/bin/sh", "-c", "--" ]\n          args: [ "while true; do echo \\"Calling server...\\"; if ! timeout 2 curl -si server 2>/dev/null; then echo \\"curl timed out\\"; fi; sleep 2; done" ]\n'))),(0,l.kt)(i.Z,{value:"client-other.yaml",label:"client-other.yaml",default:!0,mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-yaml"},'apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: client-other\n  namespace:  otterize-tutorial-npol\nspec:\n  selector:\n    matchLabels:\n      app: client-other\n  template:\n    metadata:\n      labels:\n        app: client-other\n    spec:\n      containers:\n        - name: client-other\n          image: alpine/curl\n          command: [ "/bin/sh", "-c", "--" ]\n          args: [ "while true; do echo \\"Calling server...\\"; if ! timeout 2 curl -si server 2>/dev/null; then echo \\"curl timed out\\"; fi; sleep 2; done" ]\n'))))),(0,l.kt)("ol",null,(0,l.kt)("li",{parentName:"ol"},"Deploy the two clients and the server in their namespace using ",(0,l.kt)("inlineCode",{parentName:"li"},"kubectl"),":")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-shell"},"kubectl apply -f https://docs.otterize.com/code-examples/automate-network-policies/all.yaml\n")),(0,l.kt)("details",null,(0,l.kt)("summary",null,"Optional: check deployment status"),"Check that the client and server pods were deployed",(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"kubectl get pods -n otterize-tutorial-npol\n")),(0,l.kt)("p",null,"You should see"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"NAME                           READY   STATUS    RESTARTS   AGE\nclient-596bcb48d5-pnjxc        1/1     Running   0          8s\nclient-other-f56d65d7f-z2wg2   1/1     Running   0          8s\nserver-6bb4784ccc-wtz7f        1/1     Running   0          8s\n"))),(0,l.kt)("p",null,"Let's monitor both client attempts to call the server with additional terminal windows,\nso we can see the effects of our changes in real time."),(0,l.kt)("ol",{start:2},(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("strong",{parentName:"li"},"Open a new terminal window ","[client]")," and tail the client log:")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"kubectl logs -f --tail 1 -n otterize-tutorial-npol deploy/client\n")),(0,l.kt)("details",null,(0,l.kt)("summary",null,"Expected output"),(0,l.kt)("p",null,"At this point the client should be able to communicate with the server:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"Calling server...\nHTTP/1.1 200 OK\n...\nHi, I am the server, you called, may I help you?\n"))),(0,l.kt)("ol",{start:3},(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("strong",{parentName:"li"},"Open another terminal window ","[client-other]")," and tail the client-other log:")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"kubectl logs -f --tail 1 -n otterize-tutorial-npol deploy/client-other\n")),(0,l.kt)("details",null,(0,l.kt)("summary",null,"Expected output"),(0,l.kt)("p",null,"At this point the client should be able to communicate with the server:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"Calling server...\nHTTP/1.1 200 OK\n...\nHi, I am the server, you called, may I help you?\n"))),(0,l.kt)("p",null,"If you've attached Otterize OSS to Otterize Cloud, you can now browse to your account at ",(0,l.kt)("a",{parentName:"p",href:"https://app.otterize.com"},"https://app.otterize.com")," and see the access graph for your cluster:"),(0,l.kt)("p",null,(0,l.kt)("img",{alt:"Access graph",src:n(548).Z,width:"1471",height:"645"})),(0,l.kt)("h2",{id:"apply-intents"},"Apply intents"),(0,l.kt)("p",null,"We will now declare that the ",(0,l.kt)("strong",{parentName:"p"},"client")," intends to call the ",(0,l.kt)("strong",{parentName:"p"},"server"),"."),(0,l.kt)("p",null,"When the intents YAML is applied, creating a custom resource of type ",(0,l.kt)("inlineCode",{parentName:"p"},"ClientIntents"),",\nOtterize will add a network policy to allow the intended calls\n(",(0,l.kt)("strong",{parentName:"p"},"client")," ","\u2192"," ",(0,l.kt)("strong",{parentName:"p"},"server"),") and fail all unintended calls (e.g., ",(0,l.kt)("strong",{parentName:"p"},"client-other")," ","\u2192"," ",(0,l.kt)("strong",{parentName:"p"},"server"),")."),(0,l.kt)("ol",null,(0,l.kt)("li",{parentName:"ol"},"Here is the ",(0,l.kt)("inlineCode",{parentName:"li"},"intents.yaml")," declaration of the client, which we will apply below:")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-yaml"},"apiVersion: k8s.otterize.com/v1alpha2\nkind: ClientIntents\nmetadata:\n  name: client\n  namespace:  otterize-tutorial-npol\nspec:\n  service:\n    name: client\n  calls:\n    - name: server\n      type: http\n")),(0,l.kt)("h3",{id:"see-it-in-action"},"See it in action"),(0,l.kt)("p",null,"Keep an eye on the logs being tailed in the ",(0,l.kt)("strong",{parentName:"p"},"[client-other]")," terminal window,\nand apply this ",(0,l.kt)("inlineCode",{parentName:"p"},"intents.yaml")," file in your ",(0,l.kt)("strong",{parentName:"p"},"main terminal window")," using:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-shell"},"kubectl apply -f https://docs.otterize.com/code-examples/automate-network-policies/intents.yaml\n")),(0,l.kt)("admonition",{type:"tip"},(0,l.kt)("p",{parentName:"admonition"},"Client intents are the cornerstone of ",(0,l.kt)("a",{parentName:"p",href:"https://otterize.com/ibac"},"intent-based access control (IBAC)"),".")),(0,l.kt)("ol",{start:2},(0,l.kt)("li",{parentName:"ol"},"You should quickly see in the ",(0,l.kt)("strong",{parentName:"li"},"[client-other]")," terminal that it times out when calling the server,\nas expected since it didn't declare its intents:")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"Calling server...\nHTTP/1.1 200 OK\n...\nHi, I am the server, you called, may I help you?  # <- before applying the intents file\n# highlight-start\nCalling server...                                 # <- after applying the intents file\ncurl timed out\nCalling server...\ncurl timed out\n# highlight-end\n")),(0,l.kt)("details",null,(0,l.kt)("summary",null,"Not seeing the time out?"),(0,l.kt)("p",null,"If client-other isn't timing out, then the installed CNI plugin likely does not support network policies.\nConsult the docs for your Kubernetes distribution or head back to the ",(0,l.kt)("a",{parentName:"p",href:"#prerequisites"},"Calico installation section")," to install one.\nFor example, Minikube does not start by default with a CNI that supports network policies\nbut you can ask it to start with one that does, such as Calico.")),(0,l.kt)("ol",{start:3},(0,l.kt)("li",{parentName:"ol"},"And in the ",(0,l.kt)("strong",{parentName:"li"},"[client]")," terminal you should see that calls go through, as expected since they were declared:")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"Calling server...\nHTTP/1.1 200 OK\n...\nHi, I am the server, you called, may I help you?\n")),(0,l.kt)("ol",{start:4},(0,l.kt)("li",{parentName:"ol"},"You should also see that a new network policy was created:")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"kubectl get NetworkPolicies -n otterize-tutorial-npol\n")),(0,l.kt)("p",null,"This should return:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"NAME                                           POD-SELECTOR                                         AGE\naccess-to-server-from-otterize-tutorial-npol   otterize/server=server-otterize-tutorial-np-7e16db   6s\n")),(0,l.kt)("p",null,"If you've attached Otterize OSS to Otterize Cloud, go back to see the ",(0,l.kt)("a",{parentName:"p",href:"https://app.otterize.com"},"access graph in your browser"),":"),(0,l.kt)("p",null,(0,l.kt)("img",{alt:"Access graph",src:n(9334).Z,width:"1464",height:"641"})),(0,l.kt)("p",null,"It's now clear what happened:"),(0,l.kt)("ol",null,(0,l.kt)("li",{parentName:"ol"},"The server is now protected, and is also blocking some of its clients. Click on it to see what to do about it."),(0,l.kt)("li",{parentName:"ol"},"Calls from ",(0,l.kt)("strong",{parentName:"li"},"[client]")," are declared (solid black inner line) and therefore allowed (thick green line)."),(0,l.kt)("li",{parentName:"ol"},"Calls from ",(0,l.kt)("strong",{parentName:"li"},"[client-other]"),' are not declared (missing "white" inner line) and therefore blocked (thick red line). Click on the line to see what to do about it.'),(0,l.kt)("li",{parentName:"ol"},"By the way, the two clients themselves are unprotected -- though we don't detect any traffic to them, we cannot be certain they don't expose addressable endpoints.")),(0,l.kt)("admonition",{title:"Done!",type:"tip"},(0,l.kt)("p",{parentName:"admonition"},"Otterize did its job of both protecting the server ",(0,l.kt)("em",{parentName:"p"},"and")," allowing intended access.")),(0,l.kt)("h2",{id:"what-did-we-accomplish"},"What did we accomplish?"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"Controlling access through network policies no longer means touching network policies at all.")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"Clients simply declare what they need to access with their intents files.")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"The next ",(0,l.kt)("inlineCode",{parentName:"p"},"kubectl apply")," ensures that network policies automatically reflect the intended pod-to-pod access."))),(0,l.kt)("details",null,(0,l.kt)("summary",null,"Expand to see what happened behind the scenes"),(0,l.kt)("p",null,"Otterize generated a specific network policy on the ingress of the pods of a server, allowing the server to\nbe accessed by the pods of a client. Otterize uses labels to define the network policy and associate it\nwith a server in a namespace and a client in a namespace, as follows:"),(0,l.kt)("ol",null,(0,l.kt)("li",{parentName:"ol"},"The server's pods are given a label ",(0,l.kt)("inlineCode",{parentName:"li"},"intents.otterize.com/server")," whose value uniquely represents that server.\nThe network policy stipulates that it applies to the ingress of server pods with this label."),(0,l.kt)("li",{parentName:"ol"},"The client's pods are given a label ",(0,l.kt)("inlineCode",{parentName:"li"},"intents.otterize.com/access-...")," derived from the server's unique ",(0,l.kt)("inlineCode",{parentName:"li"},"intents.otterize.com/server")," value.\nThe network policy stipulates that only client pods with this matching label can access the server."),(0,l.kt)("li",{parentName:"ol"},"The client's namespace is given a label ",(0,l.kt)("inlineCode",{parentName:"li"},"intents.otterize.com/namespace-name")," whose value is the namespace of the client.\nThe network policy stipulates that only client pods whose namespaces have this label can access the server.\nThis is used to allow cross-namespace intents.")),(0,l.kt)("p",null,"Otterize saved us from doing all this work by simply declaring the client's intents in ",(0,l.kt)("inlineCode",{parentName:"p"},"intents.yaml"),",\nwhile the appropriate network policies were managed automatically behind the scenes."),(0,l.kt)("p",null,"Further information about network policies and Otterize can be found\n",(0,l.kt)("a",{parentName:"p",href:"/reference/network-policies"},"here"),".")),(0,l.kt)("admonition",{title:"Bonus tutorial",type:"tip"},(0,l.kt)("p",{parentName:"admonition"},"Try to create an intents file yourself for ",(0,l.kt)("strong",{parentName:"p"},"client-other"),", and apply it to allow this other client to call the server.")),(0,l.kt)("h2",{id:"whats-next"},"What's next"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Get started with the ",(0,l.kt)("a",{parentName:"li",href:"/quick-tutorials/k8s-network-mapper"},"Otterize network mapper")," to help you bootstrap intents files\nfor use in ",(0,l.kt)("a",{parentName:"li",href:"https://otterize.com/ibac"},"intent-based access control (IBAC)"),"."),(0,l.kt)("li",{parentName:"ul"},"See in advance what calls will be allowed or blocked, by running Otterize in ",(0,l.kt)("strong",{parentName:"li"},"shadow mode")," ","\u2014"," just follow the ",(0,l.kt)("a",{parentName:"li",href:"/quick-visual-tutorials/visual-ibac-network-policies"},"quick visual tutorial for IBAC with network policies"),"."),(0,l.kt)("li",{parentName:"ul"},"Learn how to easily secure Kafka with IBAC, in ",(0,l.kt)("a",{parentName:"li",href:"/quick-tutorials/k8s-kafka-mtls"},"a hands-on tutorial")," or ",(0,l.kt)("a",{parentName:"li",href:"/quick-visual-tutorials/visual-ibac-kafka-k8s"},"a more visual tutorial"),".")),(0,l.kt)("h2",{id:"teardown"},"Teardown"),(0,l.kt)("p",null,"To remove the deployed examples run:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"kubectl delete namespace otterize-tutorial-npol\n")))}d.isMDXComponent=!0},548:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/base-29e51222f6d5b333abf697178f209212.png"},9334:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/protected-e783b7ba91b8a19f76e1962c8f7a3436.png"}}]);