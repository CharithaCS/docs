"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[717],{3905:(e,t,a)=>{a.d(t,{Zo:()=>p,kt:()=>m});var n=a(7294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function i(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function s(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?i(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function o(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},i=Object.keys(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var l=n.createContext({}),c=function(e){var t=n.useContext(l),a=t;return e&&(a="function"==typeof e?e(t):s(s({},t),e)),a},p=function(e){var t=c(e.components);return n.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},k=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,i=e.originalType,l=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),k=c(a),m=r,d=k["".concat(l,".").concat(m)]||k[m]||u[m]||i;return a?n.createElement(d,s(s({ref:t},p),{},{components:a})):n.createElement(d,s({ref:t},p))}));function m(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=a.length,s=new Array(i);s[0]=k;var o={};for(var l in t)hasOwnProperty.call(t,l)&&(o[l]=t[l]);o.originalType=e,o.mdxType="string"==typeof e?e:r,s[1]=o;for(var c=2;c<i;c++)s[c]=a[c];return n.createElement.apply(null,s)}return n.createElement.apply(null,a)}k.displayName="MDXCreateElement"},5162:(e,t,a)=>{a.d(t,{Z:()=>s});var n=a(7294),r=a(6010);const i="tabItem_Ymn6";function s(e){let{children:t,hidden:a,className:s}=e;return n.createElement("div",{role:"tabpanel",className:(0,r.Z)(i,s),hidden:a},t)}},5488:(e,t,a)=>{a.d(t,{Z:()=>m});var n=a(7462),r=a(7294),i=a(6010),s=a(2389),o=a(7392),l=a(7094),c=a(2466);const p="tabList__CuJ",u="tabItem_LNqP";function k(e){var t,a;const{lazy:s,block:k,defaultValue:m,values:d,groupId:f,className:h}=e,g=r.Children.map(e.children,(e=>{if((0,r.isValidElement)(e)&&"value"in e.props)return e;throw new Error("Docusaurus error: Bad <Tabs> child <"+("string"==typeof e.type?e.type:e.type.name)+'>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.')})),v=null!=d?d:g.map((e=>{let{props:{value:t,label:a,attributes:n}}=e;return{value:t,label:a,attributes:n}})),y=(0,o.l)(v,((e,t)=>e.value===t.value));if(y.length>0)throw new Error('Docusaurus error: Duplicate values "'+y.map((e=>e.value)).join(", ")+'" found in <Tabs>. Every value needs to be unique.');const b=null===m?m:null!=(t=null!=m?m:null==(a=g.find((e=>e.props.default)))?void 0:a.props.value)?t:g[0].props.value;if(null!==b&&!v.some((e=>e.value===b)))throw new Error('Docusaurus error: The <Tabs> has a defaultValue "'+b+'" but none of its children has the corresponding value. Available values are: '+v.map((e=>e.value)).join(", ")+". If you intend to show no default tab, use defaultValue={null} instead.");const{tabGroupChoices:N,setTabGroupChoices:w}=(0,l.U)(),[z,C]=(0,r.useState)(b),T=[],{blockElementScrollPositionUntilNextRender:S}=(0,c.o5)();if(null!=f){const e=N[f];null!=e&&e!==z&&v.some((t=>t.value===e))&&C(e)}const E=e=>{const t=e.currentTarget,a=T.indexOf(t),n=v[a].value;n!==z&&(S(t),C(n),null!=f&&w(f,String(n)))},O=e=>{var t;let a=null;switch(e.key){case"ArrowRight":{var n;const t=T.indexOf(e.currentTarget)+1;a=null!=(n=T[t])?n:T[0];break}case"ArrowLeft":{var r;const t=T.indexOf(e.currentTarget)-1;a=null!=(r=T[t])?r:T[T.length-1];break}}null==(t=a)||t.focus()};return r.createElement("div",{className:(0,i.Z)("tabs-container",p)},r.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,i.Z)("tabs",{"tabs--block":k},h)},v.map((e=>{let{value:t,label:a,attributes:s}=e;return r.createElement("li",(0,n.Z)({role:"tab",tabIndex:z===t?0:-1,"aria-selected":z===t,key:t,ref:e=>T.push(e),onKeyDown:O,onFocus:E,onClick:E},s,{className:(0,i.Z)("tabs__item",u,null==s?void 0:s.className,{"tabs__item--active":z===t})}),null!=a?a:t)}))),s?(0,r.cloneElement)(g.filter((e=>e.props.value===z))[0],{className:"margin-top--md"}):r.createElement("div",{className:"margin-top--md"},g.map(((e,t)=>(0,r.cloneElement)(e,{key:t,hidden:e.props.value!==z})))))}function m(e){const t=(0,s.Z)();return r.createElement(k,(0,n.Z)({key:String(t)},e))}},8894:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>p,contentTitle:()=>l,default:()=>m,frontMatter:()=>o,metadata:()=>c,toc:()=>u});var n=a(7462),r=(a(7294),a(3905)),i=a(5488),s=a(5162);const o={sidebar_position:1,title:"Intent-based access control for Kafka in Kubernetes"},l=void 0,c={unversionedId:"documentation/guides/ibac-for-k8s-kafka/README",id:"documentation/guides/ibac-for-k8s-kafka/README",title:"Intent-based access control for Kafka in Kubernetes",description:"We can realize intent-based access control in Kubernetes is by leveraging the built-in capabilities",source:"@site/docs/documentation/4-guides/3-ibac-for-k8s-kafka/README.mdx",sourceDirName:"documentation/4-guides/3-ibac-for-k8s-kafka",slug:"/documentation/guides/ibac-for-k8s-kafka/",permalink:"/documentation/guides/ibac-for-k8s-kafka/",draft:!1,editUrl:"https://github.com/otterize/docs/edit/main/docs/documentation/4-guides/3-ibac-for-k8s-kafka/README.mdx",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1,title:"Intent-based access control for Kafka in Kubernetes"},sidebar:"docSidebar",previous:{title:"Deeper dive into network policies",permalink:"/documentation/guides/k8s-ibac-via-network-policies/deeper-dive"},next:{title:"Credentials",permalink:"/documentation/guides/ibac-for-k8s-kafka/credentials"}},p={},u=[{value:"Choose a Kubernetes cluster, Kafka and services",id:"choose-a-kubernetes-cluster-kafka-and-services",level:2},{value:"Install Otterize into your Kubernetes",id:"install-otterize-into-your-kubernetes",level:2},{value:"Configure kafka for secure access",id:"configure-kafka-for-secure-access",level:2},{value:"Optional - Testing secure connection to Kafka",id:"optional---testing-secure-connection-to-kafka",level:3},{value:"Configure Otterize to manage Kafka ACLs",id:"configure-otterize-to-manage-kafka-acls",level:2},{value:"Setting security scope via ACLs",id:"setting-security-scope-via-acls",level:2},{value:"Setting the default security scope",id:"setting-the-default-security-scope",level:3},{value:"Otterize identities and Kafka ACLs",id:"otterize-identities-and-kafka-acls",level:2},{value:"\u2026",id:"",level:2},{value:"Practical notes",id:"practical-notes",level:2},{value:"Avoiding drift",id:"avoiding-drift",level:2},{value:"Granularities of access <em>(incl. via network policies, via authN-only, &amp; topic-level)</em>",id:"granularities-of-access-incl-via-network-policies-via-authn-only--topic-level",level:2}],k={toc:u};function m(e){let{components:t,...a}=e;return(0,r.kt)("wrapper",(0,n.Z)({},k,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"We can realize intent-based access control in Kubernetes is by leveraging the built-in capabilities\nKafka offers for enforcement using its ACL mechanism, coupled with K8s identities Otterize can easily bake\nintro mTLS certificates."),(0,r.kt)("admonition",{title:"to complete",type:"note"}),(0,r.kt)("p",null,"Of course, Otterize eliminates all of that. Let's see how."),(0,r.kt)("h2",{id:"choose-a-kubernetes-cluster-kafka-and-services"},"Choose a Kubernetes cluster, Kafka and services"),(0,r.kt)("p",null,"You can use this guide with your own set of services, e.g. first in a Kubernetes cluster running dev or lab services,\nand eventually in a staging or production cluster. You'll need admin access."),(0,r.kt)("p",null,"You can also use an existing Kafka deployment or use our provided deployment for ease of use."),(0,r.kt)("h2",{id:"install-otterize-into-your-kubernetes"},"Install Otterize into your Kubernetes"),(0,r.kt)("p",null,"To apply intents on an existing cluster you will need to install Otterize with the network policies\noption enabled. Follow the ",(0,r.kt)("a",{parentName:"p",href:"/documentation/guides/k8s-installation"},"instructions")," to install Otterize or\ninstall only the ",(0,r.kt)("a",{parentName:"p",href:"/documentation/guides/k8s-installation#kafkamtls"},"Kafka/mTLS components")," for Otterize."),(0,r.kt)("h2",{id:"configure-kafka-for-secure-access"},"Configure kafka for secure access"),(0,r.kt)("p",null,"To configure kafka for secure access we have multiple areas we need to modify in its configuration to prepare for secure\naccess and another where we add annotations to let Otterize know it needs to generate credentials for secure access."),(0,r.kt)("p",null,"The following example shows how to configure bitnami's popular\nkafka ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/bitnami/charts/tree/master/bitnami/kafka"},"chart"),":"),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("p",{parentName:"admonition"},"Though SSL was replaced by TLS, Kafka still uses the term SSL internally.")),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Allow Otterize to manage Kafka by adding it as a super user wtih:"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},'superUsers: "User:CN=kafka.kafka,O=SPIRE,C=US;User:CN=intents-operator.otterize,O=SPIRE,C=US"\n'))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Configure its ",(0,r.kt)("a",{parentName:"p",href:"https://www.confluent.io/blog/kafka-listeners-explained/"},"listeners")," to use SSL"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},'listeners:\n  - "CLIENT://:9092"\n  - "INTERNAL://:9093"\nadvertisedListeners:\n  - "CLIENT://:9092"\n  - "INTERNAL://:9093"\nlistenerSecurityProtocolMap: "INTERNAL:SSL,CLIENT:SSL"\n'))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Set the authentication parameters to"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Use mTLS"),(0,r.kt)("li",{parentName:"ul"},"Having the credentials stored in a Java KeyStore (JKS) format stored in a K8s secret called ",(0,r.kt)("inlineCode",{parentName:"li"},"kafka-tls-secret"),"\nwith a password set to ",(0,r.kt)("inlineCode",{parentName:"li"},"password"),"."),(0,r.kt)("li",{parentName:"ul"},"Deny anonymous access")),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},"auth: \n  clientProtocol: mtls\n  interBrokerProtocol: mtls\n  tls:\n    type: jks\n    existingSecrets:\n      - kafka-tls-secret\n    password: password\nauthorizerClassName: kafka.security.authorizer.AclAuthorizer\nallowEveryoneIfNoAclFound: true  \n"))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Add pod annotations to let Otterize know it needs to generate the JKS credentials and store them at the specified K8s\nsecret according to bitnami's\nchart ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/bitnami/charts/tree/master/bitnami/kafka#enable-security-for-kafka-and-zookeeper"},"specifications")," :"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},'podAnnotations:\n  otterize/cert-type: jks\n  spire-integration.otterize.com/tls-secret-name: kafka-tls-secret\n  otterize/truststore-file-name: kafka.truststore.jks\n  otterize/keystore-file-name: kafka-keystore.jks\n  otterize/dns-names: "kafka-0.kafka-headless.kafka.svc.cluster.local,kafka.kafka.svc.cluster.local"\n  otterize/cert-ttl: "31536000" # 1 year\n')))),(0,r.kt)("details",null,(0,r.kt)("summary",null,"Expand to see the complete YAML of this example..."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},'superUsers: "User:CN=kafka.kafka,O=SPIRE,C=US;User:CN=intents-operator.otterize,O=SPIRE,C=US"\nlisteners:\n  - "CLIENT://:9092"\n  - "INTERNAL://:9093"\nadvertisedListeners:\n  - "CLIENT://:9092"\n  - "INTERNAL://:9093"\nlistenerSecurityProtocolMap: "INTERNAL:SSL,CLIENT:SSL"\nauth:\n  clientProtocol: mtls\n  interBrokerProtocol: mtls\n  tls:\n    type: jks\n    existingSecrets:\n      - kafka-tls-secret\n    password: password\nauthorizerClassName: kafka.security.authorizer.AclAuthorizer\npodAnnotations:\n  otterize/cert-type: jks\n  spire-integration.otterize.com/tls-secret-name: kafka-tls-secret\n  otterize/truststore-file-name: kafka.truststore.jks\n  otterize/keystore-file-name: kafka-keystore.jks\n  otterize/dns-names: "kafka-0.kafka-headless.kafka.svc.cluster.local,kafka.kafka.svc.cluster.local"\n  otterize/cert-ttl: "31536000" # 1 year\n'))),(0,r.kt)("p",null,"The following command will deploy a Kafka cluster configured to use Otterize-provided mTLS credentials\nwith permissions for Otterize to configure ACLs."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"helm repo add bitnami https://charts.bitnami.com/bitnami\nhelm upgrade --install --create-namespace -n kafka kafka \\\n--version 14.x.x bitnami/kafka \\\n-f https://docs.otterize.com/code-examples/kafka-mtls-intents/helm/values.yaml\n")),(0,r.kt)("details",null,(0,r.kt)("summary",null,"Optional: check deployment status"),(0,r.kt)("div",null,(0,r.kt)("p",null,"It can take several minutes for the pods to ",(0,r.kt)("strong",{parentName:"p"},"stabilize")," into the ",(0,r.kt)("inlineCode",{parentName:"p"},"Ready")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"Running")," states. You can monitor with\nthe following command:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"kubectl get pods -n kafka -w\n")),(0,r.kt)("p",null,"After ",(0,r.kt)("strong",{parentName:"p"},"stabilization")," you should see:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"NAME                READY   STATUS    RESTARTS      AGE\nkafka-0             1/1     Running   1 (25s ago)   45s\nkafka-zookeeper-0   1/1     Running   0             56s\n")))),(0,r.kt)("h3",{id:"optional---testing-secure-connection-to-kafka"},"Optional - Testing secure connection to Kafka"),(0,r.kt)("p",null,"You can set up an interactive session that securely connects to Kafka by deploying a pod configured to get credentials\nand using the popular ",(0,r.kt)("a",{parentName:"p",href:"https://kafka.apache.org/quickstart#quickstart_send"},"kafka-console-producer")," and\n",(0,r.kt)("a",{parentName:"p",href:"https://kafka.apache.org/quickstart#quickstart_consume"},"kafka-console-consumer")," scripts:"),(0,r.kt)("details",null,(0,r.kt)("summary",null,"Expand to see the details of this example..."),(0,r.kt)(i.Z,{mdxType:"Tabs"},(0,r.kt)(s.Z,{value:"namespace.yaml",label:"namespace.yaml",default:!0,mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},"apiVersion: v1\nkind: Namespace\nmetadata:\nname: otterize-tutorial-kafka-mtls\n"))),(0,r.kt)(s.Z,{value:"interactive.yaml",label:"interactive.yaml",default:!0,mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},'apiVersion: apps/v1\nkind: Deployment\nmetadata:\nname: interactive\nnamespace: otterize-tutorial-kafka-mtls\nspec:\nselector:\n matchLabels:\n   app: interactive\ntemplate:\n metadata:\n   labels:\n     app: interactive\n   annotations:\n     spire-integration.otterize.com/tls-secret-name: interactive-credentials-secret\n     spire-integration.otterize.com/cert-type: jks\n     spire-integration.otterize.com/truststore-file-name: kafka.truststore.jks\n     spire-integration.otterize.com/keystore-file-name: kafka.keystore.jks\n spec:\n   containers:\n     - name: interactive\n       image: bitnami/kafka\n       command: [ "/bin/sh", "-c", "--" ]\n       args: [ "sleep infinity" ]\n       volumeMounts:\n         - mountPath: /app\n           name: interactive-properties\n         - name: otterize-credentials\n           mountPath: /var/otterize/credentials\n           readOnly: true\n   volumes:\n     - name: interactive-properties\n       configMap:\n         name: interactive-properties\n     - name: otterize-credentials\n       secret:\n         secretName: interactive-credentials-secret\n'))),(0,r.kt)(s.Z,{value:"interactive-configmap.yaml",label:"interactive-configmap.yaml",default:!0,mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},"apiVersion: v1\nkind: ConfigMap\nmetadata:\nname: interactive-properties\nnamespace: otterize-tutorial-kafka-mtls\ndata:\nclient.properties: |\n security.protocol=SSL\n ssl.keystore.location=/var/otterize/credentials/kafka.keystore.jks\n ssl.keystore.password=password\n ssl.truststore.location=/var/otterize/credentials/kafka.truststore.jks\n ssl.truststore.password=password\n"))))),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Deploy a pod configured for the interactive session connecting to Kafka"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"kubectl apply -f https://docs.otterize.com/code-examples/kafka-mtls/interactive/all.yaml\n"))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Check that the ",(0,r.kt)("inlineCode",{parentName:"p"},"pod")," was deployed"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"kubectl get pods -n otterize-tutorial-kafka-mtls -l app=interactive\n")),(0,r.kt)("p",{parentName:"li"},"You should see"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre"},"NAME                           READY   STATUS    RESTARTS   AGE\ninteractive-5568ff58ff-84ksc   1/1     Running   0          8s\n"))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Let's open two interactive terminal windows - one for the producer and one for the consumer with so we can see\nthe messages sent and received in real time:"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-bash",metastring:'title="Producer terminal"',title:'"Producer','terminal"':!0},"kubectl exec -n otterize-tutorial-kafka-mtls -it deploy/interactive -- bash \\\n/opt/bitnami/kafka/bin/kafka-console-producer.sh \\\n--bootstrap-server kafka.kafka:9092 \\\n-topic mytopic \\\n--producer.config /app/client.properties\n")),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-bash",metastring:'title="Consumer terminal"',title:'"Consumer','terminal"':!0},"kubectl exec -n otterize-tutorial-kafka-mtls -it deploy/interactive -- bash \\\n/opt/bitnami/kafka/bin/kafka-console-consumer.sh \\\n--bootstrap-server kafka.kafka:9092 \\\n-topic mytopic \\\n--consumer.config /app/client.properties\n"))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Write any text you wish on the ",(0,r.kt)("strong",{parentName:"p"},"producer terminal"),", send it with an ",(0,r.kt)("strong",{parentName:"p"},"enter")," and you will see the messages appear\non the"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-bash",metastring:'title="Producer terminal"',title:'"Producer','terminal"':!0},">Hello there consumer, this is the producer!\n>\n")),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-bash",metastring:'title="Consumer terminal"',title:'"Consumer','terminal"':!0},"Hello there consumer, this is the producer!\n")))),(0,r.kt)("h2",{id:"configure-otterize-to-manage-kafka-acls"},"Configure Otterize to manage Kafka ACLs"),(0,r.kt)("p",null,"To allow Otterize to configure ACLs for Kafka we need to create and apply a ",(0,r.kt)("inlineCode",{parentName:"p"},"KafkaServerConfig"),".\nThe basic configuration only allows Otterize to configure Kafka ACLs upon new applied intents.\nWe will later show how to add fine-grained control over topics."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},'apiVersion: k8s.otterize.com/v1alpha1\nkind: KafkaServerConfig\nmetadata:\n  name: kafkaserverconfig\n  namespace: kafka\nspec:\n  serverName: kafka\n  addr: kafka.kafka:9092\n  tls:\n    certFile: /etc/spifferize/svid.pem\n    keyFile: /etc/spifferize/key.pem\n    rootCAFile: /etc/spifferize/bundle.pem\n  topics:\n    - topic: "*"\n      pattern: prefix\n      clientIdentityRequired: true\n      intentsRequired: true\n')),(0,r.kt)("p",null,"You can apply it with"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"kubectl apply -f https://docs.otterize.com/code-examples/ibac-for-kafka/kafkaserverconfig.yaml\n")),(0,r.kt)("h2",{id:"setting-security-scope-via-acls"},"Setting security scope via ACLs"),(0,r.kt)("p",null,"To set a security scope for topic access we need to define"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Default access permission level for topics"),(0,r.kt)("li",{parentName:"ul"},"Per topic access permission level")),(0,r.kt)("p",null,"Available access permission levels are"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Unauthenticated - client identity not required",(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"clientIdentityRequired: false\nintentsRequired: false\n"))),(0,r.kt)("li",{parentName:"ul"},"Authenticated - client identity required",(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"clientIdentityRequired: true\nintentsRequired: false\n"))),(0,r.kt)("li",{parentName:"ul"},"Authorized - client identity and an intent are required",(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"clientIdentityRequired: ture\nintentsRequired: ture\n")))),(0,r.kt)("p",null,"Topic selectors can be set by using a ",(0,r.kt)("inlineCode",{parentName:"p"},"prefix")," match or a ",(0,r.kt)("inlineCode",{parentName:"p"},"literal")," match pattern. Read more ",(0,r.kt)("a",{parentName:"p",href:"https://docs.confluent.io/platform/current/kafka/authorization.html#prefixed-acls"},"here"),"."),(0,r.kt)("h3",{id:"setting-the-default-security-scope"},"Setting the default security scope"),(0,r.kt)("p",null,"To set the default security scope for topics we will use the following ",(0,r.kt)("inlineCode",{parentName:"p"},"topic")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"pattern"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'    - topic: "*"\n      pattern: prefix\n')),(0,r.kt)("p",null,"Alongside\nTo set permissions we need\nprefix\nliteral"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},'apiVersion: k8s.otterize.com/v1alpha1\nkind: KafkaServerConfig\nmetadata:\n  name: kafkaserverconfig\n  namespace: kafka\nspec:\n  serverName: kafka\n  addr: kafka.kafka:9092\n  tls:\n    certFile: /etc/spifferize/svid.pem\n    keyFile: /etc/spifferize/key.pem\n    rootCAFile: /etc/spifferize/bundle.pem\n  topics:\n    - topic: "mytopic"\n      pattern: literal\n      clientIdentityRequired: true\n      intentsRequired: true\n')),(0,r.kt)("h2",{id:"otterize-identities-and-kafka-acls"},"Otterize identities and Kafka ACLs"),(0,r.kt)("h2",{id:""},"\u2026"),(0,r.kt)("h2",{id:"practical-notes"},"Practical notes"),(0,r.kt)("h2",{id:"avoiding-drift"},"Avoiding drift"),(0,r.kt)("h2",{id:"granularities-of-access-incl-via-network-policies-via-authn-only--topic-level"},"Granularities of access ",(0,r.kt)("em",{parentName:"h2"},"(incl. via network policies, via authN-only, & topic-level)")))}m.isMDXComponent=!0}}]);