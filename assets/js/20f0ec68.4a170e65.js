"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[521],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>k});var a=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function r(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},l=Object.keys(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var s=a.createContext({}),p=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=p(e.components);return a.createElement(s.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,l=e.originalType,s=e.parentName,c=r(e,["components","mdxType","originalType","parentName"]),m=p(n),k=o,u=m["".concat(s,".").concat(k)]||m[k]||d[k]||l;return n?a.createElement(u,i(i({ref:t},c),{},{components:n})):a.createElement(u,i({ref:t},c))}));function k(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var l=n.length,i=new Array(l);i[0]=m;var r={};for(var s in t)hasOwnProperty.call(t,s)&&(r[s]=t[s]);r.originalType=e,r.mdxType="string"==typeof e?e:o,i[1]=r;for(var p=2;p<l;p++)i[p]=n[p];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},5408:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>u,frontMatter:()=>l,metadata:()=>r,toc:()=>p});var a=n(7462),o=(n(7294),n(3905));const l={sidebar_position:2,title:"Deeper dive into network policies"},i=void 0,r={unversionedId:"documentation/guides/k8s-ibac-via-network-policies/deeper-dive",id:"documentation/guides/k8s-ibac-via-network-policies/deeper-dive",title:"Deeper dive into network policies",description:"Recap: K8s network policies and CNI network plugins",source:"@site/docs/documentation/4-guides/2-k8s-ibac-via-network-policies/2-deeper-dive.mdx",sourceDirName:"documentation/4-guides/2-k8s-ibac-via-network-policies",slug:"/documentation/guides/k8s-ibac-via-network-policies/deeper-dive",permalink:"/documentation/guides/k8s-ibac-via-network-policies/deeper-dive",draft:!1,editUrl:"https://github.com/otterize/docs/edit/main/docs/documentation/4-guides/2-k8s-ibac-via-network-policies/2-deeper-dive.mdx",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2,title:"Deeper dive into network policies"},sidebar:"docSidebar",previous:{title:"IBAC in Kubernetes via network policies",permalink:"/documentation/guides/k8s-ibac-via-network-policies/"},next:{title:"Intent-based access control for Kafka in Kubernetes",permalink:"/documentation/guides/ibac-for-k8s-kafka/"}},s={},p=[{value:"Recap: K8s network policies and CNI network plugins",id:"recap-k8s-network-policies-and-cni-network-plugins",level:2},{value:"How a network policy looks like",id:"how-a-network-policy-looks-like",level:3},{value:"Applying intents on an existing cluster",id:"applying-intents-on-an-existing-cluster",level:2},{value:"Setting security scope via default network policies",id:"setting-security-scope-via-default-network-policies",level:3},{value:"Default deny netwrk policy",id:"default-deny-netwrk-policy",level:4},{value:"Auto generating network policies for ingress",id:"auto-generating-network-policies-for-ingress",level:3},{value:"Deep dive - how intents translate to network policies.",id:"deep-dive---how-intents-translate-to-network-policies",level:2},{value:"Deploy example",id:"deploy-example",level:3},{value:"Track artifacts",id:"track-artifacts",level:3},{value:"\u2026",id:"",level:2}],c=e=>function(t){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,o.kt)("div",t)},d=c("Tabs"),m=c("TabItem"),k={toc:p};function u(e){let{components:t,...n}=e;return(0,o.kt)("wrapper",(0,a.Z)({},k,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h2",{id:"recap-k8s-network-policies-and-cni-network-plugins"},"Recap: K8s network policies and CNI network plugins"),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://kubernetes.io/docs/concepts/services-networking/network-policies/"},"Network policies")," are one of the tools we\ncan use for traffic shaping within K8s clusters. They allow us to shape traffic using selectors, policies, and L3\nand L4 identifiers. To enforce network policies, a Kubernetes cluster requires a CNI supporting network policies to be\ninstalled. Some popular options are Calico and Cilium."),(0,o.kt)("h3",{id:"how-a-network-policy-looks-like"},"How a network policy looks like"),(0,o.kt)("p",null,"Let's take a look at an example showing a network policy allowing traffic"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("em",{parentName:"li"},"from")," pods labeled ",(0,o.kt)("inlineCode",{parentName:"li"},"app:backend")," in namespaces labeled ",(0,o.kt)("inlineCode",{parentName:"li"},"env:production")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("em",{parentName:"li"},"to")," pods labeled ",(0,o.kt)("inlineCode",{parentName:"li"},"app:db")," in the namespace  ",(0,o.kt)("inlineCode",{parentName:"li"},"production-db"))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml"},"apiVersion: networking.k8s.io/v1\nkind: NetworkPolicy\nmetadata:\n  name: allow-production-backend\n  # highlight-next-line\n  namespace: production-db            # [Target filter] Policy applies to target pods in this namespace\nspec:\n  podSelector:\n    matchLabels:\n      # highlight-next-line\n      app: db                         # [Target filter] Policy applies to target pods with this label\n  policyTypes:\n    # highlight-next-line\n    - Ingress                         # [Direction] Policy implemented as a filter on incoming connections\n  ingress:\n    - from:\n        - namespaceSelector:\n            matchLabels:\n              # highlight-next-line\n              env: production         # [Source filter] Policy filters source pods from namespaces with this label\n        - podSelector:\n            matchLabels:\n              # highlight-next-line\n              app: backend            # [Source filter] Policy filters source pods from with this label\n")),(0,o.kt)("h2",{id:"applying-intents-on-an-existing-cluster"},"Applying intents on an existing cluster"),(0,o.kt)("p",null,"To apply intents on an existing cluster you will need to install Otterize with the network policies\noption enabled. You can follow the ",(0,o.kt)("a",{parentName:"p",href:"/documentation/guides/k8s-installation"},"complete installation")," or\ninstall only the ",(0,o.kt)("a",{parentName:"p",href:"/documentation/guides/k8s-installation#network-policies-only"},"network policy components"),"."),(0,o.kt)("p",null,"The following sections refer to a demo deployment we will deploy at first and then start configuring intents for."),(0,o.kt)("h3",{id:"setting-security-scope-via-default-network-policies"},"Setting security scope via default network policies"),(0,o.kt)("p",null,"Two common approaches for working with network policies are"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Allow all traffic between pods, protect some pods by applying ingress network policies to them."),(0,o.kt)("li",{parentName:"ul"},"Block all traffic between pods except allowed traffic by network policies.")),(0,o.kt)("p",null,"You can apply both approaches (allow/block all) within your cluster (e.g. by applying network policies based on\nnamespaces)."),(0,o.kt)("admonition",{type:"caution"},(0,o.kt)("p",{parentName:"admonition"},"Applying an ingress network policy to a pod will automatically block all communications to it except those allowed by\nnetwork policies.")),(0,o.kt)("h4",{id:"default-deny-netwrk-policy"},"Default deny netwrk policy"),(0,o.kt)("p",null,"To block all traffic within a namespace (e.g. ",(0,o.kt)("em",{parentName:"p"},"production"),") you can apply a default deny network policy like the\nfollowing example"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml"},"apiVersion: networking.k8s.io/v1\nkind: NetworkPolicy\nmetadata:\n  name: default-deny-ingress\n  namespace: production\nspec:\n  podSelector: { }\n  policyTypes:\n    - Ingress\n")),(0,o.kt)("h3",{id:"auto-generating-network-policies-for-ingress"},"Auto generating network policies for ingress"),(0,o.kt)("admonition",{type:"caution"},(0,o.kt)("p",{parentName:"admonition"},"Otterize defaults to automatically generate network policies for LoadBalancer, NodePort, and Ingress traffic\nwhen an intent will generate a network policy that can block existing traffic. To disable this feature XXX")),(0,o.kt)("p",null,"Let's look at an example from our demo. We have a ",(0,o.kt)("inlineCode",{parentName:"p"},"frontend")," service being accessed from multiple source"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"loadgenerator")," calls it from within the cluster to generate traffic"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"frontend-external")," is a ",(0,o.kt)("inlineCode",{parentName:"li"},"LoadBalancer")," directing traffic from outside the cluster to the ",(0,o.kt)("inlineCode",{parentName:"li"},"frontend"))),(0,o.kt)("p",null,"Be applying the following intents file"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml"},"apiVersion: k8s.otterize.com/v1alpha1\nkind: ClientIntents\nmetadata:\n  name: loadgenerator\nspec:\n  service:\n    name: loadgenerator\n  calls:\n    - name: frontend\n      type: HTTP\n")),(0,o.kt)("p",null,"Otterize will generate a network policy allowing access from the ",(0,o.kt)("inlineCode",{parentName:"p"},"loadgenerator")," to the ",(0,o.kt)("inlineCode",{parentName:"p"},"frontend"),".\nIf left unhandled, any other traffic not allowed by existing network policies to the ",(0,o.kt)("inlineCode",{parentName:"p"},"frontend")," will get blocked. In our\ncase that means that the ",(0,o.kt)("inlineCode",{parentName:"p"},"frontend-external")," ",(0,o.kt)("inlineCode",{parentName:"p"},"LoadBalancer")," won't be able to communicate with with ",(0,o.kt)("inlineCode",{parentName:"p"},"frontend"),"."),(0,o.kt)("p",null,"To overcome this, Otterize will automatically generate a network policy to allow traffic from ",(0,o.kt)("inlineCode",{parentName:"p"},"frontend-external"),"\nto ",(0,o.kt)("inlineCode",{parentName:"p"},"frontend")," by relying on the existence of the ingress (in this case ",(0,o.kt)("inlineCode",{parentName:"p"},"LoadBalancer"),") as an intent between the two."),(0,o.kt)("p",null,"FAQ:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Why can't Otterize always generate network policies for ingress types?",(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},"If no network policies exist, automatically generating a network policy to allow ",(0,o.kt)("inlineCode",{parentName:"li"},"frontend-external")," -> ",(0,o.kt)("inlineCode",{parentName:"li"},"frontend")," will\nblock existing traffic like ",(0,o.kt)("inlineCode",{parentName:"li"},"loadgenerator")," -> ",(0,o.kt)("inlineCode",{parentName:"li"},"frontend"),".")))),(0,o.kt)("h2",{id:"deep-dive---how-intents-translate-to-network-policies"},"Deep dive - how intents translate to network policies."),(0,o.kt)("p",null,"Let's follow an example scenario and track how Otterize configures network policies when we apply intents."),(0,o.kt)("h3",{id:"deploy-example"},"Deploy example"),(0,o.kt)("p",null,"Our example consists of two pods: an HTTP server and a client that calls it. We also deploy a default-deny ingress network policy,\nblocking pods from accepting incoming calls unless another network policy explicitly allows them."),(0,o.kt)(d,{mdxType:"Tabs"},(0,o.kt)(m,{value:"namespace.yaml",label:"namespace.yaml",default:!0,mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml"},"\n> include file not found: ../../../static/code-examples/network-policies/namespace.yaml --\x3e /home/runner/work/docs/docs/docs/static/code-examples/network-policies/namespace.yaml\n\n"))),(0,o.kt)(m,{value:"server.yaml",label:"server.yaml",default:!0,mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml"},"\n> include file not found: ../../../static/code-examples/network-policies/server-deployment.yaml --\x3e /home/runner/work/docs/docs/docs/static/code-examples/network-policies/server-deployment.yaml\n\n---\n\n> include file not found: ../../../static/code-examples/network-policies/server-service.yaml --\x3e /home/runner/work/docs/docs/docs/static/code-examples/network-policies/server-service.yaml\n\n"))),(0,o.kt)(m,{value:"client.yaml",label:"client.yaml",default:!0,mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml"},"\n> include file not found: ../../../static/code-examples/network-policies/client-deployment.yaml --\x3e /home/runner/work/docs/docs/docs/static/code-examples/network-policies/client-deployment.yaml\n\n"))),(0,o.kt)(m,{value:"default-deny.yaml",label:"default-deny.yaml",default:!0,mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml"},"\n> include file not found: ../../../static/code-examples/network-policies/default-deny-network-policy.yaml --\x3e /home/runner/work/docs/docs/docs/static/code-examples/network-policies/default-deny-network-policy.yaml\n\n")))),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Deploy the client, server, and the default deny network policy using ",(0,o.kt)("inlineCode",{parentName:"p"},"kubectl"),"."),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-shell"},"kubectl apply -f https://docs.otterize.com/code-examples/network-policies/all.yaml\n"))),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Check that the ",(0,o.kt)("inlineCode",{parentName:"p"},"client")," and server ",(0,o.kt)("inlineCode",{parentName:"p"},"pods")," were deployed"),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"kubectl get pods -n otterize-tutorial-npol\n")),(0,o.kt)("p",{parentName:"li"},"You should see"),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre"},"NAME                      READY   STATUS    RESTARTS   AGE\nclient-5689997b5c-grlnt   1/1     Running   0          35s\nserver-6698c58cbc-v9n9b   1/1     Running   0          34s\n"))),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"The client intents to call the server are declared with this ",(0,o.kt)("inlineCode",{parentName:"p"},"intents.yaml")," file:"),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-yaml"},"")))),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"include file not found: ../../../static/code-examples/network-policies/intents.yaml --\x3e /home/runner/work/docs/docs/docs/static/code-examples/network-policies/intents.yaml")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"Let's apply it:\n```shell\nkubectl apply -f https://docs.otterize.com/code-examples/network-policies/intents.yaml\n")),(0,o.kt)("h3",{id:"track-artifacts"},"Track artifacts"),(0,o.kt)("p",null,"After applying the intents file Otterize generated multiple artifacts to configure access from the client to\nserver via network policies:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Create a network policy allowing traffic from the ","[client, namespace -labeled]"," pods to ","[server-labeled]"," pods"),(0,o.kt)("li",{parentName:"ul"},"Label the client pods"),(0,o.kt)("li",{parentName:"ul"},"Label the client pod namespaces"),(0,o.kt)("li",{parentName:"ul"},"Label the server pods")),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Let's look at the generated network policy"),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"kubectl describe networkpolicies -n otterize-tutorial-npol access-to-server-from-otterize-tutorial-npol\n")),(0,o.kt)("p",{parentName:"li"},"You should see (without the comments)"),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-yaml"},"Name:         access-to-server-from-otterize-tutorial-npol\n# [Target filter] namespace\n# highlight-next-line\nNamespace:    otterize-tutorial-npol\nCreated on:   2022-09-08 19:12:24 +0300 IDT\nLabels:       intents.otterize.com/network-policy=true\nAnnotations:  <none>\nSpec:\n  # [Target filter] pods with this label\n  # highlight-next-line\n  PodSelector:     intents.otterize.com/server=server-otterize-tutorial-np-7e16db\n  Allowing ingress traffic:\n    To Port: <any> (traffic allowed to all ports)\n    From:\n      # [Source filter] namespaces with this label\n      # highlight-next-line\n      NamespaceSelector: intents.otterize.com/namespace-name=otterize-tutorial-npol\n      # [Source filter] pods with this label\n      # highlight-next-line\n      PodSelector: intents.otterize.com/access-server-otterize-tutorial-np-7e16db=true\n  Not affecting egress traffic\n  # [Direction]\n  # highlight-next-line\n  Policy Types: Ingress\n"))),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"And we can also see that the client and server pods are now labeled"),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"kubectl get pods -n otterize-tutorial-npol --show-labels\n")),(0,o.kt)("p",{parentName:"li"},"You should see"),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"NAME                      READY   STATUS    RESTARTS   AGE     LABELS\nclient-5cb67b748-l25vg    1/1     Running   0          7m57s   app=client,intents.otterize.com/access-server-otterize-tutorial-np-7e16db=true,intents.otterize.com/client=true,intents.otterize.com/server=client-otterize-tutorial-np-699302,pod-template-hash=5cb67b748,spire-integration.otterize.com/service-name=client\nserver-564b56f596-54str   1/1     Running   0          7m56s   app=server,intents.otterize.com/server=server-otterize-tutorial-np-7e16db,pod-template-hash=564b56f596,spire-integration.otterize.com/service-name=server\n")),(0,o.kt)("p",{parentName:"li"},"The key labels are"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},"For the server - ",(0,o.kt)("span",{style:{color:"gray"}},"intents.otterize.com/server"),"=",(0,o.kt)("span",{style:{color:"magenta"}},"server"),"-",(0,o.kt)("span",{style:{color:"red"}},"otterize-tutorial-np"),"-",(0,o.kt)("span",{style:{color:"green"}},"7e16db"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("span",{style:{color:"gray"}},"intents.otterize.com/server")," - Otterize label prefix"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("span",{style:{color:"magenta"}},"server")," - Server pod name"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("span",{style:{color:"red"}},"otterize-tutorial-np")," - Server pod namespace (might be truncated)"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("span",{style:{color:"green"}},"7e16db")," - Hash for server pod name and and namespace"))),(0,o.kt)("li",{parentName:"ul"},"For the client - ",(0,o.kt)("span",{style:{color:"gray"}},"intents.otterize.com/access"),"-",(0,o.kt)("span",{style:{color:"magenta"}},"server"),"-",(0,o.kt)("span",{style:{color:"red"}},"otterize-tutorial-np"),"-",(0,o.kt)("span",{style:{color:"green"}},"7e16db"),"=true",(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("span",{style:{color:"gray"}},"intents.otterize.com/server")," - Otterize label prefix"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("span",{style:{color:"magenta"}},"server")," - Server pod name"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("span",{style:{color:"red"}},"otterize-tutorial-np")," - Server pod namespace (might be truncated)"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("span",{style:{color:"green"}},"7e16db")," - Hash for server pod name and and namespace"))))),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Finally, let's look at the namespace label with"),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"kubectl get namespace otterize-tutorial-npol --show-labels\n")),(0,o.kt)("p",{parentName:"li"},"  You should see"),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"NAME                     STATUS   AGE   LABELS\notterize-tutorial-npol   Active   36s   intents.otterize.com/namespace-name=otterize-tutorial-npol,kubernetes.io/metadata.name=otterize-tutorial-npol\n")),(0,o.kt)("p",{parentName:"li"},"  With the new label add by otterize - ",(0,o.kt)("inlineCode",{parentName:"p"},"intents.otterize.com/namespace-name=otterize-tutorial-npol")))),(0,o.kt)("h2",{id:""},"\u2026"))}u.isMDXComponent=!0}}]);