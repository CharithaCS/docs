"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[369],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>m});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var c=r.createContext({}),l=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=l(e.components);return r.createElement(c.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,c=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),u=l(n),m=o,h=u["".concat(c,".").concat(m)]||u[m]||d[m]||a;return n?r.createElement(h,i(i({ref:t},p),{},{components:n})):r.createElement(h,i({ref:t},p))}));function m(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,i=new Array(a);i[0]=u;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s.mdxType="string"==typeof e?e:o,i[1]=s;for(var l=2;l<a;l++)i[l]=n[l];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}u.displayName="MDXCreateElement"},4669:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>i,default:()=>d,frontMatter:()=>a,metadata:()=>s,toc:()=>l});var r=n(7462),o=(n(7294),n(3905));const a={sidebar_position:2,title:"Intents operator"},i=void 0,s={unversionedId:"documentation/components/intents-operator/README",id:"documentation/components/intents-operator/README",title:"Intents operator",description:"The Otterize intents operator is an open source Kubernetes operator for easily managing service-to-service authorization",source:"@site/docs/documentation/10-components/2-intents-operator/README.mdx",sourceDirName:"documentation/10-components/2-intents-operator",slug:"/documentation/components/intents-operator/",permalink:"/documentation/components/intents-operator/",draft:!1,editUrl:"https://github.com/otterize/docs/edit/main/docs/documentation/10-components/2-intents-operator/README.mdx",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2,title:"Intents operator"},sidebar:"docSidebar",previous:{title:"Helm chart",permalink:"/documentation/components/otterize/helm-chart"},next:{title:"Helm chart",permalink:"/documentation/components/intents-operator/helm-chart"}},c={},l=[{value:"Plugins",id:"plugins",level:2},{value:"Network policies",id:"network-policies",level:3},{value:"Kafka mTLS &amp; ACLs",id:"kafka-mtls--acls",level:3}],p={toc:l};function d(e){let{components:t,...n}=e;return(0,o.kt)("wrapper",(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"The Otterize intents operator is an open source Kubernetes operator for easily managing service-to-service authorization\nby declaring the calls each service needs to make, using ",(0,o.kt)("a",{parentName:"p",href:"/documentation/intents-based-access-control/"},"client intents files"),".\nThe intents operator uses these files to configure network policies, Kafka ACLs, and other enforcement points (in the future) to allow just the intended calls."),(0,o.kt)("p",null,"If credentials such as X509 certificates are needed for authentication and authorization -- for example,\nto connect to Kafka with mTLS -- the Otterize intents operator works with SPIRE and the\n",(0,o.kt)("a",{parentName:"p",href:"/documentation/components/spire-integration-operator"},"SPIRE integration operator")," to automatically establish pod service identities, generate trusted credentials for each client service, and deliver them to the pod in a locally-mounted volume."),(0,o.kt)("h2",{id:"plugins"},"Plugins"),(0,o.kt)("h3",{id:"network-policies"},"Network policies"),(0,o.kt)("p",null,"The intents operator automatically creates, updates and deletes network policies, and automatically labels client and server pods, to reflect precisely the client-to-server calls declared in client intents files."),(0,o.kt)("p",null,"In the example above, the ",(0,o.kt)("inlineCode",{parentName:"p"},"checkoutservice")," intends to call the ",(0,o.kt)("inlineCode",{parentName:"p"},"shippingservice"),". When the CRD is applied through ",(0,o.kt)("inlineCode",{parentName:"p"},"kubectl apply"),", the intents operator labels the ",(0,o.kt)("inlineCode",{parentName:"p"},"checkoutservice")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"shippingservice")," pods, and creates a network policy for the ingress of the ",(0,o.kt)("inlineCode",{parentName:"p"},"shippingservice")," that references these labels and allows calls to the ",(0,o.kt)("inlineCode",{parentName:"p"},"shippingservice")," from the ",(0,o.kt)("inlineCode",{parentName:"p"},"checkoutservice"),"."),(0,o.kt)("p",null,"See ",(0,o.kt)("a",{parentName:"p",href:"/documentation/service-identities"},"service names and pod labels")," to learn how the right service names are inferred for pods, and how pods are labeled."),(0,o.kt)("h3",{id:"kafka-mtls--acls"},"Kafka mTLS & ACLs"),(0,o.kt)("p",null,"The intents operator automatically creates, updates, and deletes ACLs in Kafka clusters running within your Kubernetes cluster. It works together with SPIRE and the ",(0,o.kt)("a",{parentName:"p",href:"/documentation/components/spire-integration-operator"},"Otterize SPIRE integration operator")," to easily enable secure access to Kafka from client pods, all in your Kubernetes cluster."),(0,o.kt)("p",null,"The Otterize SPIRE integration operator automatically registers client pods with a SPIRE server, and writes the trusted credentials generated by SPIRE into Kubernetes secrets for use by those pods. The intents operator will in turn reflect the kafka-type intents as Kafka ACLs associated with those pod identities, so client pods get the precise access declared in their intents files."))}d.isMDXComponent=!0}}]);