"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[218],{3905:(e,t,a)=>{a.d(t,{Zo:()=>c,kt:()=>d});var n=a(7294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function l(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function o(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?l(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):l(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function i(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},l=Object.keys(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var s=n.createContext({}),p=function(e){var t=n.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):o(o({},t),e)),a},c=function(e){var t=p(e.components);return n.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,l=e.originalType,s=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),m=p(a),d=r,h=m["".concat(s,".").concat(d)]||m[d]||u[d]||l;return a?n.createElement(h,o(o({ref:t},c),{},{components:a})):n.createElement(h,o({ref:t},c))}));function d(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var l=a.length,o=new Array(l);o[0]=m;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i.mdxType="string"==typeof e?e:r,o[1]=i;for(var p=2;p<l;p++)o[p]=a[p];return n.createElement.apply(null,o)}return n.createElement.apply(null,a)}m.displayName="MDXCreateElement"},5162:(e,t,a)=>{a.d(t,{Z:()=>o});var n=a(7294),r=a(6010);const l="tabItem_Ymn6";function o(e){let{children:t,hidden:a,className:o}=e;return n.createElement("div",{role:"tabpanel",className:(0,r.Z)(l,o),hidden:a},t)}},5488:(e,t,a)=>{a.d(t,{Z:()=>d});var n=a(7462),r=a(7294),l=a(6010),o=a(2389),i=a(7392),s=a(7094),p=a(2466);const c="tabList__CuJ",u="tabItem_LNqP";function m(e){var t,a;const{lazy:o,block:m,defaultValue:d,values:h,groupId:k,className:f}=e,g=r.Children.map(e.children,(e=>{if((0,r.isValidElement)(e)&&"value"in e.props)return e;throw new Error("Docusaurus error: Bad <Tabs> child <"+("string"==typeof e.type?e.type:e.type.name)+'>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.')})),b=null!=h?h:g.map((e=>{let{props:{value:t,label:a,attributes:n}}=e;return{value:t,label:a,attributes:n}})),v=(0,i.l)(b,((e,t)=>e.value===t.value));if(v.length>0)throw new Error('Docusaurus error: Duplicate values "'+v.map((e=>e.value)).join(", ")+'" found in <Tabs>. Every value needs to be unique.');const w=null===d?d:null!=(t=null!=d?d:null==(a=g.find((e=>e.props.default)))?void 0:a.props.value)?t:g[0].props.value;if(null!==w&&!b.some((e=>e.value===w)))throw new Error('Docusaurus error: The <Tabs> has a defaultValue "'+w+'" but none of its children has the corresponding value. Available values are: '+b.map((e=>e.value)).join(", ")+". If you intend to show no default tab, use defaultValue={null} instead.");const{tabGroupChoices:y,setTabGroupChoices:N}=(0,s.U)(),[z,x]=(0,r.useState)(w),T=[],{blockElementScrollPositionUntilNextRender:_}=(0,p.o5)();if(null!=k){const e=y[k];null!=e&&e!==z&&b.some((t=>t.value===e))&&x(e)}const I=e=>{const t=e.currentTarget,a=T.indexOf(t),n=b[a].value;n!==z&&(_(t),x(n),null!=k&&N(k,String(n)))},O=e=>{var t;let a=null;switch(e.key){case"ArrowRight":{var n;const t=T.indexOf(e.currentTarget)+1;a=null!=(n=T[t])?n:T[0];break}case"ArrowLeft":{var r;const t=T.indexOf(e.currentTarget)-1;a=null!=(r=T[t])?r:T[T.length-1];break}}null==(t=a)||t.focus()};return r.createElement("div",{className:(0,l.Z)("tabs-container",c)},r.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,l.Z)("tabs",{"tabs--block":m},f)},b.map((e=>{let{value:t,label:a,attributes:o}=e;return r.createElement("li",(0,n.Z)({role:"tab",tabIndex:z===t?0:-1,"aria-selected":z===t,key:t,ref:e=>T.push(e),onKeyDown:O,onFocus:I,onClick:I},o,{className:(0,l.Z)("tabs__item",u,null==o?void 0:o.className,{"tabs__item--active":z===t})}),null!=a?a:t)}))),o?(0,r.cloneElement)(g.filter((e=>e.props.value===z))[0],{className:"margin-top--md"}):r.createElement("div",{className:"margin-top--md"},g.map(((e,t)=>(0,r.cloneElement)(e,{key:t,hidden:e.props.value!==z})))))}function d(e){const t=(0,o.Z)();return r.createElement(m,(0,n.Z)({key:String(t)},e))}},6846:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>c,contentTitle:()=>s,default:()=>d,frontMatter:()=>i,metadata:()=>p,toc:()=>u});var n=a(7462),r=(a(7294),a(3905)),l=a(5488),o=a(5162);const i={sidebar_position:2,title:"Map your cluster"},s=void 0,p={unversionedId:"quick-tutorials/k8s-network-mapper",id:"quick-tutorials/k8s-network-mapper",title:"Map your cluster",description:"The network mapper allows you to map pod-to-pod traffic within your K8s cluster. This tutorial will guide you",source:"@site/docs/2-quick-tutorials/2-k8s-network-mapper.mdx",sourceDirName:"2-quick-tutorials",slug:"/quick-tutorials/k8s-network-mapper",permalink:"/quick-tutorials/k8s-network-mapper",draft:!1,editUrl:"https://github.com/otterize/docs/edit/main/docs/2-quick-tutorials/2-k8s-network-mapper.mdx",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2,title:"Map your cluster"},sidebar:"docSidebar",previous:{title:"Automate network policies",permalink:"/quick-tutorials/k8s-network-policies"},next:{title:"Automate secure Kafka access",permalink:"/quick-tutorials/kafka-mtls"}},c={},u=[{value:"Install the network mapper",id:"install-the-network-mapper",level:2},{value:"Install the Otterize CLI",id:"install-the-otterize-cli",level:2},{value:"Map the cluster",id:"map-the-cluster",level:2},{value:"Deploy demo to simulate traffic",id:"deploy-demo-to-simulate-traffic",level:3},{value:"Show mapped traffic",id:"show-mapped-traffic",level:3},{value:"Change traffic, then &quot;Sniff&amp;Diff&quot;",id:"change-traffic-then-sniffdiff",level:3},{value:"What&#39;s next",id:"whats-next",level:2},{value:"Teardown",id:"teardown",level:3}],m={toc:u};function d(e){let{components:t,...a}=e;return(0,r.kt)("wrapper",(0,n.Z)({},m,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"The network mapper allows you to map pod-to-pod traffic within your K8s cluster. This tutorial will guide you\nthrough installing Otterize, mapping traffic and tracking changes."),(0,r.kt)("h2",{id:"install-the-network-mapper"},"Install the network mapper"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"helm repo add otterize https://helm.otterize.com\nhelm repo update\nhelm install network-mapper otterize/network-mapper -n otterize-system --create-namespace\n")),(0,r.kt)("h2",{id:"install-the-otterize-cli"},"Install the Otterize CLI"),(0,r.kt)(l.Z,{groupId:"operating-systems",mdxType:"Tabs"},(0,r.kt)(o.Z,{value:"mac",label:"Mac",mdxType:"TabItem"},(0,r.kt)(l.Z,{mdxType:"Tabs"},(0,r.kt)(o.Z,{value:"Apple Silicon",label:"Apple Silicon",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"wget https://github.com/otterize/otterize-cli/releases/download/v0.1.0/otterize-cli_0.1.0_Darwin_arm64.tar.gz\ntar xf otterize-cli_0.1.0_Darwin_arm64.tar.gz\nsudo cp otterize /usr/local/bin  # optionally move to PATH\n"))),(0,r.kt)(o.Z,{value:"Intel 64-bit",label:"Intel 64-bit",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"wget https://github.com/otterize/otterize-cli/releases/download/v0.1.0/otterize-cli_0.1.0_Darwin_x86_64.tar.gz\ntar xf otterize-cli_0.1.0_Darwin_x86_64.tar.gz\nsudo cp otterize /usr/local/bin  # optionally move to PATH\n"))))),(0,r.kt)(o.Z,{value:"windows",label:"Windows",mdxType:"TabItem"},(0,r.kt)(l.Z,{mdxType:"Tabs"},(0,r.kt)(o.Z,{value:"64-bit",label:"64-bit",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"wget https://github.com/otterize/otterize-cli/releases/download/v0.1.0/otterize-cli_0.1.0_Windows_x86_64.tar.gz\ntar xf otterize-cli_0.1.0_Windows_x86_64.tar.gz\nsudo cp otterize /usr/local/bin  # optionally move to PATH\n"))),(0,r.kt)(o.Z,{value:"32-bit",label:"32-bit",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"wget https://github.com/otterize/otterize-cli/releases/download/v0.1.0/otterize-cli_0.1.0_Windows_i386.tar.gz\ntar xf otterize-cli_0.1.0_Darwin_x86_64.tar.gz\nsudo cp otterize /usr/local/bin  # optionally move to PATH\n"))))),(0,r.kt)(o.Z,{value:"linux",label:"Linux",mdxType:"TabItem"},(0,r.kt)(l.Z,{mdxType:"Tabs"},(0,r.kt)(o.Z,{value:"amd64",label:"amd64",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"wget https://github.com/otterize/otterize-cli/releases/download/v0.1.0/otterize-cli_0.1.0_Linux_x86_64.tar.gz\ntar xf otterize-cli_0.1.0_Linux_x86_64.tar.gz\nsudo cp otterize /usr/local/bin  # optionally move to PATH\n"))),(0,r.kt)(o.Z,{value:"i386",label:"i386",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"wget https://github.com/otterize/otterize-cli/releases/download/v0.1.0/otterize-cli_0.1.0_Linux_i386.tar.gz\ntar xf otterize-cli_0.1.0_Linux_i386.tar.gz\nsudo cp otterize /usr/local/bin  # optionally move to PATH\n")))))),(0,r.kt)("p",null,"More variants are available at the ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/otterize/otterize-cli/releases"},"GitHub Releases page"),"."),(0,r.kt)("h2",{id:"map-the-cluster"},"Map the cluster"),(0,r.kt)("p",null,"The network mapper starts to sniff traffic and build an in-memory network map as soon as it's installed."),(0,r.kt)("h3",{id:"deploy-demo-to-simulate-traffic"},"Deploy demo to simulate traffic"),(0,r.kt)("p",null,"Let's add traffic to the cluster and see how the network mapper tracks it.\nDeploy the following simple example ","\u2014"," ",(0,r.kt)("inlineCode",{parentName:"p"},"client"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"client2")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"server"),", communicating over HTTP:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"kubectl apply -n otterize-tutorial-mapper -f https://docs.otterize.com/code-examples/network-mapper/all.yaml\n")),(0,r.kt)("h3",{id:"show-mapped-traffic"},"Show mapped traffic"),(0,r.kt)("p",null,"You can view mapped traffic by calling the CLI ",(0,r.kt)("inlineCode",{parentName:"p"},"export")," command. It supports multiple output formats such as ",(0,r.kt)("inlineCode",{parentName:"p"},"intents"),"\nand ",(0,r.kt)("inlineCode",{parentName:"p"},"JSON"),".\nThe following example shows the CLI output filtered for a namespace (otterize-tutorial-mapper) running three pods: client, client2, server."),(0,r.kt)(l.Z,{mdxType:"Tabs"},(0,r.kt)(o.Z,{value:"plain",label:"Plain",default:!0,mdxType:"TabItem"},(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Run the list command:"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"otterize mapper list -n otterize-tutorial-mapper\n"))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"You should get a result based on your existing traffic looking like this:"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"client in namespace otterize-tutorial-mapper calls:\n  - server\nclient2 in namespace otterize-tutorial-mapper calls:\n  - server\n"))))),(0,r.kt)(o.Z,{value:"intents",label:"Intents",default:!0,mdxType:"TabItem"},(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Run the export command:"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"otterize mapper export -n otterize-tutorial-mapper\n"))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"You should get a result based on your existing traffic looking like this:"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"apiVersion: k8s.k8s.otterize.com/v1\nkind: ClientIntents\nmetadata:\n  name: client\n  namespace: otterize-tutorial-mapper\nspec:\n  service:\n    name: client\n  calls:\n    - name: server\n---\napiVersion: k8s.k8s.otterize.com/v1\nkind: ClientIntents\nmetadata:\n  name: server\n  namespace: otterize-tutorial-mapper\nspec:\n  service:\n    name: client2\n  calls:\n    - name: server\n"))))),(0,r.kt)(o.Z,{value:"json",label:"JSON",mdxType:"TabItem"},(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Run the export command:"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"otterize mapper export -n otterize-tutorial-mapper --format json\n"))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"You should get a result based on your existing traffic looking like this:"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-json"},'[\n  {\n    "kind": "ClientIntents",\n    "apiVersion": "k8s.otterize.com/v1alpha1",\n    "metadata": {\n      "name": "client",\n      "namespace": "otterize-tutorial-mapper"\n    },\n    "spec": {\n      "service": {\n        "name": "client"\n      },\n      "calls": [\n        {\n          "name": "server"\n        }\n      ]\n    }\n  },\n  {\n    "kind": "ClientIntents",\n    "apiVersion": "k8s.otterize.com/v1alpha1",\n    "metadata": {\n      "name": "client",\n      "namespace": "otterize-tutorial-mapper"\n    },\n    "spec": {\n      "service": {\n        "name": "client"\n      },\n      "calls": [\n        {\n          "name": "server"\n        }\n      ]\n    }\n  }\n]\n')))))),(0,r.kt)("admonition",{type:"info"},(0,r.kt)("p",{parentName:"admonition"},"See the ",(0,r.kt)("a",{parentName:"p",href:"/cli"},"CLI documentation")," for more details about the CLI.")),(0,r.kt)("h3",{id:"change-traffic-then-sniffdiff"},'Change traffic, then "Sniff&Diff"'),(0,r.kt)("p",null,'One of the benefits for using the network mapper is the ability to track changes over time for communication within your\ncluster. We call that "Sniff&Diff": continue to sniff traffic, then diff the network mapper output to see what changed.'),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Let's save the current state of traffic from the cluster into a file we will compare against later:"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"otterize mapper list -n otterize-tutorial-mapper > intents-original.txt\n"))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"And now we can add more traffic to the cluster and see how the network mapper tracks it. You can do that by deploying the extension\nexample which consists of two pods: other-client and other-server, communicating over HTTP. Deploy example:"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"kubectl apply -n otterize-tutorial-mapper -f https://docs.otterize.com/code-examples/network-mapper/all-other.yaml\n")))),(0,r.kt)("details",null,(0,r.kt)("summary",null,"Check that the client and server pods were deployed"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"kubectl get pods -n otterize-tutorial-mapper\n")),(0,r.kt)("p",null,"You should see"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"NAME                      READY   STATUS    RESTARTS   AGE\nclient-756f7677f8-rdm8l         1/1     Running   0          15m\nclient2-5c4479947b-cdkl2        1/1     Running   0          9m18s\nother-client-8666d97d9c-29xpg   1/1     Running   0          4m8s\nother-server-676dbc5f5-bqxs4    1/1     Running   0          4m3s\nserver-6698c58cbc-tht9n         1/1     Running   0          15m\n"))),(0,r.kt)("ol",{start:3},(0,r.kt)("li",{parentName:"ol"},"Export the updated observed intents:",(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"otterize mapper list -n otterize-tutorial-mapper\n")),"You will now see the client and server pods communication in addition\nto the previously observed traffic.",(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"client in namespace otterize-tutorial-mapper calls:\n  - server\nclient2 in namespace otterize-tutorial-mapper calls:\n  - server\n# highlight-start\nother-client in namespace otterize-tutorial-mapper calls:\n  - other-server\n# highlight-end\n"))),(0,r.kt)("li",{parentName:"ol"},"We can also compare both outputs to see the difference. We'll start by saving the updated state to a file with:",(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"otterize mapper list -n otterize-tutorial-mapper > intents-updated.txt\n"))),(0,r.kt)("li",{parentName:"ol"},"And compare the original file with the updated file using:",(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"diff --color=always -y intents-original.txt intents-updated.txt;echo\n")),"You should see a result looking like:",(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"client in namespace otterize-tutorial-mapper calls:             client in namespace otterize-tutorial-mapper calls:\n  - server                                                        - server\nclient2 in namespace otterize-tutorial-mapper calls:            client2 in namespace otterize-tutorial-mapper calls:\n  - server                                                        - server\n# highlight-start\n                                                               > other-client in namespace otterize-tutorial-mapper calls:\n                                                               >   - other-server\n# highlight-end\n")))),(0,r.kt)("h2",{id:"whats-next"},"What's next"),(0,r.kt)("p",null,"One of the outputs of the network mapper is a set of intents that reflect the observed traffic.\nThe mapper doesn't look at the types and contents of the calls, so the intents won't have granular information\nbeyond what service calls what service. But it's a pretty good way to bootstrap intents files and get\ngoing with intent-based access control."),(0,r.kt)("p",null,"Take a look at the ",(0,r.kt)("strong",{parentName:"p"},"intents")," tab in the ",(0,r.kt)("a",{parentName:"p",href:"#show-mapped-traffic"},"Show mapped traffic section"),".\nWith these intents we can automatically control pod-to-pod access using Kubernetes network policies."),(0,r.kt)("p",null,"Where to go next?"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"If you haven't already, see the ",(0,r.kt)("a",{parentName:"li",href:"/quick-tutorials/k8s-network-policies"},"automate network policies tutorial"),"."),(0,r.kt)("li",{parentName:"ul"},"Or go to the next tutorial to ",(0,r.kt)("a",{parentName:"li",href:"/quick-tutorials/kafka-mtls"},"automate secure access for Kafka"),"."),(0,r.kt)("li",{parentName:"ul"},"You might also dive deeper into the ",(0,r.kt)("a",{parentName:"li",href:"../guides/k8s-ibac-via-network-policies"},"IBAC with network policies guide"),".",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"It even contains a bootstrapping exercise at the end."))),(0,r.kt)("li",{parentName:"ul"},"For a deeper dive into the network mapper, see the ",(0,r.kt)("a",{parentName:"li",href:"../guides/k8s-mapping-pod-to-pod-calls"},"Mapping pod-to-pod calls guide"),".")),(0,r.kt)("h3",{id:"teardown"},"Teardown"),(0,r.kt)("p",null,"To remove the deployed resources run:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"kubectl delete namespace otterize-tutorial-mapper\nhelm network-mapper uninstall -n otterize-system\n")))}d.isMDXComponent=!0}}]);