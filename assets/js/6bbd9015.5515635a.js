"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[485],{3905:(e,t,a)=>{a.d(t,{Zo:()=>p,kt:()=>d});var r=a(7294);function n(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function s(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,r)}return a}function l(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?s(Object(a),!0).forEach((function(t){n(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):s(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function i(e,t){if(null==e)return{};var a,r,n=function(e,t){if(null==e)return{};var a,r,n={},s=Object.keys(e);for(r=0;r<s.length;r++)a=s[r],t.indexOf(a)>=0||(n[a]=e[a]);return n}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(r=0;r<s.length;r++)a=s[r],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(n[a]=e[a])}return n}var o=r.createContext({}),c=function(e){var t=r.useContext(o),a=t;return e&&(a="function"==typeof e?e(t):l(l({},t),e)),a},p=function(e){var t=c(e.components);return r.createElement(o.Provider,{value:t},e.children)},k={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var a=e.components,n=e.mdxType,s=e.originalType,o=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),u=c(a),d=n,m=u["".concat(o,".").concat(d)]||u[d]||k[d]||s;return a?r.createElement(m,l(l({ref:t},p),{},{components:a})):r.createElement(m,l({ref:t},p))}));function d(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var s=a.length,l=new Array(s);l[0]=u;var i={};for(var o in t)hasOwnProperty.call(t,o)&&(i[o]=t[o]);i.originalType=e,i.mdxType="string"==typeof e?e:n,l[1]=i;for(var c=2;c<s;c++)l[c]=a[c];return r.createElement.apply(null,l)}return r.createElement.apply(null,a)}u.displayName="MDXCreateElement"},5162:(e,t,a)=>{a.d(t,{Z:()=>l});var r=a(7294),n=a(6010);const s="tabItem_Ymn6";function l(e){let{children:t,hidden:a,className:l}=e;return r.createElement("div",{role:"tabpanel",className:(0,n.Z)(s,l),hidden:a},t)}},5488:(e,t,a)=>{a.d(t,{Z:()=>d});var r=a(7462),n=a(7294),s=a(6010),l=a(2389),i=a(7392),o=a(7094),c=a(2466);const p="tabList__CuJ",k="tabItem_LNqP";function u(e){var t,a;const{lazy:l,block:u,defaultValue:d,values:m,groupId:f,className:b}=e,h=n.Children.map(e.children,(e=>{if((0,n.isValidElement)(e)&&"value"in e.props)return e;throw new Error("Docusaurus error: Bad <Tabs> child <"+("string"==typeof e.type?e.type:e.type.name)+'>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.')})),g=null!=m?m:h.map((e=>{let{props:{value:t,label:a,attributes:r}}=e;return{value:t,label:a,attributes:r}})),N=(0,i.l)(g,((e,t)=>e.value===t.value));if(N.length>0)throw new Error('Docusaurus error: Duplicate values "'+N.map((e=>e.value)).join(", ")+'" found in <Tabs>. Every value needs to be unique.');const v=null===d?d:null!=(t=null!=d?d:null==(a=h.find((e=>e.props.default)))?void 0:a.props.value)?t:h[0].props.value;if(null!==v&&!g.some((e=>e.value===v)))throw new Error('Docusaurus error: The <Tabs> has a defaultValue "'+v+'" but none of its children has the corresponding value. Available values are: '+g.map((e=>e.value)).join(", ")+". If you intend to show no default tab, use defaultValue={null} instead.");const{tabGroupChoices:y,setTabGroupChoices:S}=(0,o.U)(),[w,j]=(0,n.useState)(v),x=[],{blockElementScrollPositionUntilNextRender:E}=(0,c.o5)();if(null!=f){const e=y[f];null!=e&&e!==w&&g.some((t=>t.value===e))&&j(e)}const O=e=>{const t=e.currentTarget,a=x.indexOf(t),r=g[a].value;r!==w&&(E(t),j(r),null!=f&&S(f,String(r)))},I=e=>{var t;let a=null;switch(e.key){case"ArrowRight":{var r;const t=x.indexOf(e.currentTarget)+1;a=null!=(r=x[t])?r:x[0];break}case"ArrowLeft":{var n;const t=x.indexOf(e.currentTarget)-1;a=null!=(n=x[t])?n:x[x.length-1];break}}null==(t=a)||t.focus()};return n.createElement("div",{className:(0,s.Z)("tabs-container",p)},n.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,s.Z)("tabs",{"tabs--block":u},b)},g.map((e=>{let{value:t,label:a,attributes:l}=e;return n.createElement("li",(0,r.Z)({role:"tab",tabIndex:w===t?0:-1,"aria-selected":w===t,key:t,ref:e=>x.push(e),onKeyDown:I,onFocus:O,onClick:O},l,{className:(0,s.Z)("tabs__item",k,null==l?void 0:l.className,{"tabs__item--active":w===t})}),null!=a?a:t)}))),l?(0,n.cloneElement)(h.filter((e=>e.props.value===w))[0],{className:"margin-top--md"}):n.createElement("div",{className:"margin-top--md"},h.map(((e,t)=>(0,n.cloneElement)(e,{key:t,hidden:e.props.value!==w})))))}function d(e){const t=(0,l.Z)();return n.createElement(u,(0,r.Z)({key:String(t)},e))}},3850:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>o,contentTitle:()=>l,default:()=>k,frontMatter:()=>s,metadata:()=>i,toc:()=>c});var r=a(7462),n=(a(7294),a(3905));a(5488),a(5162);const s={sidebar_position:4,title:"Credentials for Kafka"},l=void 0,i={unversionedId:"guides/ibac-for-k8s-kafka/credentials-for-kafka",id:"guides/ibac-for-k8s-kafka/credentials-for-kafka",title:"Credentials for Kafka",description:"The following is a collection of useful short recipes for inspecting artifacts related to the credentials",source:"@site/docs/guides/ibac-for-k8s-kafka/credentials-for-kafka.mdx",sourceDirName:"guides/ibac-for-k8s-kafka",slug:"/guides/ibac-for-k8s-kafka/credentials-for-kafka",permalink:"/guides/ibac-for-k8s-kafka/credentials-for-kafka",draft:!1,editUrl:"https://github.com/otterize/docs/edit/main/docs/guides/ibac-for-k8s-kafka/credentials-for-kafka.mdx",tags:[],version:"current",sidebarPosition:4,frontMatter:{sidebar_position:4,title:"Credentials for Kafka"},sidebar:"docSidebar",previous:{title:"Intent-based access control for Kafka in Kubernetes",permalink:"/guides/ibac-for-k8s-kafka/"},next:{title:"Mapping pod-to-pod calls in Kubernetes",permalink:"/guides/k8s-mapping-pod-to-pod-calls/"}},o={},c=[{value:"Kafka broker credentials",id:"kafka-broker-credentials",level:2},{value:"Inspecting the keystore",id:"inspecting-the-keystore",level:3},{value:"Inspecting the truststore",id:"inspecting-the-truststore",level:3},{value:"Kafka client credentials",id:"kafka-client-credentials",level:2},{value:"Inspecting client - JKS format",id:"inspecting-client---jks-format",level:3},{value:"Inspecting client - PEM format",id:"inspecting-client---pem-format",level:3},{value:"Validating",id:"validating",level:3}],p={toc:c};function k(e){let{components:t,...a}=e;return(0,n.kt)("wrapper",(0,r.Z)({},p,a,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("p",null,"The following is a collection of useful short recipes for inspecting artifacts related to the credentials\nused to authenticate Kafka clients to the Kafka broker via mTLS.\nThe examples here reference the Kafka broker and client deployed in the\n",(0,n.kt)("a",{parentName:"p",href:"/quick-tutorials/k8s-kafka-mtls"},"secure Kafka access tutorial")," and guide ",(0,n.kt)("a",{parentName:"p",href:"/guides/ibac-for-k8s-kafka"},"secure Kafka access guide"),"."),(0,n.kt)("h2",{id:"kafka-broker-credentials"},"Kafka broker credentials"),(0,n.kt)("h3",{id:"inspecting-the-keystore"},"Inspecting the keystore"),(0,n.kt)("ol",null,(0,n.kt)("li",{parentName:"ol"},"Retrieve the keystore with:",(0,n.kt)("pre",{parentName:"li"},(0,n.kt)("code",{parentName:"pre",className:"language-bash"},"kubectl get secret -n kafka kafka-tls-secret -o jsonpath='{.data.kafka\\.keystore\\.jks}' | base64 -d > kafka.keystore.jks\n"))),(0,n.kt)("li",{parentName:"ol"},"Extract the certificate from the store:",(0,n.kt)("pre",{parentName:"li"},(0,n.kt)("code",{parentName:"pre",className:"language-bash"},"keytool -storepass password -keystore kafka.keystore.jks -alias pkey -exportcert -rfc > server.pem\n"))),(0,n.kt)("li",{parentName:"ol"},"Inspect it with:",(0,n.kt)("pre",{parentName:"li"},(0,n.kt)("code",{parentName:"pre",className:"language-bash"},"openssl x509 -in server.pem -text\n")),"You should see:",(0,n.kt)("pre",{parentName:"li"},(0,n.kt)("code",{parentName:"pre"},"Certificate:\nData:\n    Version: 3 (0x2)\n    Serial Number:\n        98:e3:4b:76:8d:de:4c:c6:7d:73:41:6a:33:ee:c3:44\n    Signature Algorithm: sha256WithRSAEncryption\n    Issuer: C = US, O = SPIRE\n    Validity\n        Not Before: Sep 10 14:43:16 2022 GMT\n        Not After : Sep 10 14:43:26 2023 GMT\n    Subject: C = US, O = SPIRE, CN = kafka.kafka\n    ... truncated\n        X509v3 Subject Alternative Name:\n            DNS:kafka.kafka, DNS:kafka-0.kafka-headless.kafka.svc.cluster.local, DNS:kafka.kafka.svc.cluster.local, URI:spiffe://example.org/otterize/namespace/kafka/service/kafka \n... truncated\n")))),(0,n.kt)("h3",{id:"inspecting-the-truststore"},"Inspecting the truststore"),(0,n.kt)("ol",null,(0,n.kt)("li",{parentName:"ol"},"Retrieve the truststore with:",(0,n.kt)("pre",{parentName:"li"},(0,n.kt)("code",{parentName:"pre",className:"language-bash"},"kubectl get secret -n kafka kafka-tls-secret -o jsonpath='{.data.kafka\\.truststore\\.jks}' | base64 -d > kafka.truststore.jks\n"))),(0,n.kt)("li",{parentName:"ol"},"Extract the certificate from the store:",(0,n.kt)("pre",{parentName:"li"},(0,n.kt)("code",{parentName:"pre",className:"language-bash"},"keytool -storepass password -keystore kafka.truststore.jks -alias ca-0 -exportcert -rfc > bundle.pem\n"))),(0,n.kt)("li",{parentName:"ol"},"Inspect it with:",(0,n.kt)("pre",{parentName:"li"},(0,n.kt)("code",{parentName:"pre",className:"language-bash"},"openssl x509 -in bundle.pem -text\n")),"You should see:",(0,n.kt)("pre",{parentName:"li"},(0,n.kt)("code",{parentName:"pre"},"Certificate:\nData:\n    Version: 3 (0x2)\n    Serial Number: 0 (0x0)\n    Signature Algorithm: sha256WithRSAEncryption\n    Issuer: C = US, O = SPIRE\n    Validity\n        Not Before: Sep  6 09:59:21 2022 GMT\n        Not After : Sep  5 09:59:31 2025 GMT\n    Subject: C = US, O = SPIRE\n... truncated\n")))),(0,n.kt)("h2",{id:"kafka-client-credentials"},"Kafka client credentials"),(0,n.kt)("h3",{id:"inspecting-client---jks-format"},"Inspecting client - JKS format"),(0,n.kt)("ol",null,(0,n.kt)("li",{parentName:"ol"},"Retrieve the client credentials with:",(0,n.kt)("pre",{parentName:"li"},(0,n.kt)("code",{parentName:"pre",className:"language-bash"},"kubectl get secret -n ibac-for-kafka interactive-credentials-secret -o jsonpath='{.data.kafka\\.keystore\\.jks}' | base64 -d > interactive-keystore.jks\n"))),(0,n.kt)("li",{parentName:"ol"},"Extract the certificate from the store:",(0,n.kt)("pre",{parentName:"li"},(0,n.kt)("code",{parentName:"pre",className:"language-bash"},"keytool -storepass password -keystore interactive-keystore.jks -alias pkey -exportcert -rfc > svid.pem\n"))),(0,n.kt)("li",{parentName:"ol"},"Inspect the credentials with:",(0,n.kt)("pre",{parentName:"li"},(0,n.kt)("code",{parentName:"pre",className:"language-bash"},"openssl x509 -in svid.pem -text\n")),"You should see:",(0,n.kt)("pre",{parentName:"li"},(0,n.kt)("code",{parentName:"pre"},"Certificate:\n  Data:\n    Version: 3 (0x2)\n    Serial Number:\n      74:34:11:0d:96:be:93:08:02:40:7b:d9:ac:b6:fc:af\n  Signature Algorithm: sha256WithRSAEncryption\n    Issuer: C=US, O=SPIRE\n    Validity\n      Not Before: Oct 12 08:16:42 2022 GMT\n      Not After : Oct 13 08:16:52 2022 GMT\n    Subject: C=US, O=SPIRE, CN=interactive.ibac-for-kafka\n    ...\n    X509v3 extensions:\n      ...\n      X509v3 Subject Alternative Name:\n        DNS:interactive.ibac-for-kafka, URI:spiffe://example.org/otterize/namespace/ibac-for-kafka/service/interactive\n  ...\n")))),(0,n.kt)("h3",{id:"inspecting-client---pem-format"},"Inspecting client - PEM format"),(0,n.kt)("ol",null,(0,n.kt)("li",{parentName:"ol"},(0,n.kt)("p",{parentName:"li"},"Retrieve the client credentials with:"),(0,n.kt)("pre",{parentName:"li"},(0,n.kt)("code",{parentName:"pre",className:"language-bash"},"kubectl get secret -n otterize-tutorial-kafka-mtls client-credentials-secret -o jsonpath='{.data.svid\\.pem}' | base64 -d > svid.pem\n"))),(0,n.kt)("li",{parentName:"ol"},(0,n.kt)("p",{parentName:"li"},"Inspect the credentials with:"),(0,n.kt)("pre",{parentName:"li"},(0,n.kt)("code",{parentName:"pre",className:"language-bash"},"openssl x509 -in svid.pem -text\n")),(0,n.kt)("p",{parentName:"li"},"You should see:"),(0,n.kt)("pre",{parentName:"li"},(0,n.kt)("code",{parentName:"pre",className:"language-bash"},"Certificate:\nData:\n    Version: 3 (0x2)\n    Serial Number:\n        e3:81:42:74:5e:c4:d8:d9:cd:97:16:72:23:2e:90:62\n    Signature Algorithm: sha256WithRSAEncryption\n    Issuer: C = US, O = SPIRE\n    Validity\n        Not Before: Sep  9 21:06:52 2022 GMT\n        Not After : Sep 10 21:07:02 2022 GMT\n    Subject: C = US, O = SPIRE, CN = client.otterize-tutorial-kafka-mtls\n    ... truncated\n        X509v3 Subject Alternative Name:\n            DNS:client.otterize-tutorial-kafka-mtls, URI:spiffe://example.org/otterize/namespace/otterize-tutorial-kafka-mtls/service/client\n... truncated\n")))),(0,n.kt)("h3",{id:"validating"},"Validating"),(0,n.kt)("ol",null,(0,n.kt)("li",{parentName:"ol"},"Retrieve the client credentials with:",(0,n.kt)("pre",{parentName:"li"},(0,n.kt)("code",{parentName:"pre",className:"language-bash"},"kubectl get secret -n otterize-tutorial-kafka-mtls client-credentials-secret -o jsonpath='{.data.svid\\.pem}' | base64 -d > svid.pem\nkubectl get secret -n otterize-tutorial-kafka-mtls client-credentials-secret -o jsonpath='{.data.key\\.pem}' | base64 -d > key.pem\nkubectl get secret -n otterize-tutorial-kafka-mtls client-credentials-secret -o jsonpath='{.data.bundle\\.pem}' | base64 -d > bundle.pem\n"))),(0,n.kt)("li",{parentName:"ol"},"Validate that the key belongs to the certificate by comparing their public keys with the following commands:",(0,n.kt)("pre",{parentName:"li"},(0,n.kt)("code",{parentName:"pre",className:"language-bash"},"openssl pkey -pubout -in key.pem  | openssl md5\n")),(0,n.kt)("pre",{parentName:"li"},(0,n.kt)("code",{parentName:"pre",className:"language-bash"},"openssl x509 -noout -pubkey -in svid.pem | openssl md5\n")),"If their public keys match, you should see the same results for both commands, in the following format:",(0,n.kt)("pre",{parentName:"li"},(0,n.kt)("code",{parentName:"pre",className:"language-bash"},"(stdin)= e01e28be4e3e11a70cdebe327e1aabc9\n"))),(0,n.kt)("li",{parentName:"ol"},"Verify that the certificates belong to the bundle:",(0,n.kt)("pre",{parentName:"li"},(0,n.kt)("code",{parentName:"pre",className:"language-bash"},"openssl verify -CAfile bundle.pem svid.pem\n")),"You should see:",(0,n.kt)("pre",{parentName:"li"},(0,n.kt)("code",{parentName:"pre",className:"language-bash"},"svid.pem: OK\n")))))}k.isMDXComponent=!0}}]);