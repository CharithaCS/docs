"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[951],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>m});var a=n(7294);function l(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){l(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,l=function(e,t){if(null==e)return{};var n,a,l={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(l[n]=e[n]);return l}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(l[n]=e[n])}return l}var s=a.createContext({}),c=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=c(e.components);return a.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,l=e.mdxType,r=e.originalType,s=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),d=c(n),m=l,g=d["".concat(s,".").concat(m)]||d[m]||u[m]||r;return n?a.createElement(g,o(o({ref:t},p),{},{components:n})):a.createElement(g,o({ref:t},p))}));function m(e,t){var n=arguments,l=t&&t.mdxType;if("string"==typeof e||l){var r=n.length,o=new Array(r);o[0]=d;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i.mdxType="string"==typeof e?e:l,o[1]=i;for(var c=2;c<r;c++)o[c]=n[c];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},5162:(e,t,n)=>{n.d(t,{Z:()=>o});var a=n(7294),l=n(6010);const r="tabItem_Ymn6";function o(e){let{children:t,hidden:n,className:o}=e;return a.createElement("div",{role:"tabpanel",className:(0,l.Z)(r,o),hidden:n},t)}},5488:(e,t,n)=>{n.d(t,{Z:()=>m});var a=n(7462),l=n(7294),r=n(6010),o=n(2389),i=n(7392),s=n(7094),c=n(2466);const p="tabList__CuJ",u="tabItem_LNqP";function d(e){var t,n;const{lazy:o,block:d,defaultValue:m,values:g,groupId:h,className:k}=e,v=l.Children.map(e.children,(e=>{if((0,l.isValidElement)(e)&&"value"in e.props)return e;throw new Error("Docusaurus error: Bad <Tabs> child <"+("string"==typeof e.type?e.type:e.type.name)+'>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.')})),y=null!=g?g:v.map((e=>{let{props:{value:t,label:n,attributes:a}}=e;return{value:t,label:n,attributes:a}})),f=(0,i.l)(y,((e,t)=>e.value===t.value));if(f.length>0)throw new Error('Docusaurus error: Duplicate values "'+f.map((e=>e.value)).join(", ")+'" found in <Tabs>. Every value needs to be unique.');const b=null===m?m:null!=(t=null!=m?m:null==(n=v.find((e=>e.props.default)))?void 0:n.props.value)?t:v[0].props.value;if(null!==b&&!y.some((e=>e.value===b)))throw new Error('Docusaurus error: The <Tabs> has a defaultValue "'+b+'" but none of its children has the corresponding value. Available values are: '+y.map((e=>e.value)).join(", ")+". If you intend to show no default tab, use defaultValue={null} instead.");const{tabGroupChoices:T,setTabGroupChoices:w}=(0,s.U)(),[N,O]=(0,l.useState)(b),S=[],{blockElementScrollPositionUntilNextRender:x}=(0,c.o5)();if(null!=h){const e=T[h];null!=e&&e!==N&&y.some((t=>t.value===e))&&O(e)}const z=e=>{const t=e.currentTarget,n=S.indexOf(t),a=y[n].value;a!==N&&(x(t),O(a),null!=h&&w(h,String(a)))},E=e=>{var t;let n=null;switch(e.key){case"ArrowRight":{var a;const t=S.indexOf(e.currentTarget)+1;n=null!=(a=S[t])?a:S[0];break}case"ArrowLeft":{var l;const t=S.indexOf(e.currentTarget)-1;n=null!=(l=S[t])?l:S[S.length-1];break}}null==(t=n)||t.focus()};return l.createElement("div",{className:(0,r.Z)("tabs-container",p)},l.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,r.Z)("tabs",{"tabs--block":d},k)},y.map((e=>{let{value:t,label:n,attributes:o}=e;return l.createElement("li",(0,a.Z)({role:"tab",tabIndex:N===t?0:-1,"aria-selected":N===t,key:t,ref:e=>S.push(e),onKeyDown:E,onFocus:z,onClick:z},o,{className:(0,r.Z)("tabs__item",u,null==o?void 0:o.className,{"tabs__item--active":N===t})}),null!=n?n:t)}))),o?(0,l.cloneElement)(v.filter((e=>e.props.value===N))[0],{className:"margin-top--md"}):l.createElement("div",{className:"margin-top--md"},v.map(((e,t)=>(0,l.cloneElement)(e,{key:t,hidden:e.props.value!==N})))))}function m(e){const t=(0,o.Z)();return l.createElement(d,(0,a.Z)({key:String(t)},e))}},7553:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>s,default:()=>m,frontMatter:()=>i,metadata:()=>c,toc:()=>u});var a=n(7462),l=(n(7294),n(3905)),r=n(5488),o=n(5162);const i={sidebar_position:5},s="Tutorial for Kafka + mTLS",c={unversionedId:"documentation/getting-started/kafka-mtls",id:"documentation/getting-started/kafka-mtls",title:"Tutorial for Kafka + mTLS",description:"This tutorial will walk you through deploying mTLS certificates on a sample client and a kafka deployment.",source:"@site/docs/documentation/2-getting-started/5-kafka-mtls.md",sourceDirName:"documentation/2-getting-started",slug:"/documentation/getting-started/kafka-mtls",permalink:"/documentation/getting-started/kafka-mtls",draft:!1,editUrl:"https://github.com/otterize/docs/edit/main/docs/documentation/2-getting-started/5-kafka-mtls.md",tags:[],version:"current",sidebarPosition:5,frontMatter:{sidebar_position:5},sidebar:"docSidebar",previous:{title:"Tutorial for mTLS",permalink:"/documentation/getting-started/mtls"},next:{title:"index",permalink:"/documentation/sdk-integration/"}},p={},u=[{value:"Install Otterize (enable mTLS)",id:"install-otterize-enable-mtls",level:2},{value:"Concepts",id:"concepts",level:2},{value:"Sample deployment",id:"sample-deployment",level:3},{value:"Otterize pod identity resolution",id:"otterize-pod-identity-resolution",level:3},{value:"Configure deployments",id:"configure-deployments",level:3},{value:"Demo",id:"demo",level:2},{value:"Deploy sample project",id:"deploy-sample-project",level:3},{value:"Test client and server",id:"test-client-and-server",level:3},{value:"Teardown",id:"teardown",level:3},{value:"What&#39;s next",id:"whats-next",level:2},{value:"Optional",id:"optional",level:2},{value:"Inspect the certificate",id:"inspect-the-certificate",level:3}],d={toc:u};function m(e){let{components:t,...n}=e;return(0,l.kt)("wrapper",(0,a.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("h1",{id:"tutorial-for-kafka--mtls"},"Tutorial for Kafka + mTLS"),(0,l.kt)("p",null,"This tutorial will walk you through deploying mTLS certificates on a sample client and a kafka deployment.\nWe will install Otterize, look at a sample deployment and learn how Otterize resolves pod identities.\nNext, we will generate credentials and mount them to the client pod and to the kafka server\nand wrap it all up by deploying a sample project to practice all concepts in this tutorial."),(0,l.kt)("h2",{id:"install-otterize-enable-mtls"},"Install Otterize (enable mTLS)"),(0,l.kt)("p",null,"Module"),(0,l.kt)("h2",{id:"concepts"},"Concepts"),(0,l.kt)("h3",{id:"sample-deployment"},"Sample deployment"),(0,l.kt)("p",null,"We will use the following deployment as a base for the demo"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-yaml"},"apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: client\n  namespace: tutorial\nspec:\n  ...\n  template:\n    ...\n    spec:\n      containers:\n          - name: client\n            image: python\n")),(0,l.kt)("h3",{id:"otterize-pod-identity-resolution"},"Otterize pod identity resolution"),(0,l.kt)("p",null,"Otterize resolves pod identities automatically by using their ",(0,l.kt)("inlineCode",{parentName:"p"},"resource owner")," (e.g. deployment) ",(0,l.kt)("strong",{parentName:"p"},"name")," and ",(0,l.kt)("strong",{parentName:"p"},"\nnamespace"),"."),(0,l.kt)("p",null,"In this example the pod identity will be resolved to ",(0,l.kt)("inlineCode",{parentName:"p"},"client.tutorial"),"."),(0,l.kt)("admonition",{type:"note"},(0,l.kt)("p",{parentName:"admonition"},"To read more about how Otterize resolves pod identities and how to manually control the process pleas read XXX.")),(0,l.kt)("h3",{id:"configure-deployments"},"Configure deployments"),(0,l.kt)("p",null,"To generate credentials for a pod we simply need to update the deployment by annotating it to generate and mount the\ncredentials."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-yaml"},"spec:\n  template:\n    metadata:\n      ...\n      annotations:\n        # highlight-next-line\n        otterize/credentials-secret-name: client-credentials-secret\n    spec:\n      containers:\n        - name: client\n          ...\n          volumeMounts:\n            # highlight-start\n            - name: otterize-credentials\n              mountPath: /var/otterize/credentials\n              readOnly: true\n            # highlight-end\n      volumes:\n        # highlight-start\n        - name: otterize-credentials\n          secret:\n            secretName: client-credentials-secret\n        # highlight-end\n")),(0,l.kt)("details",null,(0,l.kt)("summary",null,"Complete YAML"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-yaml",metastring:'title="code-examples/getting-started/deploy-mtls/client.yaml"',title:'"code-examples/getting-started/deploy-mtls/client.yaml"'},"apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: client\n  namespace: tutorial\nspec:\n  selector:\n    matchLabels:\n      app: client\n  template:\n    metadata:\n      labels:\n        app: client\n      annotations:\n        otterize/credentials-secret-name: client-credentials-secret\n    spec:\n      containers:\n        - name: client\n          image: python\n          volumeMounts:\n            - name: otterize-credentials\n              mountPath: /var/otterize/credentials\n              readOnly: true\n      volumes:\n        - name: otterize-credentials\n          secret:\n            secretName: client-credentials-secret\n"))),(0,l.kt)("admonition",{type:"tip"},(0,l.kt)("p",{parentName:"admonition"},"You can automate this by templating the process using helm, XXX, YYY. See XXXX.")),(0,l.kt)("admonition",{type:"info"},(0,l.kt)("p",{parentName:"admonition"},"Visit the ",(0,l.kt)("a",{parentName:"p",href:"/documentation/credential-operator/behavior"},"Behavior")," section to view all parameters available as pod\nannotation for generating mTLS credentials.")),(0,l.kt)("h2",{id:"demo"},"Demo"),(0,l.kt)("h3",{id:"deploy-sample-project"},"Deploy sample project"),(0,l.kt)("p",null,"Our sample project consists of a client and server pods pair communicating with HTTP over mTLS."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"kubectl create namespace otterize-tutorial-mtls && \\\nkubectl apply -n otterize-tutorial-mtls -f code-examples/getting-started/tutorials/deploy-mtls\n")),(0,l.kt)("details",null,(0,l.kt)("summary",null,"Output"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-shell"},"namespace/otterize-tutorial-mtls created\nconfigmap/client-py created\ndeployment.apps/client created\nservice/server created\nconfigmap/server-go created\ndeployment.apps/server created\n"))),(0,l.kt)("h3",{id:"test-client-and-server"},"Test client and server"),(0,l.kt)("p",null,"The sample provides an HTTP GO server and Python client to showcase how the mTLS certificates can be used.\nYou can run them as follows."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash",metastring:'title="go run server.go" footer="g"',title:'"go',run:!0,'server.go"':!0,footer:'"g"'},"kubectl exec -n otterize-tutorial-mtls -it deploy/server -- go run /app/server.go\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-shell",metastring:'title="Output"',title:'"Output"'},"Waiting for mTLS connections\nGET /hello mTLS\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash",metastring:'title="python client.py"',title:'"python','client.py"':!0},"kubectl exec -n otterize-tutorial-mtls -it deploy/client -- python /app/client.py\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-shell",metastring:'title="Output"',title:'"Output"'},"Hello, world over mTLS!\n")),(0,l.kt)("h3",{id:"teardown"},"Teardown"),(0,l.kt)("p",null,"To remove the deployed resources run"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"kubectl delete namespace otterize-tutorial-mtls\n")),(0,l.kt)("details",null,(0,l.kt)("summary",null,"Output"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-shell"},'namespace "otterize-tutorial-mtls" deleted\n'))),(0,l.kt)("h2",{id:"whats-next"},"What's next"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Read about how to integrate mTLS into common SDKs and frameworks"),(0,l.kt)("li",{parentName:"ul"},"Enforce secure Kafka access")),(0,l.kt)("h2",{id:"optional"},"Optional"),(0,l.kt)("details",null,(0,l.kt)("p",null,"Following are examples for how you can test the generated credentials"),(0,l.kt)("h3",{id:"inspect-the-certificate"},"Inspect the certificate"),(0,l.kt)("p",null,"We can use openssl to inspect the generated certificates. The certificates are stored as K8s secrets and are also\nmounted inside pods."),(0,l.kt)("p",null,"We will first retrieve them"),(0,l.kt)(r.Z,{mdxType:"Tabs"},(0,l.kt)(o.Z,{value:"secret-direct",label:"K8s secret",default:!0,mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-shell"},"kubectl get secret -n otterize-tutorial-mtls client-credentials-secret -o jsonpath='{.data.svid\\.pem}' | base64 -d > svid.pem\n"))),(0,l.kt)(o.Z,{value:"secret-pod",label:"K8s pod mount",default:!0,mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-shell"},"kubectl exec -n otterize-tutorial-mtls -it deploy/client -- cat /var/otterize/credentials/svid.pem > svid.pem\n")))),(0,l.kt)("p",null,"And now we can inspect them"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-shell"},"openssl x509 -in svid.pem -text | head -n 15\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-x509",metastring:'title="Output"',title:'"Output"'},"Certificate:\n    Data:\n        Version: 3 (0x2)\n        Serial Number:\n            0b:eb:eb:4d:0e:02:7e:28:93:30:1c:55:26:22:8b:c7\n        Signature Algorithm: sha256WithRSAEncryption\n        Issuer: C = US, O = SPIRE\n        Validity\n            Not Before: Aug 24 12:19:57 2022 GMT\n            Not After : Sep 23 12:20:07 2022 GMT\n        Subject: C = US, O = SPIRE, CN = client.otterize-tutorial-mtls\n        Subject Public Key Info:\n            Public Key Algorithm: id-ecPublicKey\n                Public-Key: (256 bit)\n                pub:\n"))))}m.isMDXComponent=!0}}]);