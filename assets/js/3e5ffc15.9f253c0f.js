"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[279],{3901:(e,t,n)=>{n.d(t,{Z:()=>i});var a=n(7294),l=n(3743);const r="tableOfContentsInline_prmo";function i(e){let{toc:t,minHeadingLevel:n,maxHeadingLevel:i}=e;return a.createElement("div",{className:r},a.createElement(l.Z,{toc:t,minHeadingLevel:n,maxHeadingLevel:i,className:"table-of-contents",linkClassName:null}))}},5162:(e,t,n)=>{n.d(t,{Z:()=>i});var a=n(7294),l=n(6010);const r="tabItem_Ymn6";function i(e){let{children:t,hidden:n,className:i}=e;return a.createElement("div",{role:"tabpanel",className:(0,l.Z)(r,i),hidden:n},t)}},5488:(e,t,n)=>{n.d(t,{Z:()=>p});var a=n(7462),l=n(7294),r=n(6010),i=n(2389),s=n(7392),o=n(7094),c=n(2466);const u="tabList__CuJ",d="tabItem_LNqP";function m(e){var t,n;const{lazy:i,block:m,defaultValue:p,values:k,groupId:h,className:f}=e,g=l.Children.map(e.children,(e=>{if((0,l.isValidElement)(e)&&"value"in e.props)return e;throw new Error("Docusaurus error: Bad <Tabs> child <"+("string"==typeof e.type?e.type:e.type.name)+'>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.')})),b=null!=k?k:g.map((e=>{let{props:{value:t,label:n,attributes:a}}=e;return{value:t,label:n,attributes:a}})),v=(0,s.l)(b,((e,t)=>e.value===t.value));if(v.length>0)throw new Error('Docusaurus error: Duplicate values "'+v.map((e=>e.value)).join(", ")+'" found in <Tabs>. Every value needs to be unique.');const N=null===p?p:null!=(t=null!=p?p:null==(n=g.find((e=>e.props.default)))?void 0:n.props.value)?t:g[0].props.value;if(null!==N&&!b.some((e=>e.value===N)))throw new Error('Docusaurus error: The <Tabs> has a defaultValue "'+N+'" but none of its children has the corresponding value. Available values are: '+b.map((e=>e.value)).join(", ")+". If you intend to show no default tab, use defaultValue={null} instead.");const{tabGroupChoices:w,setTabGroupChoices:T}=(0,o.U)(),[x,y]=(0,l.useState)(N),I=[],{blockElementScrollPositionUntilNextRender:E}=(0,c.o5)();if(null!=h){const e=w[h];null!=e&&e!==x&&b.some((t=>t.value===e))&&y(e)}const Z=e=>{const t=e.currentTarget,n=I.indexOf(t),a=b[n].value;a!==x&&(E(t),y(a),null!=h&&T(h,String(a)))},z=e=>{var t;let n=null;switch(e.key){case"ArrowRight":{var a;const t=I.indexOf(e.currentTarget)+1;n=null!=(a=I[t])?a:I[0];break}case"ArrowLeft":{var l;const t=I.indexOf(e.currentTarget)-1;n=null!=(l=I[t])?l:I[I.length-1];break}}null==(t=n)||t.focus()};return l.createElement("div",{className:(0,r.Z)("tabs-container",u)},l.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,r.Z)("tabs",{"tabs--block":m},f)},b.map((e=>{let{value:t,label:n,attributes:i}=e;return l.createElement("li",(0,a.Z)({role:"tab",tabIndex:x===t?0:-1,"aria-selected":x===t,key:t,ref:e=>I.push(e),onKeyDown:z,onFocus:Z,onClick:Z},i,{className:(0,r.Z)("tabs__item",d,null==i?void 0:i.className,{"tabs__item--active":x===t})}),null!=n?n:t)}))),i?(0,l.cloneElement)(g.filter((e=>e.props.value===x))[0],{className:"margin-top--md"}):l.createElement("div",{className:"margin-top--md"},g.map(((e,t)=>(0,l.cloneElement)(e,{key:t,hidden:e.props.value!==x})))))}function p(e){const t=(0,i.Z)();return l.createElement(m,(0,a.Z)({key:String(t)},e))}},4782:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>h,contentTitle:()=>p,default:()=>b,frontMatter:()=>m,metadata:()=>k,toc:()=>f});var a=n(7462),l=n(7294),r=n(3905),i=n(3901),s=n(5488),o=n(5162),c=n(814);function u(){return l.createElement(l.Fragment,null,l.createElement("p",null,"otterize observer enable:"),l.createElement(c.Z,{language:"shell"},"otterize observer enable"))}function d(){return l.createElement(l.Fragment,null,l.createElement(c.Z,{language:"shell"},"helm repo add\nhelm install"))}const m={sidebar_position:2},p="Kicking the tires",k={unversionedId:"documentation/getting-started/kicking-the-tires",id:"documentation/getting-started/kicking-the-tires",title:"Kicking the tires",description:"Get started with Otterize.",source:"@site/docs/documentation/getting-started/kicking-the-tires.md",sourceDirName:"documentation/getting-started",slug:"/documentation/getting-started/kicking-the-tires",permalink:"/documentation/getting-started/kicking-the-tires",draft:!1,editUrl:"https://github.com/otterize/docs/edit/main/docs/documentation/getting-started/kicking-the-tires.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"docSidebar",previous:{title:"Quickstart",permalink:"/documentation/getting-started/quickstart"},next:{title:"Getting started with Network Policies",permalink:"/documentation/getting-started/network-policies"}},h={},f=[{value:"Enable the Intents Observer",id:"enable-the-intents-observer",level:2},{value:"Show traffic as intents",id:"show-traffic-as-intents",level:2},{value:"Change traffic -&gt; Sniff&amp;Diff",id:"change-traffic---sniffdiff",level:2},{value:"What&#39;s next",id:"whats-next",level:2}],g={toc:f};function b(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},g,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"kicking-the-tires"},"Kicking the tires"),(0,r.kt)("p",null,"Get started with Otterize."),(0,r.kt)(i.Z,{toc:f,mdxType:"TOCInline"}),(0,r.kt)("h2",{id:"enable-the-intents-observer"},"Enable the Intents Observer"),(0,r.kt)(s.Z,{mdxType:"Tabs"},(0,r.kt)(o.Z,{value:"cli",label:"Otterize CLI",default:!0,mdxType:"TabItem"},(0,r.kt)(u,{mdxType:"CLI"})),(0,r.kt)(o.Z,{value:"helm",label:"Helm",mdxType:"TabItem"},(0,r.kt)(d,{mdxType:"Helm"}))),(0,r.kt)("h2",{id:"show-traffic-as-intents"},"Show traffic as intents"),(0,r.kt)(s.Z,{mdxType:"Tabs"},(0,r.kt)(o.Z,{value:"plain",label:"Plain",default:!0,mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"otterize observer export\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"kafka calls:\n  - zookeeper\n\nclient calls:\n  - kafka\n"))),(0,r.kt)(o.Z,{value:"intents",label:"Intents",default:!0,mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"otterize observer export -o intents\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},"apiVersion: k8s.otterize.com/v1\nkind: ClientIntents\nmetadata:\n  name: kafka\nspec:\n  service:\n    name: kafka\n    calls:\n      - name: zookeeper\n---\napiVersion: k8s.otterize.com/v1\nkind: ClientIntents\nmetadata:\n  name: client\nspec:\n  service:\n    name: client\n    calls:\n      - name: kafka\n"))),(0,r.kt)(o.Z,{value:"json",label:"JSON",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"otterize observer export -o yaml\n")))),(0,r.kt)("h2",{id:"change-traffic---sniffdiff"},"Change traffic -> Sniff&Diff"),(0,r.kt)("p",null,"Let's add traffic to the cluster and see how the Intents Observer tracks it.\nConnect to the client pod."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"kubectl exec --tty -i client --namespace lab -- bash\n")),(0,r.kt)("p",null,"Initiate a connection to the zookeeper pod."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"nc zookeeper 2181\n")),(0,r.kt)("p",null,"And now export the updated observed intents."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"otterize observer export\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"kafka calls:\n  - zookeeper\n\nclient calls:\n  - kafka\n  - zookeeper\n")),(0,r.kt)("h2",{id:"whats-next"},"What's next"),(0,r.kt)("p",null,"Now that we observed cluster intents we can use them with the Intents Operator."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Configure ",(0,r.kt)("a",{parentName:"li",href:"/documentation/getting-started/network-policies"},"Network Policies")),(0,r.kt)("li",{parentName:"ul"},"Configure secure access for Kafka")))}b.isMDXComponent=!0}}]);