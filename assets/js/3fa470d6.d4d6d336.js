"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[972],{3905:(e,t,n)=>{n.d(t,{Zo:()=>l,kt:()=>u});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var p=r.createContext({}),c=function(e){var t=r.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},l=function(e){var t=c(e.components);return r.createElement(p.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,p=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),d=c(n),u=o,h=d["".concat(p,".").concat(u)]||d[u]||m[u]||a;return n?r.createElement(h,i(i({ref:t},l),{},{components:n})):r.createElement(h,i({ref:t},l))}));function u(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,i=new Array(a);i[0]=d;var s={};for(var p in t)hasOwnProperty.call(t,p)&&(s[p]=t[p]);s.originalType=e,s.mdxType="string"==typeof e?e:o,i[1]=s;for(var c=2;c<a;c++)i[c]=n[c];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},6086:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>i,default:()=>m,frontMatter:()=>a,metadata:()=>s,toc:()=>c});var r=n(7462),o=(n(7294),n(3905));const a={sidebar_position:4,title:"Network mapper"},i=void 0,s={unversionedId:"components/network-mapper/README",id:"components/network-mapper/README",title:"Network mapper",description:"The Otterize network mapper creates a map of in-cluster traffic by (1) capturing DNS traffic and (2) inspecting active connections in the same manner netstat does, then resolving the IP addresses participating in connections to the Pods, and crawling up the ownership of the Pod until it reaches the root object. See Service identities to learn more on how service name resolving happens.",source:"@site/docs/components/network-mapper/README.mdx",sourceDirName:"components/network-mapper",slug:"/components/network-mapper/",permalink:"/components/network-mapper/",draft:!1,editUrl:"https://github.com/otterize/docs/edit/main/docs/components/network-mapper/README.mdx",tags:[],version:"current",sidebarPosition:4,frontMatter:{sidebar_position:4,title:"Network mapper"},sidebar:"docSidebar",previous:{title:"Helm chart",permalink:"/components/spire-integration-operator/helm-chart"},next:{title:"Helm chart",permalink:"/components/network-mapper/helm-chart"}},p={},c=[{value:"How does the Network Mapper work?",id:"how-does-the-network-mapper-work",level:2},{value:"Components",id:"components",level:3},{value:"DNS responses",id:"dns-responses",level:3},{value:"Active TCP connections",id:"active-tcp-connections",level:3},{value:"Deploying the network mapper",id:"deploying-the-network-mapper",level:2},{value:"Pod annotations",id:"pod-annotations",level:2}],l={toc:c};function m(e){let{components:t,...n}=e;return(0,o.kt)("wrapper",(0,r.Z)({},l,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"The Otterize network mapper creates a map of in-cluster traffic by (1) capturing DNS traffic and (2) inspecting active connections in the same manner ",(0,o.kt)("inlineCode",{parentName:"p"},"netstat")," does, then resolving the IP addresses participating in connections to the Pods, and crawling up the ownership of the Pod until it reaches the root object. See ",(0,o.kt)("a",{parentName:"p",href:"/service-identities"},"Service identities")," to learn more on how service name resolving happens."),(0,o.kt)("p",null,"You can then use the Otterize CLI to list the map by client, or export the map as JSON or as ClientIntents Kubernetes resources (YAML).\nClientIntents can be consumed by the ",(0,o.kt)("a",{parentName:"p",href:"/components/intents-operator"},"Otterize intents operator")," to apply network policies\nor Kafka ACLs to your cluster, implementing ",(0,o.kt)("a",{parentName:"p",href:"/intent-based-access-control"},"intent-based access control"),"."),(0,o.kt)("p",null,"To get started, follow the ",(0,o.kt)("a",{parentName:"p",href:"/quick-tutorials/k8s-network-mapper"},"quick tutorial"),"\nor the ",(0,o.kt)("a",{parentName:"p",href:"/guides/k8s-mapping-pod-to-pod-calls"},"more in-depth guide"),". Here's an example output from the guide:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-shell"},"cartservice in namespace otterize-ecom-demo calls:\n - redis-cart\ncheckoutservice in namespace otterize-ecom-demo calls:\n - cartservice\n - currencyservice\n - emailservice\n - paymentservice\n - productcatalogservice\n - shippingservice\nfrontend in namespace otterize-ecom-demo calls:\n - adservice\n - cartservice\n - checkoutservice\n - currencyservice\n - productcatalogservice\n - recommendationservice\n - shippingservice\nloadgenerator in namespace otterize-ecom-demo calls:\n - frontend\nrecommendationservice in namespace otterize-ecom-demo calls:\n - productcatalogservice\n")),(0,o.kt)("h2",{id:"how-does-the-network-mapper-work"},"How does the Network Mapper work?"),(0,o.kt)("h3",{id:"components"},"Components"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Sniffer - the sniffer is deployed to each node using a DaemonSet, and is responsible for capturing node-local DNS traffic and inspecting open connections."),(0,o.kt)("li",{parentName:"ul"},"Mapper - the mapper is deployed once, and resolves service names using the Kubernetes API with traffic information reported by the sniffers.")),(0,o.kt)("h3",{id:"dns-responses"},"DNS responses"),(0,o.kt)("p",null,"DNS is a common network protocol used for service discovery. When a pod (",(0,o.kt)("inlineCode",{parentName:"p"},"checkoutservice"),") tries to connect to a Kubernetes service\n(",(0,o.kt)("inlineCode",{parentName:"p"},"orderservice"),") or another pod, a DNS query is sent out. The network mapper watches DNS responses and extracts the IP addresses, which are used for the ",(0,o.kt)("a",{parentName:"p",href:"/service-identities"},"service identity resolving process"),"."),(0,o.kt)("h3",{id:"active-tcp-connections"},"Active TCP connections"),(0,o.kt)("p",null,"DNS responses will only appear when new connections are opened. To handle long-lived connections, the network mapper also queries open TCP connections in a manner similar to ",(0,o.kt)("inlineCode",{parentName:"p"},"netstat")," or ",(0,o.kt)("inlineCode",{parentName:"p"},"ss"),". The IP addresses are used for the ",(0,o.kt)("a",{parentName:"p",href:"/service-identities"},"service identity resolving process"),", as above."),(0,o.kt)("h2",{id:"deploying-the-network-mapper"},"Deploying the network mapper"),(0,o.kt)("p",null,"To deploy the network mapper, ",(0,o.kt)("a",{parentName:"p",href:"helm-chart"},"use the Helm chart"),"."),(0,o.kt)("h2",{id:"pod-annotations"},"Pod annotations"),(0,o.kt)("p",null,"You can override the service name the network mapper uses when it computes the service name using a pod annotation."),(0,o.kt)("table",null,(0,o.kt)("thead",{parentName:"table"},(0,o.kt)("tr",{parentName:"thead"},(0,o.kt)("th",{parentName:"tr",align:null},"Annotation"),(0,o.kt)("th",{parentName:"tr",align:null},"Description"),(0,o.kt)("th",{parentName:"tr",align:null},"Default"))),(0,o.kt)("tbody",{parentName:"table"},(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"intents.otterize.com/service-name")),(0,o.kt)("td",{parentName:"tr",align:null},"Otterize-wide override for this service's name."),(0,o.kt)("td",{parentName:"tr",align:null},"See ",(0,o.kt)("a",{parentName:"td",href:"/service-identities"},"Service identities"))))))}m.isMDXComponent=!0}}]);