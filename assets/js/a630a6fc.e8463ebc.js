"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[7747],{3905:(e,t,a)=>{a.d(t,{Zo:()=>m,kt:()=>k});var n=a(7294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function l(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function o(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?l(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):l(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function i(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},l=Object.keys(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var d=n.createContext({}),p=function(e){var t=n.useContext(d),a=t;return e&&(a="function"==typeof e?e(t):o(o({},t),e)),a},m=function(e){var t=p(e.components);return n.createElement(d.Provider,{value:t},e.children)},s={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},c=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,l=e.originalType,d=e.parentName,m=i(e,["components","mdxType","originalType","parentName"]),c=p(a),k=r,N=c["".concat(d,".").concat(k)]||c[k]||s[k]||l;return a?n.createElement(N,o(o({ref:t},m),{},{components:a})):n.createElement(N,o({ref:t},m))}));function k(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var l=a.length,o=new Array(l);o[0]=c;var i={};for(var d in t)hasOwnProperty.call(t,d)&&(i[d]=t[d]);i.originalType=e,i.mdxType="string"==typeof e?e:r,o[1]=i;for(var p=2;p<l;p++)o[p]=a[p];return n.createElement.apply(null,o)}return n.createElement.apply(null,a)}c.displayName="MDXCreateElement"},6212:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>d,contentTitle:()=>o,default:()=>s,frontMatter:()=>l,metadata:()=>i,toc:()=>p});var n=a(7462),r=(a(7294),a(3905));const l={sidebar_position:1,title:"Helm chart"},o=void 0,i={unversionedId:"reference/configuration/intents-operator/helm-chart",id:"reference/configuration/intents-operator/helm-chart",title:"Helm chart",description:"You can use the intents operator's Helm chart to deploy the intents operator on its own, and configure it to work with the Otterize credentials operator to acquire mTLS credentials.",source:"@site/docs/reference/configuration/intents-operator/helm-chart.mdx",sourceDirName:"reference/configuration/intents-operator",slug:"/reference/configuration/intents-operator/helm-chart",permalink:"/reference/configuration/intents-operator/helm-chart",draft:!1,editUrl:"https://github.com/otterize/docs/edit/main/docs/reference/configuration/intents-operator/helm-chart.mdx",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1,title:"Helm chart"},sidebar:"docSidebar",previous:{title:"Intents operator",permalink:"/reference/configuration/intents-operator/"},next:{title:"Configuring Kafka brokers",permalink:"/reference/configuration/intents-operator/configuration"}},d={},p=[{value:"Global parameters",id:"global-parameters",level:2},{value:"Operator parameters",id:"operator-parameters",level:2},{value:"Watcher parameters",id:"watcher-parameters",level:2},{value:"Cloud parameters",id:"cloud-parameters",level:2},{value:"Common parameters",id:"common-parameters",level:2}],m={toc:p};function s(e){let{components:t,...a}=e;return(0,r.kt)("wrapper",(0,n.Z)({},m,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"You can use the ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/otterize/helm-charts/tree/main/intents-operator"},"intents operator's Helm chart")," to deploy the intents operator on its own, and configure it to work with the Otterize credentials operator to acquire mTLS credentials.\nBut it is recommended to deploy the operator as part of the ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/otterize/helm-charts/tree/main/otterize-kubernetes"},"Otterize OSS Helm chart"),", which comes with a SPIRE server and the credentials operator, rather than managing it independently."),(0,r.kt)("p",null,"If you would like to deploy it on its own, add the Otterize Helm chart repository and configure the operator:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"  helm repo add otterize https://helm.otterize.com\n  helm repo update\n  helm install otterize-intents-operator otterize/intents-operator -n otterize-system --create-namespace\n")),(0,r.kt)("h1",{id:"parameters"},"Parameters"),(0,r.kt)("h2",{id:"global-parameters"},"Global parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Key"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"),(0,r.kt)("th",{parentName:"tr",align:null},"Default"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"global.allowGetAllResources")),(0,r.kt)("td",{parentName:"tr",align:"left"},"If defined overrides ",(0,r.kt)("inlineCode",{parentName:"td"},"allowGetAllResources"),"."),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"global.telemetry.enabled")),(0,r.kt)("td",{parentName:"tr",align:"left"},"If set to ",(0,r.kt)("inlineCode",{parentName:"td"},"false"),", anonymous telemetries collection will be disabled"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"true"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"global.commonAnnotations")),(0,r.kt)("td",{parentName:"tr",align:"left"},"Annotations to add to all deployed objects"),(0,r.kt)("td",{parentName:"tr",align:null},"{}")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"global.commonLabels")),(0,r.kt)("td",{parentName:"tr",align:"left"},"Labels to add to all deployed objects"),(0,r.kt)("td",{parentName:"tr",align:null},"{}")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"global.podAnnotations")),(0,r.kt)("td",{parentName:"tr",align:"left"},"Annotations to add to all deployed pods"),(0,r.kt)("td",{parentName:"tr",align:null},"{}")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"global.podLabels")),(0,r.kt)("td",{parentName:"tr",align:"left"},"Labels to add to all deployed pods"),(0,r.kt)("td",{parentName:"tr",align:null},"{}")))),(0,r.kt)("h2",{id:"operator-parameters"},"Operator parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Key"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"),(0,r.kt)("th",{parentName:"tr",align:null},"Default"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"operator.image.repository")),(0,r.kt)("td",{parentName:"tr",align:null},"Intents Operator image repository."),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"otterize"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"operator.image.image")),(0,r.kt)("td",{parentName:"tr",align:null},"Intents Operator image."),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"intents-operator"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"operator.image.tag")),(0,r.kt)("td",{parentName:"tr",align:null},"Intents Operator image tag."),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"latest"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"operator.pullPolicy")),(0,r.kt)("td",{parentName:"tr",align:null},"Intents Operator image pull policy."),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"(none)"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"operator.autoGenerateTLSUsingCredentialsOperator")),(0,r.kt)("td",{parentName:"tr",align:null},"If set to true, adds the necessary pod annotations in order to integrate with credentials-operator, and gets the TLS certificate."),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"false"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"operator.mode")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"defaultActive")," or ",(0,r.kt)("inlineCode",{parentName:"td"},"defaultShadow"),". ",(0,r.kt)("br",null),"When ",(0,r.kt)("inlineCode",{parentName:"td"},"defaultActive")," is set, enforcement is enabled by default. ",(0,r.kt)("br",null),"When ",(0,r.kt)("inlineCode",{parentName:"td"},"defaultShadow")," is set, enforcement is disabled by default, but can be enabled per-service using a ",(0,r.kt)("inlineCode",{parentName:"td"},"ProtectedService")," resource."),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"defaultActive"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"operator.enableEnforcement")),(0,r.kt)("td",{parentName:"tr",align:null},"(",(0,r.kt)("strong",{parentName:"td"},"Deprecated"),"; use ",(0,r.kt)("inlineCode",{parentName:"td"},"mode")," instead) If set to false, enforcement is disabled globally (both for network policies and Kafka ACL). If true, you may use the other flags for more granular enforcement settings."),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"true"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"operator.enableNetworkPolicyCreation")),(0,r.kt)("td",{parentName:"tr",align:null},"Whether the operator should create network policies according to ",(0,r.kt)("inlineCode",{parentName:"td"},"ClientIntents"),"."),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"true"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"operator.enableKafkaACLCreation")),(0,r.kt)("td",{parentName:"tr",align:null},"Whether the operator should create Kafka ACL rules according to ",(0,r.kt)("inlineCode",{parentName:"td"},"ClientIntents")," of type Kafka."),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"true"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"operator.enableIstioPolicyCreation")),(0,r.kt)("td",{parentName:"tr",align:null},"Whether the operator should create Istio authorization policies according to ",(0,r.kt)("inlineCode",{parentName:"td"},"ClientIntents"),"."),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"true"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"operator.autoCreateNetworkPoliciesForExternalTraffic")),(0,r.kt)("td",{parentName:"tr",align:null},"Automatically allow external traffic, if a new ",(0,r.kt)("inlineCode",{parentName:"td"},"ClientIntents")," resource would result in blocking external (internet) traffic and there is an Ingress/Service resource indicating external traffic is expected."),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"true"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"operator.autoCreateNetworkPoliciesForExternalTrafficDisableIntentsRequirement")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"experimental")," - If ",(0,r.kt)("inlineCode",{parentName:"td"},"autoCreateNetworkPoliciesForExternalTraffic")," is enabled, do not require ",(0,r.kt)("inlineCode",{parentName:"td"},"ClientIntents")," resources ","\u2014"," simply create network policies based off of the existence of an Ingress/Service resource."),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"false"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"operator.resources")),(0,r.kt)("td",{parentName:"tr",align:null},"Resources override."),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"operator.enableDatabaseReconciler")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"experimental")," - Enables experimental support for database intents (coming soon!)"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"false"))))),(0,r.kt)("h2",{id:"watcher-parameters"},"Watcher parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Key"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Default"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"watcher.image.repository")),(0,r.kt)("td",{parentName:"tr",align:"left"},"Watcher image repository."),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"otterize"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"watcher.image.image")),(0,r.kt)("td",{parentName:"tr",align:"left"},"Watcher image."),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"intents-operator-pod-watcher"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"watcher.image.tag")),(0,r.kt)("td",{parentName:"tr",align:"left"},"Watcher image tag."),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"latest"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"watcher.pullPolicy")),(0,r.kt)("td",{parentName:"tr",align:"left"},"Watcher image pull policy."),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"(none)"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"watcher.resources")),(0,r.kt)("td",{parentName:"tr",align:"left"},"Watcher Resources."),(0,r.kt)("td",{parentName:"tr",align:"left"})))),(0,r.kt)("h2",{id:"cloud-parameters"},"Cloud parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Key"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Default"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"global.otterizeCloud.credentials.clientId")),(0,r.kt)("td",{parentName:"tr",align:"left"},"Client ID for connecting to Otterize Cloud."),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"(none)"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"global.otterizeCloud.credentials.clientSecret")),(0,r.kt)("td",{parentName:"tr",align:"left"},"Client secret for connecting to Otterize Cloud."),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"(none)"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"global.otterizeCloud.credentials.secretKeyRef.secretName")),(0,r.kt)("td",{parentName:"tr",align:"left"},"If specified, the name of a pre-created Kubernetes Secret to be used instead of creating a secret with the value of clientSecret."),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"(none)"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"global.otterizeCloud.credentials.secretKeyRef.secretKey")),(0,r.kt)("td",{parentName:"tr",align:"left"},"If specified, the key for the clientSecret in a pre-created Kubernetes Secret to be used instead of creating a secret with the value of clientSecret."),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"(none)"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"global.otterizeCloud.apiAddress")),(0,r.kt)("td",{parentName:"tr",align:"left"},"Overrides Otterize Cloud default API address."),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"(none)"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"global.otterizeCloud.apiExtraCAPEMSecret")),(0,r.kt)("td",{parentName:"tr",align:"left"},"The name of a secret containing a single ",(0,r.kt)("inlineCode",{parentName:"td"},"CA.pem")," file for an extra root CA used to connect to Otterize Cloud. The secret should be placed in the same namespace as the Otterize deployment."),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"(none)"))))),(0,r.kt)("h2",{id:"common-parameters"},"Common parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Key"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Default"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"allowGetAllResources")),(0,r.kt)("td",{parentName:"tr",align:"left"},"Gives get, list and watch permission to watch on all resources. This is used to resolve service names when pods have owners that are custom resources. When disabled, a limited set of permissions is used that only allows access to built-in Kubernetes resources that deploy Pods and Pods themselves - Deployments, StatefulSets, DaemonSets, ReplicaSets and Services. Resolving may not be able to complete if the owning resource is not one of those."),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"true"))))))}s.isMDXComponent=!0}}]);