"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[437],{3905:(e,t,a)=>{a.d(t,{Zo:()=>p,kt:()=>u});var n=a(7294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function i(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function o(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?i(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function l(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},i=Object.keys(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var s=n.createContext({}),c=function(e){var t=n.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):o(o({},t),e)),a},p=function(e){var t=c(e.components);return n.createElement(s.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},k=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),k=c(a),u=r,d=k["".concat(s,".").concat(u)]||k[u]||m[u]||i;return a?n.createElement(d,o(o({ref:t},p),{},{components:a})):n.createElement(d,o({ref:t},p))}));function u(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=a.length,o=new Array(i);o[0]=k;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:r,o[1]=l;for(var c=2;c<i;c++)o[c]=a[c];return n.createElement.apply(null,o)}return n.createElement.apply(null,a)}k.displayName="MDXCreateElement"},5162:(e,t,a)=>{a.d(t,{Z:()=>o});var n=a(7294),r=a(6010);const i="tabItem_Ymn6";function o(e){let{children:t,hidden:a,className:o}=e;return n.createElement("div",{role:"tabpanel",className:(0,r.Z)(i,o),hidden:a},t)}},5488:(e,t,a)=>{a.d(t,{Z:()=>u});var n=a(7462),r=a(7294),i=a(6010),o=a(2389),l=a(7392),s=a(7094),c=a(2466);const p="tabList__CuJ",m="tabItem_LNqP";function k(e){var t,a;const{lazy:o,block:k,defaultValue:u,values:d,groupId:f,className:g}=e,h=r.Children.map(e.children,(e=>{if((0,r.isValidElement)(e)&&"value"in e.props)return e;throw new Error("Docusaurus error: Bad <Tabs> child <"+("string"==typeof e.type?e.type:e.type.name)+'>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.')})),y=null!=d?d:h.map((e=>{let{props:{value:t,label:a,attributes:n}}=e;return{value:t,label:a,attributes:n}})),N=(0,l.l)(y,((e,t)=>e.value===t.value));if(N.length>0)throw new Error('Docusaurus error: Duplicate values "'+N.map((e=>e.value)).join(", ")+'" found in <Tabs>. Every value needs to be unique.');const b=null===u?u:null!=(t=null!=u?u:null==(a=h.find((e=>e.props.default)))?void 0:a.props.value)?t:h[0].props.value;if(null!==b&&!y.some((e=>e.value===b)))throw new Error('Docusaurus error: The <Tabs> has a defaultValue "'+b+'" but none of its children has the corresponding value. Available values are: '+y.map((e=>e.value)).join(", ")+". If you intend to show no default tab, use defaultValue={null} instead.");const{tabGroupChoices:v,setTabGroupChoices:w}=(0,s.U)(),[C,z]=(0,r.useState)(b),T=[],{blockElementScrollPositionUntilNextRender:A}=(0,c.o5)();if(null!=f){const e=v[f];null!=e&&e!==C&&y.some((t=>t.value===e))&&z(e)}const E=e=>{const t=e.currentTarget,a=T.indexOf(t),n=y[a].value;n!==C&&(A(t),z(n),null!=f&&w(f,String(n)))},O=e=>{var t;let a=null;switch(e.key){case"ArrowRight":{var n;const t=T.indexOf(e.currentTarget)+1;a=null!=(n=T[t])?n:T[0];break}case"ArrowLeft":{var r;const t=T.indexOf(e.currentTarget)-1;a=null!=(r=T[t])?r:T[T.length-1];break}}null==(t=a)||t.focus()};return r.createElement("div",{className:(0,i.Z)("tabs-container",p)},r.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,i.Z)("tabs",{"tabs--block":k},g)},y.map((e=>{let{value:t,label:a,attributes:o}=e;return r.createElement("li",(0,n.Z)({role:"tab",tabIndex:C===t?0:-1,"aria-selected":C===t,key:t,ref:e=>T.push(e),onKeyDown:O,onFocus:E,onClick:E},o,{className:(0,i.Z)("tabs__item",m,null==o?void 0:o.className,{"tabs__item--active":C===t})}),null!=a?a:t)}))),o?(0,r.cloneElement)(h.filter((e=>e.props.value===C))[0],{className:"margin-top--md"}):r.createElement("div",{className:"margin-top--md"},h.map(((e,t)=>(0,r.cloneElement)(e,{key:t,hidden:e.props.value!==C})))))}function u(e){const t=(0,o.Z)();return r.createElement(k,(0,n.Z)({key:String(t)},e))}},139:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>p,contentTitle:()=>s,default:()=>u,frontMatter:()=>l,metadata:()=>c,toc:()=>m});var n=a(7462),r=(a(7294),a(3905)),i=a(5488),o=a(5162);const l={sidebar_position:1,title:"Intent-based access control for Kafka in Kubernetes"},s=void 0,c={unversionedId:"guides/ibac-for-k8s-kafka/README",id:"guides/ibac-for-k8s-kafka/README",title:"Intent-based access control for Kafka in Kubernetes",description:"We can realize intent-based access control in Kubernetes by leveraging the built-in capabilities",source:"@site/docs/guides/ibac-for-k8s-kafka/README.mdx",sourceDirName:"guides/ibac-for-k8s-kafka",slug:"/guides/ibac-for-k8s-kafka/",permalink:"/guides/ibac-for-k8s-kafka/",draft:!1,editUrl:"https://github.com/otterize/docs/edit/main/docs/guides/ibac-for-k8s-kafka/README.mdx",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1,title:"Intent-based access control for Kafka in Kubernetes"},sidebar:"docSidebar",previous:{title:"Deeper dive into network policies",permalink:"/guides/k8s-ibac-via-network-policies/deeper-dive"},next:{title:"Credentials for Kafka",permalink:"/guides/ibac-for-k8s-kafka/credentials-for-kafka"}},p={},m=[{value:"Choose a Kubernetes cluster, Kafka and services",id:"choose-a-kubernetes-cluster-kafka-and-services",level:2},{value:"Install Otterize",id:"install-otterize",level:2},{value:"Configure Kafka for secure access",id:"configure-kafka-for-secure-access",level:2},{value:"Testing secure connection to Kafka",id:"testing-secure-connection-to-kafka",level:3},{value:"Configure Otterize to manage Kafka ACLs",id:"configure-otterize-to-manage-kafka-acls",level:2},{value:"Setting security scope",id:"setting-security-scope",level:2},{value:"Setting the default access permission levels for topics",id:"setting-the-default-access-permission-levels-for-topics",level:3},{value:"Setting per-topic access permission level",id:"setting-per-topic-access-permission-level",level:3},{value:"Example config",id:"example-config",level:3},{value:"Testing security scopes",id:"testing-security-scopes",level:3},{value:"Access <code>my-topic</code> successfully",id:"access-my-topic-successfully",level:4},{value:"Fail to access <code>my-topic-intended</code>",id:"fail-to-access-my-topic-intended",level:4},{value:"Declare and apply client intents to access <code>my-topic-intended</code>",id:"declare-and-apply-client-intents-to-access-my-topic-intended",level:4},{value:"Access <code>my-topic-intended</code> successfully",id:"access-my-topic-intended-successfully",level:4},{value:"What happens when we apply a security scope",id:"what-happens-when-we-apply-a-security-scope",level:3},{value:"Configuring intents",id:"configuring-intents",level:2},{value:"Common use cases",id:"common-use-cases",level:3},{value:"All options",id:"all-options",level:3},{value:"Otterize identities, intents and Kafka ACLs",id:"otterize-identities-intents-and-kafka-acls",level:2},{value:"Generating credentials",id:"generating-credentials",level:3},{value:"Applying intents",id:"applying-intents",level:3},{value:"Teardown",id:"teardown",level:2}],k={toc:m};function u(e){let{components:t,...a}=e;return(0,r.kt)("wrapper",(0,n.Z)({},k,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"We can realize intent-based access control in Kubernetes by leveraging the built-in capabilities\nKafka offers for enforcement using its ACL mechanism, coupled with K8s identities Otterize can easily bake\nintro mTLS certificates."),(0,r.kt)("p",null,"Of course, Otterize eliminates all of that. Let's see how."),(0,r.kt)("h2",{id:"choose-a-kubernetes-cluster-kafka-and-services"},"Choose a Kubernetes cluster, Kafka and services"),(0,r.kt)("p",null,"You can use this guide with your own set of services, e.g. first in a Kubernetes cluster running dev or lab services,\nand eventually in a staging or production cluster. You'll need admin access."),(0,r.kt)("p",null,"You can also use an existing Kafka deployment or use our provided deployment for ease of use."),(0,r.kt)("h2",{id:"install-otterize"},"Install Otterize"),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("p",{parentName:"admonition"},"For this guide, we'll disable the network policy component, to focus on the Kafka ACL authorization mechanism.\nIf you already have Otterize installed, redeploy it as shown below. You can always re-enable the network policy component\nlater by deploying it as shown below but without the ",(0,r.kt)("inlineCode",{parentName:"p"},"--set")," flag.")),(0,r.kt)("p",null,"Use Helm to install the latest version of Otterize:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"helm repo add otterize https://helm.otterize.com\nhelm repo update\nhelm install -n otterize-system --create-namespace \\\n--set intentsOperator.operator.enableNetworkPolicyCreation=false otterize otterize/otterize-kubernetes\n")),(0,r.kt)("p",null,"You can add the ",(0,r.kt)("inlineCode",{parentName:"p"},"--wait")," flag for Helm to wait for deployment to complete and all pods to be Ready, or manually watch for all pods to be ",(0,r.kt)("inlineCode",{parentName:"p"},"Ready")," using ",(0,r.kt)("inlineCode",{parentName:"p"},"kubectl get pods -n otterize-system -w"),"."),(0,r.kt)("h2",{id:"configure-kafka-for-secure-access"},"Configure Kafka for secure access"),(0,r.kt)("p",null,"To configure a Kafka broker for secure access, we need to configure the broker itself as well as adding Otterize-specific\nannotations to indicate that we want mTLS credential generation to happen.\nFor the complete list of annotation parameters please follow the SPIRE integration operator\n",(0,r.kt)("a",{parentName:"p",href:"/components/spire-integration-operator/"},"documentation"),"."),(0,r.kt)("p",null,"The following example shows how to configure Bitnami's popular\nKafka ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/bitnami/charts/tree/master/bitnami/kafka"},"chart"),":"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Configure super users - add the broker itself and the Otterize Intents Operator:"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},'superUsers: "User:CN=kafka.kafka,O=SPIRE,C=US;User:CN=intents-operator-controller-manager.otterize,O=SPIRE,C=US"\n'))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Configure the Kafka broker's ",(0,r.kt)("a",{parentName:"p",href:"https://www.confluent.io/blog/kafka-listeners-explained/"},"listeners")," to use SSL"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},'listeners:\n  - "CLIENT://:9092"\n  - "INTERNAL://:9093"\nadvertisedListeners:\n  - "CLIENT://:9092"\n  - "INTERNAL://:9093"\nlistenerSecurityProtocolMap: "INTERNAL:SSL,CLIENT:SSL"\n'))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Set the authentication parameters to"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Use mTLS"),(0,r.kt)("li",{parentName:"ul"},"Having the credentials stored in a Java KeyStore (JKS) format stored in a K8s secret called ",(0,r.kt)("inlineCode",{parentName:"li"},"kafka-tls-secret"),"\nwith a password set to ",(0,r.kt)("inlineCode",{parentName:"li"},"password"),"."),(0,r.kt)("li",{parentName:"ul"},"Deny anonymous access")),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},"auth: \n  clientProtocol: mtls\n  interBrokerProtocol: mtls\n  tls:\n    type: jks\n    existingSecrets:\n      - kafka-tls-secret\n    password: password\nauthorizerClassName: kafka.security.authorizer.AclAuthorizer\nallowEveryoneIfNoAclFound: true  \n"))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Add pod annotations to let Otterize know it needs to generate the JKS credentials and store them at the specified K8s\nsecret:"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},'podAnnotations:\n  spire-integration.otterize.com/cert-type: jks\n  spire-integration.otterize.com/tls-secret-name: kafka-tls-secret\n  spire-integration.otterize.com/truststore-file-name: kafka.truststore.jks\n  spire-integration.otterize.com/keystore-file-name: kafka-keystore.jks\n  spire-integration.otterize.com/dns-names: "kafka-0.kafka-headless.kafka.svc.cluster.local,kafka.kafka.svc.cluster.local"\n  spire-integration.otterize.com/cert-ttl: "31536000" # 1 year\n')))),(0,r.kt)("details",null,(0,r.kt)("summary",null,"Expand to see the complete YAML of this example"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},'# Configure Otterize as a super user to grant it access to configure ACLs\nsuperUsers: "User:CN=kafka.kafka,O=SPIRE,C=US;User:CN=intents-operator-controller-manager.otterize,O=SPIRE,C=US"\n# Use TLS for the Kafka listeners (Kafka calls them SSL)\nlisteners:\n  - "CLIENT://:9092"\n  - "INTERNAL://:9093"\nadvertisedListeners:\n  - "CLIENT://:9092"\n  - "INTERNAL://:9093"\nlistenerSecurityProtocolMap: "INTERNAL:SSL,CLIENT:SSL"\n# Annotations for Otterize to generate credentials\npodAnnotations:\n  spire-integration.otterize.com/cert-type: jks\n  spire-integration.otterize.com/tls-secret-name: kafka-tls-secret\n  spire-integration.otterize.com/truststore-file-name: kafka.truststore.jks\n  spire-integration.otterize.com/keystore-file-name: kafka-keystore.jks\n  spire-integration.otterize.com/dns-names: "kafka-0.kafka-headless.kafka.svc.cluster.local,kafka.kafka.svc.cluster.local"\n# Authenticate clients using mTLS\nauth:\n  clientProtocol: mtls\n  interBrokerProtocol: mtls\n  tls:\n    type: jks\n    existingSecrets:\n      - kafka-tls-secret\n    password: password\nauthorizerClassName: kafka.security.authorizer.AclAuthorizer\n# Allocate resources\nresources:\n  requests:\n    cpu: 50m\n    memory: 256Mi\n'))),(0,r.kt)("p",null,"The following commands will deploy a Kafka cluster configured to use Otterize-provided mTLS credentials\nwith permissions for Otterize to configure ACLs:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"helm repo add bitnami https://charts.bitnami.com/bitnami\nhelm repo update\nhelm install -n kafka \\\n--version 14.x.x \\\n-f https://docs.otterize.com/code-examples/kafka-mtls/helm/values.yaml --create-namespace kafka bitnami/kafka\n")),(0,r.kt)("p",null,"You can watch for all pods to be ",(0,r.kt)("inlineCode",{parentName:"p"},"Ready")," using ",(0,r.kt)("inlineCode",{parentName:"p"},"kubectl get pods -n kafka -w"),"."),(0,r.kt)("h3",{id:"testing-secure-connection-to-kafka"},"Testing secure connection to Kafka"),(0,r.kt)("p",null,"You can set up an interactive session that securely connects to Kafka by deploying a pod configured to get credentials,\nand then send that pod scripts to produce and consume messages, using the standard Kafka\n",(0,r.kt)("a",{parentName:"p",href:"https://kafka.apache.org/quickstart#quickstart_send"},"kafka-console-producer")," and\n",(0,r.kt)("a",{parentName:"p",href:"https://kafka.apache.org/quickstart#quickstart_consume"},"kafka-console-consumer")," scripts:"),(0,r.kt)("details",null,(0,r.kt)("summary",null,"Expand to see the details of the pod YAML configurations"),(0,r.kt)(i.Z,{mdxType:"Tabs"},(0,r.kt)(o.Z,{value:"namespace.yaml",label:"namespace.yaml",default:!0,mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},"apiVersion: v1\nkind: Namespace\nmetadata:\n  name: otterize-tutorial-kafka-mtls\n"))),(0,r.kt)(o.Z,{value:"interactive.yaml",label:"interactive.yaml",default:!0,mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},'apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: interactive\n  namespace: ibac-for-kafka\nspec:\n  selector:\n    matchLabels:\n      app: interactive\n  template:\n    metadata:\n      labels:\n        app: interactive\n      annotations:\n        spire-integration.otterize.com/tls-secret-name: interactive-credentials-secret\n        spire-integration.otterize.com/cert-type: jks\n        spire-integration.otterize.com/truststore-file-name: kafka.truststore.jks\n        spire-integration.otterize.com/keystore-file-name: kafka.keystore.jks\n    spec:\n      containers:\n        - name: interactive\n          image: bitnami/kafka\n          command: [ "/bin/sh", "-c", "--" ]\n          args: [ "sleep infinity" ]\n          volumeMounts:\n            - mountPath: /app\n              name: interactive-properties\n            - name: otterize-credentials\n              mountPath: /var/otterize/credentials\n              readOnly: true\n      volumes:\n        - name: interactive-properties\n          configMap:\n            name: interactive-properties\n        - name: otterize-credentials\n          secret:\n            secretName: interactive-credentials-secret\n'))),(0,r.kt)(o.Z,{value:"interactive-configmap.yaml",label:"interactive-configmap.yaml",default:!0,mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},"apiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: interactive-properties\n  namespace: ibac-for-kafka\ndata:\n  client.properties: |\n    security.protocol=SSL\n    ssl.keystore.location=/var/otterize/credentials/kafka.keystore.jks\n    ssl.keystore.password=password\n    ssl.truststore.location=/var/otterize/credentials/kafka.truststore.jks\n    ssl.truststore.password=password\n"))))),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Deploy a pod configured for the interactive session connecting to Kafka"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"kubectl apply -f https://docs.otterize.com/code-examples/ibac-for-kafka/interactive/all.yaml\n"))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Verify that the pod was deployed"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"kubectl get pods -n ibac-for-kafka -l app=interactive\n")),(0,r.kt)("p",{parentName:"li"},"You should see the following output:"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre"},"NAME                           READY   STATUS    RESTARTS   AGE\ninteractive-5568ff58ff-84ksc   1/1     Running   0          8s\n"))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Let's open two interactive terminal windows - one for the producer and one for the consumer, so we can see\nthe messages sent and received in real time:"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-bash",metastring:'title="Producer terminal"',title:'"Producer','terminal"':!0},"kubectl exec -n ibac-for-kafka -it deploy/interactive -- bash \\\n/opt/bitnami/kafka/bin/kafka-console-producer.sh \\\n--bootstrap-server kafka.kafka:9092 \\\n-topic my-topic \\\n--producer.config /app/client.properties\n")),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-bash",metastring:'title="Consumer terminal"',title:'"Consumer','terminal"':!0},"kubectl exec -n ibac-for-kafka -it deploy/interactive -- bash \\\n/opt/bitnami/kafka/bin/kafka-console-consumer.sh \\\n--bootstrap-server kafka.kafka:9092 \\\n-topic my-topic \\\n--consumer.config /app/client.properties\n"))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Write any text you like on the ",(0,r.kt)("strong",{parentName:"p"},"producer terminal"),", send it with an ",(0,r.kt)("strong",{parentName:"p"},"enter")," and you will see the messages appear\non the consumer terminal:"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-bash",metastring:'title="Producer terminal"',title:'"Producer','terminal"':!0},">Hello there consumer, this is the producer!\n>\n")),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-bash",metastring:'title="Consumer terminal"',title:'"Consumer','terminal"':!0},"Hello there consumer, this is the producer!\n")))),(0,r.kt)("h2",{id:"configure-otterize-to-manage-kafka-acls"},"Configure Otterize to manage Kafka ACLs"),(0,r.kt)("p",null,"To allow Otterize to configure ACLs for Kafka we need to create and apply a ",(0,r.kt)("inlineCode",{parentName:"p"},"KafkaServerConfig"),".\nThe basic configuration allows Otterize to configure Kafka ACLs upon new applied intents and sets\na default allow policy for all topics.\nWe will later show how to add fine-grained control over topics."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},'apiVersion: k8s.otterize.com/v1alpha1\nkind: KafkaServerConfig\nmetadata:\n  name: kafkaserverconfig\n  namespace: kafka\nspec:\n  service:\n    name: kafka\n  addr: kafka.kafka:9092\n  tls:\n    certFile: /etc/otterize-spire/svid.pem\n    keyFile: /etc/otterize-spire/key.pem\n    rootCAFile: /etc/otterize-spire/bundle.pem\n  topics:\n    - topic: "*"\n      pattern: prefix\n      clientIdentityRequired: false\n      intentsRequired: false\n')),(0,r.kt)("p",null,"You can apply it with"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"kubectl apply -f https://docs.otterize.com/code-examples/ibac-for-kafka/kafkaserverconfig.yaml\n")),(0,r.kt)("h2",{id:"setting-security-scope"},"Setting security scope"),(0,r.kt)("p",null,"Security scopes are set by setting topic selectors and setting permission levels."),(0,r.kt)("p",null,"An example configuration would be"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},'topic: "my-topic"\npattern: literal\nclientIdentityRequired: true\nintentsRequired: true\n')),(0,r.kt)("p",null,"Topic selectors can be set by using a ",(0,r.kt)("inlineCode",{parentName:"p"},"prefix")," match or a ",(0,r.kt)("inlineCode",{parentName:"p"},"literal")," match pattern.\nRead more ",(0,r.kt)("a",{parentName:"p",href:"https://docs.confluent.io/platform/current/kafka/authorization.html#prefixed-acls"},"here"),"."),(0,r.kt)("p",null,"Permission levels are set by"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Unauthenticated")," - client identity not required",(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"clientIdentityRequired: false\nintentsRequired: false\n"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Authenticated")," - client identity required",(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"clientIdentityRequired: true\nintentsRequired: false\n"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Authorized")," - client identity and an intent are required",(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"clientIdentityRequired: true\nintentsRequired: true\n")))),(0,r.kt)("p",null,"To set a security scope for topic access, define:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Default")," access permission levels for topics"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Per-topic")," access permission level")),(0,r.kt)("h3",{id:"setting-the-default-access-permission-levels-for-topics"},"Setting the default access permission levels for topics"),(0,r.kt)("p",null,"To set the default security scope for topics, use the following ",(0,r.kt)("inlineCode",{parentName:"p"},"topic")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"pattern"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'    - topic: "*"\n      pattern: prefix\n')),(0,r.kt)("h3",{id:"setting-per-topic-access-permission-level"},"Setting per-topic access permission level"),(0,r.kt)("p",null,"To set the security scope for a specific topic, use the following ",(0,r.kt)("inlineCode",{parentName:"p"},"topic")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"pattern"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'    - topic: "TOPIC NAME GOES HERE"\n      pattern: literal\n')),(0,r.kt)("h3",{id:"example-config"},"Example config"),(0,r.kt)("p",null,"The following KafkaServerConfig"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Sets a default allow unauthenticated access to all topics;"),(0,r.kt)("li",{parentName:"ul"},"Restricts access to ",(0,r.kt)("inlineCode",{parentName:"li"},"my-topic")," to authenticated clients;"),(0,r.kt)("li",{parentName:"ul"},"Restricts access to ",(0,r.kt)("inlineCode",{parentName:"li"},"my-topic-intended")," for authenticated clients with applied intents:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},'apiVersion: k8s.otterize.com/v1alpha1\nkind: KafkaServerConfig\nmetadata:\n  name: kafkaserverconfig\n  namespace: kafka\nspec:\n  service:\n    name: kafka\n  addr: kafka.kafka:9092\n  tls:\n    certFile: /etc/otterize-spire/svid.pem\n    keyFile: /etc/otterize-spire/key.pem\n    rootCAFile: /etc/otterize-spire/bundle.pem\n  topics:\n    - topic: "*"\n      pattern: prefix\n      clientIdentityRequired: false\n      intentsRequired: false\n    - topic: "my-topic"\n      pattern: literal\n      clientIdentityRequired: true\n      intentsRequired: false\n    - topic: "my-topic-intended"\n      pattern: literal\n      clientIdentityRequired: true\n      intentsRequired: true\n')),(0,r.kt)("p",null,"It will be used in the next section as an example."),(0,r.kt)("h3",{id:"testing-security-scopes"},"Testing security scopes"),(0,r.kt)("p",null,"Let's run through the example config above and check that Kafka access controls are working as configured:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"A client that's authenticated but without declared intents:",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"can access ",(0,r.kt)("inlineCode",{parentName:"li"},"my-topic")," successfully;"),(0,r.kt)("li",{parentName:"ul"},"can't access ",(0,r.kt)("inlineCode",{parentName:"li"},"my-topic-intended"),"."))),(0,r.kt)("li",{parentName:"ul"},"Apply intents for that client to access ",(0,r.kt)("inlineCode",{parentName:"li"},"my-topic-intended"),"..."),(0,r.kt)("li",{parentName:"ul"},"Now that client can access ",(0,r.kt)("inlineCode",{parentName:"li"},"my-topic-intended"),".")),(0,r.kt)("p",null,"You can set up an interactive session that securely connects to Kafka by deploying a pod configured to get credentials\nand using the popular ",(0,r.kt)("a",{parentName:"p",href:"https://kafka.apache.org/quickstart#quickstart_send"},"kafka-console-producer")," and\n",(0,r.kt)("a",{parentName:"p",href:"https://kafka.apache.org/quickstart#quickstart_consume"},"kafka-console-consumer"),' scripts.\nThere will be one client (this "interactive" pod) and we will use it from two different windows to get it to\nproduce events (from one window) and then consume them (showing them in the second window).'),(0,r.kt)("details",null,(0,r.kt)("summary",null,"Expand to see the details of the pod YAML configurations"),(0,r.kt)(i.Z,{mdxType:"Tabs"},(0,r.kt)(o.Z,{value:"namespace.yaml",label:"namespace.yaml",default:!0,mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},"apiVersion: v1\nkind: Namespace\nmetadata:\n  name: otterize-tutorial-kafka-mtls\n"))),(0,r.kt)(o.Z,{value:"interactive.yaml",label:"interactive.yaml",default:!0,mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},'apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: interactive\n  namespace: ibac-for-kafka\nspec:\n  selector:\n    matchLabels:\n      app: interactive\n  template:\n    metadata:\n      labels:\n        app: interactive\n      annotations:\n        spire-integration.otterize.com/tls-secret-name: interactive-credentials-secret\n        spire-integration.otterize.com/cert-type: jks\n        spire-integration.otterize.com/truststore-file-name: kafka.truststore.jks\n        spire-integration.otterize.com/keystore-file-name: kafka.keystore.jks\n    spec:\n      containers:\n        - name: interactive\n          image: bitnami/kafka\n          command: [ "/bin/sh", "-c", "--" ]\n          args: [ "sleep infinity" ]\n          volumeMounts:\n            - mountPath: /app\n              name: interactive-properties\n            - name: otterize-credentials\n              mountPath: /var/otterize/credentials\n              readOnly: true\n      volumes:\n        - name: interactive-properties\n          configMap:\n            name: interactive-properties\n        - name: otterize-credentials\n          secret:\n            secretName: interactive-credentials-secret\n'))),(0,r.kt)(o.Z,{value:"interactive-configmap.yaml",label:"interactive-configmap.yaml",default:!0,mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},"apiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: interactive-properties\n  namespace: ibac-for-kafka\ndata:\n  client.properties: |\n    security.protocol=SSL\n    ssl.keystore.location=/var/otterize/credentials/kafka.keystore.jks\n    ssl.keystore.password=password\n    ssl.truststore.location=/var/otterize/credentials/kafka.truststore.jks\n    ssl.truststore.password=password\n"))))),(0,r.kt)("p",null,"Deploy a pod configured for the interactive session and connecting to Kafka:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"kubectl apply -f https://docs.otterize.com/code-examples/ibac-for-kafka/interactive/all.yaml\n")),(0,r.kt)("details",null,(0,r.kt)("summary",null,"Optional: check deployment status"),(0,r.kt)("div",null,(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"kubectl get pods -n ibac-for-kafka -l app=interactive\n")),(0,r.kt)("p",null,"You should see"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"NAME                           READY   STATUS    RESTARTS   AGE\ninteractive-5568ff58ff-84ksc   1/1     Running   0          8s\n")))),(0,r.kt)("p",null,"Apply the example configuration to Kafka:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"kubectl apply -f https://docs.otterize.com/code-examples/ibac-for-kafka/kafkaserverconfig-my-topic.yaml\n")),(0,r.kt)("h4",{id:"access-my-topic-successfully"},"Access ",(0,r.kt)("inlineCode",{parentName:"h4"},"my-topic")," successfully"),(0,r.kt)("p",null,"Let's open two interactive terminal windows ","\u2014","\none scripted to produce events to ",(0,r.kt)("inlineCode",{parentName:"p"},"my-topic")," and one to consume and show events from ",(0,r.kt)("inlineCode",{parentName:"p"},"my-topic")," ","\u2014","\nso we can see the messages sent and received in real time:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash",metastring:'title="Producer terminal"',title:'"Producer','terminal"':!0},"kubectl exec -n ibac-for-kafka -it deploy/interactive -- bash \\\n/opt/bitnami/kafka/bin/kafka-console-producer.sh \\\n--bootstrap-server kafka.kafka:9092 \\\n-topic my-topic \\\n--producer.config /app/client.properties\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash",metastring:'title="Consumer terminal"',title:'"Consumer','terminal"':!0},"kubectl exec -n ibac-for-kafka -it deploy/interactive -- bash \\\n/opt/bitnami/kafka/bin/kafka-console-consumer.sh \\\n--bootstrap-server kafka.kafka:9092 \\\n-topic my-topic \\\n--consumer.config /app/client.properties\n")),(0,r.kt)("p",null,"Type some text in the ",(0,r.kt)("strong",{parentName:"p"},"producer terminal"),", send it with an ",(0,r.kt)("strong",{parentName:"p"},"enter"),", and look for the message to appear\nin the ",(0,r.kt)("strong",{parentName:"p"},"consumer terminal"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash",metastring:'title="Producer terminal"',title:'"Producer','terminal"':!0},">Hello there consumer, this is the producer!\n>\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash",metastring:'title="Consumer terminal"',title:'"Consumer','terminal"':!0},"Hello there consumer, this is the producer!\n")),(0,r.kt)("p",null,"Sure enough, all that the client (pod) needed in order to access ",(0,r.kt)("inlineCode",{parentName:"p"},"my-topic")," were the mTLS credentials\n(configured and distributed by Otterize) because that topic was configured as only requiring authentication."),(0,r.kt)("p",null,"You can now close the two terminal windows."),(0,r.kt)("h4",{id:"fail-to-access-my-topic-intended"},"Fail to access ",(0,r.kt)("inlineCode",{parentName:"h4"},"my-topic-intended")),(0,r.kt)("p",null,"We will now test the behavior with two ",(0,r.kt)("strong",{parentName:"p"},"new")," interactive terminal windows, now scripted to access ",(0,r.kt)("inlineCode",{parentName:"p"},"my-topic-intended"),"."),(0,r.kt)("p",null,"Start by opening the ",(0,r.kt)("strong",{parentName:"p"},"producer terminal"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash",metastring:'title="Producer terminal"',title:'"Producer','terminal"':!0},"kubectl exec -n ibac-for-kafka -it deploy/interactive -- bash \\\n/opt/bitnami/kafka/bin/kafka-console-producer.sh \\\n--bootstrap-server kafka.kafka:9092 \\\n-topic my-topic-intended \\\n--producer.config /app/client.properties\n")),(0,r.kt)("p",null,"Type ",(0,r.kt)("inlineCode",{parentName:"p"},"hello")," into the ",(0,r.kt)("strong",{parentName:"p"},"producer terminal")," and you will see it getting blocked from accessing the ",(0,r.kt)("inlineCode",{parentName:"p"},"my-topic-intended"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash",metastring:'title="Producer terminal"',title:'"Producer','terminal"':!0},">hello\n[2022-09-15 10:12:24,926] WARN [Producer clientId=console-producer] Error while fetching metadata with correlation id 4 : {my-topic-intended=TOPIC_AUTHORIZATION_FAILED} (org.apache.kafka.clients.NetworkClient)\n[2022-09-15 10:12:24,936] ERROR [Producer clientId=console-producer] Topic authorization failed for topics [my-topic-intended] (org.apache.kafka.clients.Metadata)\n[2022-09-15 10:12:24,941] ERROR Error when sending message to topic my-topic-intended with key: null, value: 5 bytes with error: (org.apache.kafka.clients.producer.internals.ErrorLoggingCallback)\norg.apache.kafka.common.errors.TopicAuthorizationException: Not authorized to access topics: [my-topic-intended]\n")),(0,r.kt)("p",null,"Open the ",(0,r.kt)("strong",{parentName:"p"},"consumer terminal")," with:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash",metastring:'title="Consumer terminal"',title:'"Consumer','terminal"':!0},"kubectl exec -n ibac-for-kafka -it deploy/interactive -- bash \\\n/opt/bitnami/kafka/bin/kafka-console-consumer.sh \\\n--bootstrap-server kafka.kafka:9092 \\\n-topic my-topic-intended \\\n--consumer.config /app/client.properties\n")),(0,r.kt)("p",null,"Notice that it immediately fails to consume ",(0,r.kt)("inlineCode",{parentName:"p"},"my-topic-intended")," as following:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"[2022-09-15 10:12:14,822] WARN [Consumer clientId=console-consumer, groupId=console-consumer-40186] Error while fetching metadata with correlation id 2 : {my-topic-intended=TOPIC_AUTHORIZATION_FAILED} (org.apache.kafka.clients.NetworkClient)\n[2022-09-15 10:12:14,824] ERROR [Consumer clientId=console-consumer, groupId=console-consumer-40186] Topic authorization failed for topics [my-topic-intended] (org.apache.kafka.clients.Metadata)\n[2022-09-15 10:12:14,825] ERROR Error processing message, terminating consumer process:  (kafka.tools.ConsoleConsumer$)\norg.apache.kafka.common.errors.TopicAuthorizationException: Not authorized to access topics: [my-topic-intended]\nProcessed a total of 0 messages\n")),(0,r.kt)("p",null,"While the client (pod) had credentials, it was not authorized to access this topic, as it didn't declare\nintents to do so, and this topic was configured to require authorization."),(0,r.kt)("p",null,"You can again close the two terminal windows."),(0,r.kt)("h4",{id:"declare-and-apply-client-intents-to-access-my-topic-intended"},"Declare and apply client intents to access ",(0,r.kt)("inlineCode",{parentName:"h4"},"my-topic-intended")),(0,r.kt)("p",null,"Now we'll declare the client's intents to access ",(0,r.kt)("inlineCode",{parentName:"p"},"my-topic-intended"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},"apiVersion: k8s.otterize.com/v1alpha1\nkind: ClientIntents\nmetadata:\n  name: interactive\n  namespace:  ibac-for-kafka\nspec:\n  service:\n    name: interactive\n  calls:\n    - name: kafka\n      namespace: kafka\n      type: kafka\n      topics:\n        - name: my-topic-intended\n          operations: [ all ]\n\n")),(0,r.kt)("p",null,"Apply these intents with:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"kubectl apply -f https://docs.otterize.com/code-examples/ibac-for-kafka/interactive/interactive-intents.yaml\n")),(0,r.kt)("h4",{id:"access-my-topic-intended-successfully"},"Access ",(0,r.kt)("inlineCode",{parentName:"h4"},"my-topic-intended")," successfully"),(0,r.kt)("p",null,"Finally, let's again open two interactive terminal windows scripted to access ",(0,r.kt)("inlineCode",{parentName:"p"},"my-topic-intended"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash",metastring:'title="Producer terminal"',title:'"Producer','terminal"':!0},"kubectl exec -n ibac-for-kafka -it deploy/interactive -- bash \\\n/opt/bitnami/kafka/bin/kafka-console-producer.sh \\\n--bootstrap-server kafka.kafka:9092 \\\n-topic my-topic-intended \\\n--producer.config /app/client.properties\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash",metastring:'title="Consumer terminal"',title:'"Consumer','terminal"':!0},"kubectl exec -n ibac-for-kafka -it deploy/interactive -- bash \\\n/opt/bitnami/kafka/bin/kafka-console-consumer.sh \\\n--bootstrap-server kafka.kafka:9092 \\\n-topic my-topic-intended \\\n--consumer.config /app/client.properties\n")),(0,r.kt)("p",null,"Type some text in the ",(0,r.kt)("strong",{parentName:"p"},"producer terminal"),", send it with an ",(0,r.kt)("strong",{parentName:"p"},"enter"),", and watch the two windows:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash",metastring:'title="Producer terminal"',title:'"Producer','terminal"':!0},">Hello there consumer, this is the producer!\n>\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash",metastring:'title="Consumer terminal"',title:'"Consumer','terminal"':!0},"Hello there consumer, this is the producer!\n")),(0,r.kt)("p",null,"Now that the client has declared its intents, and those intents were applied to the cluster, Otterize\nconfigured the Kafka ACLs to permit this client to successfully access the ",(0,r.kt)("inlineCode",{parentName:"p"},"my-topic-intended")," topic."),(0,r.kt)("p",null,"You can now close the two terminal windows."),(0,r.kt)("h3",{id:"what-happens-when-we-apply-a-security-scope"},"What happens when we apply a security scope"),(0,r.kt)("p",null,"Security scopes translate directly into Kafka ACLs.\nYou can use the parameters ",(0,r.kt)("inlineCode",{parentName:"p"},"topic"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"pattern"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"clientIdentityRequired")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"intentsRequired")," to configure them.\nWith those, you can choose on which topics you'd like to require an identity (enforce mTLS),\non which you'd like to require intents,\nand on which you don't require any of those.\n",(0,r.kt)("a",{parentName:"p",href:"/components/intents-operator/configuration"},"Read more about Kafka configuration here."),"."),(0,r.kt)("h2",{id:"configuring-intents"},"Configuring intents"),(0,r.kt)("h3",{id:"common-use-cases"},"Common use cases"),(0,r.kt)("p",null,"Client intents can be configured to allow different access patterns for different clients.\nA basic intents file for a client intending to ",(0,r.kt)("strong",{parentName:"p"},"produce")," to a topic looks as follows."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},"apiVersion: k8s.otterize.com/v1alpha1\nkind: ClientIntents\nmetadata:\n  name: myclient\nspec:\n  service:\n    name: myclient\n  calls:\n    - name: kafka\n      namespace: kafka\n      type: kafka\n      topics:\n        - name: mytopic\n          operations: [ produce ]\n")),(0,r.kt)("p",null,"To configure a different access pattern for the client we need to set its ",(0,r.kt)("strong",{parentName:"p"},"operation")," field to the desired value."),(0,r.kt)("p",null,"Common access patterns"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"all")," - allow all operations for the topic.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},"- name: mytopic\n  operations: [ all ]\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"produce")," - allow the ",(0,r.kt)("em",{parentName:"li"},"produce")," access pattern for a topic.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},"- name: mytopic\n  operations: [ produce ]\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"consume")," - allow the ",(0,r.kt)("em",{parentName:"li"},"consume")," access pattern for a topic.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},"- name: mytopic\n  operations: [ consume ]\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"produce and create")," - allow the ",(0,r.kt)("em",{parentName:"li"},"produce")," and ",(0,r.kt)("em",{parentName:"li"},"create")," access pattern for a topic.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},"- name: mytopic\n  operations: [ create, produce ]\n")),(0,r.kt)("h3",{id:"all-options"},"All options"),(0,r.kt)("p",null,"Available topic operations are as follows. For more details read ",(0,r.kt)("a",{parentName:"p",href:"https://docs.confluent.io/platform/current/kafka/authorization.html#operations"},"here")),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"option"),(0,r.kt)("th",{parentName:"tr",align:null},"Operation"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"all")),(0,r.kt)("td",{parentName:"tr",align:null},"All")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"consume")),(0,r.kt)("td",{parentName:"tr",align:null},"Read")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"produce")),(0,r.kt)("td",{parentName:"tr",align:null},"Write")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"create")),(0,r.kt)("td",{parentName:"tr",align:null},"Create")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"alter")),(0,r.kt)("td",{parentName:"tr",align:null},"Alter")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"delete")),(0,r.kt)("td",{parentName:"tr",align:null},"Delete")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"describe")),(0,r.kt)("td",{parentName:"tr",align:null},"Describe")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"ClusterAction")),(0,r.kt)("td",{parentName:"tr",align:null},"ClusterAction")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"DescribeConfigs")),(0,r.kt)("td",{parentName:"tr",align:null},"DescribeConfigs")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"AlterConfigs")),(0,r.kt)("td",{parentName:"tr",align:null},"AlterConfigs")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"IdempotentWrite")),(0,r.kt)("td",{parentName:"tr",align:null},"IdempotentWrite")))),(0,r.kt)("h2",{id:"otterize-identities-intents-and-kafka-acls"},"Otterize identities, intents and Kafka ACLs"),(0,r.kt)("p",null,"In the following example, there is one client (",(0,r.kt)("inlineCode",{parentName:"p"},"myclient"),") running in the namespace ",(0,r.kt)("inlineCode",{parentName:"p"},"ibac-for-kafka"),"\nand an intent to access a single topic (",(0,r.kt)("inlineCode",{parentName:"p"},"my-topic"),")."),(0,r.kt)("details",null,(0,r.kt)("summary",null,"Expand to see the example YAML files"),(0,r.kt)(i.Z,{mdxType:"Tabs"},(0,r.kt)(o.Z,{value:"deployment.yaml",label:"deployment.yaml",default:!0,mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},'apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: myclient\n  namespace: ibac-for-kafka\nspec:\n  selector:\n    matchLabels:\n      app: myclient\n  template:\n    metadata:\n      labels:\n        app: myclient\n      annotations:\n        spire-integration.otterize.com/tls-secret-name: myclient-credentials-secret\n    spec:\n      containers:\n        - name: myclient\n          image: golang\n          command: [ "/bin/sh", "-c", "--" ]\n          args: [ "sleep infinity" ]\n\n'))),(0,r.kt)(o.Z,{value:"client-intents.yaml",label:"client-intents.yaml",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},"apiVersion: k8s.otterize.com/v1alpha1\nkind: ClientIntents\nmetadata:\n  name: myclient\n  namespace:  ibac-for-kafka\nspec:\n  service:\n    name: myclient\n  calls:\n    - name: kafka\n      namespace: kafka\n      type: kafka\n      topics:\n        - name: my-topic\n          operations: [ all ]\n\n"))))),(0,r.kt)("h3",{id:"generating-credentials"},"Generating credentials"),(0,r.kt)("p",null,"By annotating the pod with ",(0,r.kt)("inlineCode",{parentName:"p"},"spire-integration.otterize.com/tls-secret-name: myclient-credentials-secret")," Otterize\nautomatically generates mTLS credentials for the pod."),(0,r.kt)("p",null,"The certificate's ",(0,r.kt)("inlineCode",{parentName:"p"},"CN")," is set to be ",(0,r.kt)("inlineCode",{parentName:"p"},"myclient.ibac-for-kafka"),". This is determined by taking the ",(0,r.kt)("a",{parentName:"p",href:"/service-identities"},"Otterize service name")," and appending the namespace. This value will be used in the\nfollowing step when applying intents."),(0,r.kt)("p",null,"You can deploy the client with:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"kubectl apply -f https://docs.otterize.com/code-examples/ibac-for-kafka/client-deployment.yaml\n")),(0,r.kt)("p",null,"Run the following to inspect its certificate:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"kubectl get secret -n ibac-for-kafka myclient-credentials-secret -o jsonpath='{.data.svid\\.pem}' | \\\nbase64 -d | openssl x509 -in svid.pem -text | grep \"CN\"\n")),(0,r.kt)("p",null,"You should see the ",(0,r.kt)("inlineCode",{parentName:"p"},"CN")," configured correctly"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"  Subject: C = US, O = SPIRE, CN = client.otterize-tutorial-mtls\n")),(0,r.kt)("h3",{id:"applying-intents"},"Applying intents"),(0,r.kt)("p",null,"When an intent is applied ","\u2014"," in our case, for ",(0,r.kt)("inlineCode",{parentName:"p"},"myclient")," to access ",(0,r.kt)("inlineCode",{parentName:"p"},"my-topic")," on Kafka ","\u2014"," Otterize automatically\ngenerates an ACL:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"the ACL matches the ",(0,r.kt)("inlineCode",{parentName:"li"},"CN")," value used for this client: ",(0,r.kt)("inlineCode",{parentName:"li"},"myclient.ibac-for-kafka"),";"),(0,r.kt)("li",{parentName:"ul"},"the ACL allow access to the intended topic with the intended operation.")),(0,r.kt)("p",null,"You can apply the intents with:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"kubectl apply -f https://docs.otterize.com/code-examples/ibac-for-kafka/client-intents.yaml\n")),(0,r.kt)("p",null,"Run the following command to look through the Kafka logs for ACL changes:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},'kubectl logs -n kafka statefulset/kafka | grep "Processing Acl change" | grep myclient | tail -n 1\n')),(0,r.kt)("p",null,"You should see that a Kafka ACL was configured to allow access to ",(0,r.kt)("inlineCode",{parentName:"p"},"my-topic")," for ",(0,r.kt)("inlineCode",{parentName:"p"},"myclient.ibac-for-kafka"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"[2022-09-15 07:41:12,632] INFO Processing Acl change notification for\nResourcePattern(resourceType=TOPIC, name=my-topic, patternType=LITERAL), versionedAcls :\nSet(User:ANONYMOUS has DENY permission for operations: ALL from hosts: *,\n    User:CN=myclient.ibac-for-kafka,O=SPIRE,C=US has ALLOW permission for operations: ALL from hosts: *)\n, zkVersion : 5 (kafka.security.authorizer.AclAuthorizer)\n")),(0,r.kt)("h2",{id:"teardown"},"Teardown"),(0,r.kt)("p",null,"To remove the deployed examples run:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"kubectl delete namespace ibac-for-kafka\n")))}u.isMDXComponent=!0}}]);