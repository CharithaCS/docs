"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[6608,7918],{5162:(e,t,n)=>{n.d(t,{Z:()=>l});var a=n(7294),o=n(6010);const i={tabItem:"tabItem_Ymn6"};function l(e){let{children:t,hidden:n,className:l}=e;return a.createElement("div",{role:"tabpanel",className:(0,o.Z)(i.tabItem,l),hidden:n},t)}},4866:(e,t,n)=>{n.d(t,{Z:()=>v});var a=n(7462),o=n(7294),i=n(6010),l=n(2466),r=n(6550),s=n(1980),c=n(7392),u=n(12);function p(e){return function(e){return o.Children.map(e,(e=>{if(!e||(0,o.isValidElement)(e)&&function(e){const{props:t}=e;return!!t&&"object"==typeof t&&"value"in t}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}(e).map((e=>{let{props:{value:t,label:n,attributes:a,default:o}}=e;return{value:t,label:n,attributes:a,default:o}}))}function d(e){const{values:t,children:n}=e;return(0,o.useMemo)((()=>{const e=t??p(n);return function(e){const t=(0,c.l)(e,((e,t)=>e.value===t.value));if(t.length>0)throw new Error(`Docusaurus error: Duplicate values "${t.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[t,n])}function m(e){let{value:t,tabValues:n}=e;return n.some((e=>e.value===t))}function h(e){let{queryString:t=!1,groupId:n}=e;const a=(0,r.k6)(),i=function(e){let{queryString:t=!1,groupId:n}=e;if("string"==typeof t)return t;if(!1===t)return null;if(!0===t&&!n)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return n??null}({queryString:t,groupId:n});return[(0,s._X)(i),(0,o.useCallback)((e=>{if(!i)return;const t=new URLSearchParams(a.location.search);t.set(i,e),a.replace({...a.location,search:t.toString()})}),[i,a])]}function k(e){const{defaultValue:t,queryString:n=!1,groupId:a}=e,i=d(e),[l,r]=(0,o.useState)((()=>function(e){let{defaultValue:t,tabValues:n}=e;if(0===n.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(t){if(!m({value:t,tabValues:n}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${t}" but none of its children has the corresponding value. Available values are: ${n.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return t}const a=n.find((e=>e.default))??n[0];if(!a)throw new Error("Unexpected error: 0 tabValues");return a.value}({defaultValue:t,tabValues:i}))),[s,c]=h({queryString:n,groupId:a}),[p,k]=function(e){let{groupId:t}=e;const n=function(e){return e?`docusaurus.tab.${e}`:null}(t),[a,i]=(0,u.Nk)(n);return[a,(0,o.useCallback)((e=>{n&&i.set(e)}),[n,i])]}({groupId:a}),g=(()=>{const e=s??p;return m({value:e,tabValues:i})?e:null})();(0,o.useLayoutEffect)((()=>{g&&r(g)}),[g]);return{selectedValue:l,selectValue:(0,o.useCallback)((e=>{if(!m({value:e,tabValues:i}))throw new Error(`Can't select invalid tab value=${e}`);r(e),c(e),k(e)}),[c,k,i]),tabValues:i}}var g=n(2389);const b={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};function f(e){let{className:t,block:n,selectedValue:r,selectValue:s,tabValues:c}=e;const u=[],{blockElementScrollPositionUntilNextRender:p}=(0,l.o5)(),d=e=>{const t=e.currentTarget,n=u.indexOf(t),a=c[n].value;a!==r&&(p(t),s(a))},m=e=>{let t=null;switch(e.key){case"Enter":d(e);break;case"ArrowRight":{const n=u.indexOf(e.currentTarget)+1;t=u[n]??u[0];break}case"ArrowLeft":{const n=u.indexOf(e.currentTarget)-1;t=u[n]??u[u.length-1];break}}t?.focus()};return o.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,i.Z)("tabs",{"tabs--block":n},t)},c.map((e=>{let{value:t,label:n,attributes:l}=e;return o.createElement("li",(0,a.Z)({role:"tab",tabIndex:r===t?0:-1,"aria-selected":r===t,key:t,ref:e=>u.push(e),onKeyDown:m,onClick:d},l,{className:(0,i.Z)("tabs__item",b.tabItem,l?.className,{"tabs__item--active":r===t})}),n??t)})))}function w(e){let{lazy:t,children:n,selectedValue:a}=e;const i=(Array.isArray(n)?n:[n]).filter(Boolean);if(t){const e=i.find((e=>e.props.value===a));return e?(0,o.cloneElement)(e,{className:"margin-top--md"}):null}return o.createElement("div",{className:"margin-top--md"},i.map(((e,t)=>(0,o.cloneElement)(e,{key:t,hidden:e.props.value!==a}))))}function y(e){const t=k(e);return o.createElement("div",{className:(0,i.Z)("tabs-container",b.tabList)},o.createElement(f,(0,a.Z)({},e,t)),o.createElement(w,(0,a.Z)({},e,t)))}function v(e){const t=(0,g.Z)();return o.createElement(y,(0,a.Z)({key:String(t)},e))}},3155:(e,t,n)=>{n.d(t,{Z:()=>x});var a=n(7462),o=n(7294),i=n(2389),l=n(6010),r=n(6412),s=n(5281),c=n(7016);const u={codeBlockContainer:"codeBlockContainer_APcc"};function p(e){let{as:t,...n}=e;const i=(0,r.p)(),p=(0,c.QC)(i);return o.createElement(t,(0,a.Z)({},n,{style:p,className:(0,l.Z)(n.className,u.codeBlockContainer,s.k.common.codeBlock)}))}const d={codeBlockContent:"codeBlockContent_m3Ux",codeBlockTitle:"codeBlockTitle_P25_",codeBlock:"codeBlock_qGQc",codeBlockStandalone:"codeBlockStandalone_zC50",codeBlockLines:"codeBlockLines_p187",codeBlockLinesWithNumbering:"codeBlockLinesWithNumbering_OFgW",buttonGroup:"buttonGroup_6DOT"};function m(e){let{children:t,className:n}=e;return o.createElement(p,{as:"pre",tabIndex:0,className:(0,l.Z)(d.codeBlockStandalone,"thin-scrollbar",n)},o.createElement("code",{className:d.codeBlockLines},t))}var h=n(6668),k=n(5448),g=n(3746);const b={codeLine:"codeLine_iPqp",codeLineNumber:"codeLineNumber_F4P7",codeLineContent:"codeLineContent_pOih"};var f=n(4996);function w(e){let{line:t,classNames:n,showLineNumbers:i,getLineProps:r,getTokenProps:s}=e;1===t.length&&"\n"===t[0].content&&(t[0].content="");const c=r({line:t,className:(0,l.Z)(n,i&&b.codeLine)}),u=t.map(((e,t)=>o.createElement("span",(0,a.Z)({key:t},s({token:e,key:t})))));return o.createElement("span",c,i?o.createElement(o.Fragment,null,o.createElement("span",{className:b.codeLineNumber}),o.createElement("span",{className:b.codeLineContent},u)):u,o.createElement("br",null))}var y=n(195),v=n(5999),N=n(345),C=n(7666);const T={copyButtonCopied:"copyButtonCopied__QnY",copyButtonIcons:"copyButtonIcons_FhaS",copyButtonIcon:"copyButtonIcon_phi_",copyButtonSuccessIcon:"copyButtonSuccessIcon_FfTR"};function z(e){let{code:t,className:n}=e;const[a,i]=(0,o.useState)(!1),r=(0,o.useRef)(void 0),s=(0,o.useCallback)((()=>{(0,y.Z)(t),i(!0),r.current=window.setTimeout((()=>{i(!1)}),1e3)}),[t]);return(0,o.useEffect)((()=>()=>window.clearTimeout(r.current)),[]),o.createElement("button",{type:"button","aria-label":a?(0,v.I)({id:"theme.CodeBlock.copied",message:"Copied",description:"The copied button label on code blocks"}):(0,v.I)({id:"theme.CodeBlock.copyButtonAriaLabel",message:"Copy code to clipboard",description:"The ARIA label for copy code blocks button"}),title:(0,v.I)({id:"theme.CodeBlock.copy",message:"Copy",description:"The copy button label on code blocks"}),className:(0,l.Z)("clean-btn",n,T.copyButton,a&&T.copyButtonCopied),onClick:s},o.createElement("span",{className:T.copyButtonIcons,"aria-hidden":"true"},o.createElement(N.Z,{className:T.copyButtonIcon}),o.createElement(C.Z,{className:T.copyButtonSuccessIcon})))}var I=n(670);const E={wordWrapButtonIcon:"wordWrapButtonIcon_iowe",wordWrapButtonEnabled:"wordWrapButtonEnabled_gY8A"};function A(e){let{className:t,onClick:n,isEnabled:a}=e;const i=(0,v.I)({id:"theme.CodeBlock.wordWrapToggle",message:"Toggle word wrap",description:"The title attribute for toggle word wrapping button of code block lines"});return o.createElement("button",{type:"button",onClick:n,className:(0,l.Z)("clean-btn",t,a&&E.wordWrapButtonEnabled),"aria-label":i,title:i},o.createElement(I.Z,{className:E.wordWrapButtonIcon,"aria-hidden":"true"}))}function S(e){let{children:t,className:n="",metastring:i,title:s,showLineNumbers:u,language:m}=e;const{prism:{defaultLanguage:b,magicComments:y}}=(0,h.L)(),v=m??(0,c.Vo)(n)??b,N=(0,r.p)(),C=(0,k.F)(),T=(0,c.bc)(i)||s,{lineClassNames:I,code:E}=(0,c.nZ)(t,{metastring:i,language:v,magicComments:y}),S=(0,f.Z)("/",{absolute:!0}).slice(0,-1),x=E.replaceAll("${ABSOLUTE_URL}",S),B=u??(0,c.nt)(i);return o.createElement(p,{as:"div",className:(0,l.Z)(n,v&&!n.includes(`language-${v}`)&&`language-${v}`)},T&&o.createElement("div",{className:d.codeBlockTitle},T),o.createElement("div",{className:d.codeBlockContent},o.createElement(g.ZP,(0,a.Z)({},g.lG,{theme:N,code:x,language:v??"text"}),(e=>{let{className:t,tokens:n,getLineProps:a,getTokenProps:i}=e;return o.createElement("pre",{tabIndex:0,ref:C.codeBlockRef,className:(0,l.Z)(t,d.codeBlock,"thin-scrollbar")},o.createElement("code",{className:(0,l.Z)(d.codeBlockLines,B&&d.codeBlockLinesWithNumbering)},n.map(((e,t)=>o.createElement(w,{key:t,line:e,getLineProps:a,getTokenProps:i,classNames:I[t],showLineNumbers:B})))))})),o.createElement("div",{className:d.buttonGroup},(C.isEnabled||C.isCodeScrollable)&&o.createElement(A,{className:d.codeButton,onClick:()=>C.toggle(),isEnabled:C.isEnabled}),o.createElement(z,{className:d.codeButton,code:x}))))}function x(e){let{children:t,...n}=e;const l=(0,i.Z)(),r=function(e){return o.Children.toArray(e).some((e=>(0,o.isValidElement)(e)))?e:Array.isArray(e)?e.join(""):e}(t),s="string"==typeof r?S:m;return o.createElement(s,(0,a.Z)({key:String(l)},n),r)}},5611:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>u,contentTitle:()=>s,default:()=>h,frontMatter:()=>r,metadata:()=>c,toc:()=>p});var a=n(7462),o=(n(7294),n(3905)),i=(n(3155),n(4866)),l=n(5162);const r={sidebar_position:4,title:"Visual tutorial: IBAC with Istio authorization policies",sidebar_label:"IBAC with Istio authorization policies"},s=void 0,c={unversionedId:"quick-visual-tutorials/visual-ibac-istio-authorization-policies",id:"quick-visual-tutorials/visual-ibac-istio-authorization-policies",title:"Visual tutorial: IBAC with Istio authorization policies",description:"Istio authorization policies are a powerful and flexible tool, but using them to achieve a zero-trust architecture with fine-grained pod-to-pod access control can be difficult to implement and maintain.",source:"@site/docs/quick-visual-tutorials/visual-ibac-istio-authorization-policies.mdx",sourceDirName:"quick-visual-tutorials",slug:"/quick-visual-tutorials/visual-ibac-istio-authorization-policies",permalink:"/quick-visual-tutorials/visual-ibac-istio-authorization-policies",draft:!1,editUrl:"https://github.com/otterize/docs/edit/main/docs/quick-visual-tutorials/visual-ibac-istio-authorization-policies.mdx",tags:[],version:"current",sidebarPosition:4,frontMatter:{sidebar_position:4,title:"Visual tutorial: IBAC with Istio authorization policies",sidebar_label:"IBAC with Istio authorization policies"},sidebar:"docSidebar",previous:{title:"IBAC for Kafka in Kubernetes",permalink:"/quick-visual-tutorials/visual-ibac-kafka-k8s"},next:{title:"Protecting one service with network policies",permalink:"/guides/protect-1-service-network-policies"}},u={},p=[{value:"Prerequisites",id:"prerequisites",level:2},{value:"Install and configure Istio",id:"install-and-configure-istio",level:2},{value:"Deploy demo to simulate traffic",id:"deploy-demo-to-simulate-traffic",level:2},{value:"Seeing the access graph",id:"seeing-the-access-graph",level:2},{value:"Try out IBAC with shadow mode",id:"try-out-ibac-with-shadow-mode",level:2},{value:"Choose a first service to protect",id:"choose-a-first-service-to-protect",level:2},{value:"Declare your intentions!",id:"declare-your-intentions",level:2},{value:"Declare more intents",id:"declare-more-intents",level:3},{value:"Optional: protect everything easily",id:"optional-protect-everything-easily",level:3},{value:"Enable enforcement",id:"enable-enforcement",level:2},{value:"What&#39;s next",id:"whats-next",level:2},{value:"Teardown",id:"teardown",level:2}],d={toc:p},m="wrapper";function h(e){let{components:t,...r}=e;return(0,o.kt)(m,(0,a.Z)({},d,r,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"Istio authorization policies are a powerful and flexible tool, but using them to achieve a zero-trust architecture with fine-grained pod-to-pod access control can be difficult to implement and maintain."),(0,o.kt)("p",null,"In this tutorial, we will show you how to roll out Istio authorization policies with intent-based access control (IBAC).\nWith IBAC, you won't need to manually keep track of pod labels or service accounts. You won't need to manage Istio authorization policies at all ","\u2014"," they'll be generated and managed automatically. We'll even show you how to generate policies for all discovered traffic in the cluster with just one command."),(0,o.kt)("p",null,"By the end of this tutorial, each server in the cluster will only allow the incoming calls declared by client services in their client intents files, and block any undeclared (unintended) calls. Call declarations, and the authorization policies they'll generate, will be specific not just down to the server but also to the HTTP path and method."),(0,o.kt)("p",null,"All the capabilities of IBAC for Istio are within Otterize OSS, while the access graph in Otterize Cloud will guide us\nvisually in these steps and support us in the process of zero trust adoption in our cluster without breaking anything."),(0,o.kt)("p",null,"You will:"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"Install Otterize OSS in your Kubernetes cluster, integrated to your Otterize Cloud account."),(0,o.kt)("li",{parentName:"ol"},"Install and configure Istio into your cluster."),(0,o.kt)("li",{parentName:"ol"},"Deploy, as in previous tutorials, a set of services based on the ",(0,o.kt)("a",{parentName:"li",href:"https://github.com/GoogleCloudPlatform/microservices-demo"},"Google microservices demo"),"\n(a simple e-commerce application) to your Kubernetes cluster."),(0,o.kt)("li",{parentName:"ol"},"View, within Otterize Cloud, the traffic in your cluster."),(0,o.kt)("li",{parentName:"ol"},"Declare one intent in your cluster just to see how the generated authorization policies affect the cluster."),(0,o.kt)("li",{parentName:"ol"},"Generate client intents for all traffic in the cluster to achieve zero trust in one command.")),(0,o.kt)("h2",{id:"prerequisites"},"Prerequisites"),(0,o.kt)("details",null,(0,o.kt)("summary",null,"Prepare a Kubernetes cluster"),(0,o.kt)("p",null,"Before you start, you'll need a Kubernetes cluster. Having a cluster with a ",(0,o.kt)("a",{parentName:"p",href:"https://kubernetes.io/docs/concepts/extend-kubernetes/compute-storage-net/network-plugins/"},"CNI")," that supports ",(0,o.kt)("a",{parentName:"p",href:"https://kubernetes.io/docs/concepts/services-networking/network-policies/"},"NetworkPolicies")," isn't required for this tutorial, but is recommended so that your cluster works with other tutorials."),(0,o.kt)("p",null,"Below are instructions for setting up a Kubernetes cluster with network policies.\nIf you don't have a cluster already, we recommend starting out with a Minikube cluster."),(0,o.kt)(i.Z,{groupId:"cni",mdxType:"Tabs"},(0,o.kt)(l.Z,{value:"minikube",label:"Minikube",mdxType:"TabItem"},(0,o.kt)("p",null,"If you don't have the Minikube CLI, first ",(0,o.kt)("a",{parentName:"p",href:"https://minikube.sigs.k8s.io/docs/start/"},"install it"),". "),(0,o.kt)("p",null,"Then start your Minikube cluster with Calico, in order to enforce network policies."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"minikube start --cpus=4 --memory 4096 --disk-size 32g --cni=calico\n")),(0,o.kt)("p",null,"The increased CPU, memory and disk resource allocations are required to be able to deploy the ecommerce app used in the visual tutorials successfully.")),(0,o.kt)(l.Z,{value:"gke",label:"Google GKE",mdxType:"TabItem"},(0,o.kt)("a",{href:"https://cloud.google.com/kubernetes-engine/docs/how-to/network-policy#gcloud"},"Visit the official documentation"),", or follow the instructions below:",(0,o.kt)(i.Z,{mdxType:"Tabs"},(0,o.kt)(l.Z,{value:"cli",label:"gcloud CLI",mdxType:"TabItem"},(0,o.kt)("p",null,"To use the gcloud CLI for this tutorial, first ",(0,o.kt)("a",{parentName:"p",href:"https://cloud.google.com/sdk/docs/install"},"install")," and then\n",(0,o.kt)("a",{parentName:"p",href:"https://cloud.google.com/sdk/docs/initializing"},"initialize")," it."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},(0,o.kt)("em",{parentName:"strong"},"To enable network policy enforcement when creating a new cluster:"))),(0,o.kt)("p",null,"Run the following command:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"gcloud container clusters create CLUSTER_NAME --enable-network-policy --zone=ZONE\n")),(0,o.kt)("p",null,"(Replace ",(0,o.kt)("inlineCode",{parentName:"p"},"CLUSTER_NAME")," with the name of the new cluster and ",(0,o.kt)("inlineCode",{parentName:"p"},"ZONE")," with your zone.)"),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},(0,o.kt)("em",{parentName:"strong"},"To enable network policy enforcement for an existing cluster, perform the following tasks:"))),(0,o.kt)("p",null,"Run the following command to enable the add-on:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"gcloud container clusters update CLUSTER_NAME --update-addons=NetworkPolicy=ENABLED\n")),(0,o.kt)("p",null,"(Replace ",(0,o.kt)("inlineCode",{parentName:"p"},"CLUSTER_NAME")," with the name of the cluster.)"),(0,o.kt)("p",null,"Then enable network policy enforcement on your cluster, re-creating your cluster's node pools with network policy enforcement enabled:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"gcloud container clusters update CLUSTER_NAME --enable-network-policy\n")),(0,o.kt)("p",null,"(Replace ",(0,o.kt)("inlineCode",{parentName:"p"},"CLUSTER_NAME")," with the name of the cluster.)")),(0,o.kt)(l.Z,{value:"console",label:"Console",mdxType:"TabItem"},(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},(0,o.kt)("em",{parentName:"strong"},"To enable network policy enforcement when creating a new cluster:"))),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Go to the Google Kubernetes Engine page in the Google Cloud console.\nThe remaining steps will appear automatically in the Google Cloud console.")),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"On the Google Kubernetes Engine page, click Create.")),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Configure your cluster as desired.")),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"From the navigation pane, under Cluster, click Networking.")),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Select the checkbox to Enable network policy.")),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Click Create."))),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},(0,o.kt)("em",{parentName:"strong"},"To enable network policy enforcement for an existing cluster:"))),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Go to the Google Kubernetes Engine page in the Google Cloud console. The remaining steps will appear automatically in the Google Cloud console.")),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"In the cluster list, click the name of the cluster you want to modify.")),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Under Networking, in the Network policy field, click Edit network policy.")),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Select the checkbox to Enable network policy for master and click Save Changes.")),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Wait for your changes to apply, and then click Edit network policy again.")),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Select the checkbox to Enable network policy for nodes.")),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Click Save Changes.")))))),(0,o.kt)(l.Z,{value:"eks",label:"AWS EKS",mdxType:"TabItem"},(0,o.kt)("p",null,"Starting August 29, 2023, ",(0,o.kt)("a",{parentName:"p",href:"https://aws.amazon.com/blogs/containers/amazon-vpc-cni-now-supports-kubernetes-network-policies"},"you can configure the built-in VPC CNI add-on to enable network policy support"),".\nTo spin up a new cluster, use the following ",(0,o.kt)("inlineCode",{parentName:"p"},"eksctl")," ",(0,o.kt)("inlineCode",{parentName:"p"},"ClusterConfig"),", and save it to a file called ",(0,o.kt)("inlineCode",{parentName:"p"},"cluster.yaml"),"."),(0,o.kt)("p",null,"Spin up the cluster using ",(0,o.kt)("inlineCode",{parentName:"p"},"eksctl create cluster -f cluster.yaml"),". This will spin up a cluster called ",(0,o.kt)("inlineCode",{parentName:"p"},"network-policy-demo")," in ",(0,o.kt)("inlineCode",{parentName:"p"},"us-west-2"),"."),(0,o.kt)("p",null,"The important bit is the configuration for the VPC CNI addon:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml"},'    configurationValues: |-\n       # highlight-next-line\n      enableNetworkPolicy: "true"\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml"},'apiVersion: eksctl.io/v1alpha5\nkind: ClusterConfig\n\nmetadata:\n  name: network-policy-demo\n  version: "1.27"\n  region: us-west-2\n\niam:\n  withOIDC: true\n\nvpc:\n  clusterEndpoints:\n    publicAccess: true\n    privateAccess: true\n\naddons:\n  - name: vpc-cni\n    version: 1.14.0\n    attachPolicyARNs: #optional\n    - arn:aws:iam::aws:policy/AmazonEKS_CNI_Policy \n    configurationValues: |-\n       # highlight-next-line\n      enableNetworkPolicy: "true"\n  - name: coredns\n  - name: kube-proxy\n\nmanagedNodeGroups:\n  - name: x86-al2-on-demand\n    amiFamily: AmazonLinux2\n    instanceTypes: [ "m6i.xlarge", "m6a.xlarge" ]\n    minSize: 0\n    desiredCapacity: 2\n    maxSize: 6\n    privateNetworking: true\n    disableIMDSv1: true\n    volumeSize: 100\n    volumeType: gp3\n    volumeEncrypted: true\n    tags:\n      team: "eks"\n')),(0,o.kt)("p",null,"For guides that deploy the larger set of services, Kafka and ZooKeeper are also deployed, and you will also need the EBS CSI driver to accommodate their storage needs. ",(0,o.kt)("a",{parentName:"p",href:"https://docs.aws.amazon.com/eks/latest/userguide/managing-ebs-csi.html"},"Follow the AWS guide for the EBS CSI add-on to do so."),"\nIf you're not using the VPC CNI, you can set up the Calico network policy controller using the following instructions:"),(0,o.kt)("a",{href:"https://docs.aws.amazon.com/eks/latest/userguide/calico.html"},"Visit the official documentation"),", or follow the instructions below:",(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"Spin up an ",(0,o.kt)("a",{parentName:"li",href:"https://docs.aws.amazon.com/eks/latest/userguide/create-cluster.html"},"EKS cluster")," using the console, AWS CLI or ",(0,o.kt)("inlineCode",{parentName:"li"},"eksctl"),"."),(0,o.kt)("li",{parentName:"ol"},"Install Calico for network policy enforcement, without replacing the CNI:")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"kubectl apply -f https://raw.githubusercontent.com/aws/amazon-vpc-cni-k8s/v1.12.6/config/master/calico-operator.yaml\nkubectl apply -f https://raw.githubusercontent.com/aws/amazon-vpc-cni-k8s/v1.12.6/config/master/calico-crs.yaml\n"))),(0,o.kt)(l.Z,{value:"aks",label:"Azure AKS",mdxType:"TabItem"},(0,o.kt)("p",null,"You can set up an AKS cluster using this ",(0,o.kt)("a",{parentName:"p",href:"https://learn.microsoft.com/en-us/azure/aks/learn/quick-kubernetes-deploy-cli"},"guide"),"."),(0,o.kt)("p",null,"For network policy support, no setup is required: Azure AKS comes with a built-in network policy implementation called Azure Network Policy Manager. You can choose whether you'd like to use this option or Calico when you create a cluster."),(0,o.kt)("a",{href:"https://learn.microsoft.com/en-us/azure/aks/use-network-policies"}," Read more at the official documentation site"),"."))),(0,o.kt)("details",null,(0,o.kt)("summary",null,"Create an Otterize Cloud account"),(0,o.kt)("p",null,"If you don't already have an account, browse to ",(0,o.kt)("a",{parentName:"p",href:"https://app.otterize.com"},"https://app.otterize.com")," to set one up."),(0,o.kt)("p",null,"If someone in your team has already created an org in Otterize Cloud, and invited you (using your email address), you may see an invitation to accept."),(0,o.kt)("p",null,"Otherwise, you'll create a new org, which you can later rename, and invite your teammates to join you there.")),(0,o.kt)("details",null,(0,o.kt)("summary",null,"Install Otterize OSS "),(0,o.kt)("p",null,'If no Kubernetes clusters are connected to your account, click the "Connect your cluster" button to:'),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"Create a Cloud cluster object, specifying its name and the name of an environment to which all namespaces in that cluster will belong, by default."),(0,o.kt)("li",{parentName:"ol"},'Connect it with your actual Kubernetes cluster, by clicking on the "Connection guide ',"\u2192","\" link and running the Helm commands shown there. You'll want to use ",(0,o.kt)("inlineCode",{parentName:"li"},"mode=defaultShadow")," so you're in shadow mode on every server until you're ready to protect it.")),(0,o.kt)("details",null,(0,o.kt)("summary",null,"More details, if you're curious"),(0,o.kt)("p",null,"Connecting your cluster simply entails installing Otterize OSS via Helm, using credentials from your account so Otterize OSS can report information needed to visualize the cluster."),(0,o.kt)("p",null,"The credentials will already be inlined into the Helm command shown in the Cloud UI, so you just need to copy that line and run it from your shell.\nIf you don't give it the Cloud credentials, Otterize OSS will run fully standalone in your cluster ","\u2014"," you just won't have the visualization in Otterize Cloud."),(0,o.kt)("p",null,'The Helm command shown in the Cloud UI also includes flags to turn off enforcement: Otterize OSS will be running in "shadow mode," meaning that it will not create network policies to restrict pod-to-pod traffic, or create Kafka ACLs to control access to Kafka topics. Instead, it will report to Otterize Cloud what ',(0,o.kt)("strong",{parentName:"p"},"would")," happen if enforcement were to be enabled, guiding you to implement IBAC without blocking intended access."))),(0,o.kt)("details",null,(0,o.kt)("summary",null,"Install the Otterize CLI"),(0,o.kt)(i.Z,{groupId:"operating-systems",mdxType:"Tabs"},(0,o.kt)(l.Z,{value:"mac",label:"Mac",default:!0,mdxType:"TabItem"},(0,o.kt)(i.Z,{mdxType:"Tabs"},(0,o.kt)(l.Z,{value:"Brew",label:"Brew",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"brew install otterize/otterize/otterize-cli\n"))),(0,o.kt)(l.Z,{value:"Apple Silicon",label:"Apple Silicon",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"curl -LJO https://get.otterize.com/otterize-cli/v0.1.30/otterize_macOS_arm64_notarized.zip\ntar xf otterize_macOS_arm64_notarized.zip\nsudo cp otterize /usr/local/bin  # optionally move to PATH\n"))),(0,o.kt)(l.Z,{value:"Intel 64-bit",label:"Intel 64-bit",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"curl -LJO https://get.otterize.com/otterize-cli/v0.1.30/otterize_macOS_x86_64_notarized.zip\ntar xf otterize_macOS_x86_64_notarized.zip\nsudo cp otterize /usr/local/bin  # optionally move to PATH\n"))))),(0,o.kt)(l.Z,{value:"windows",label:"Windows",mdxType:"TabItem"},(0,o.kt)(i.Z,{mdxType:"Tabs"},(0,o.kt)(l.Z,{value:"Scoop",label:"Scoop",default:!0,mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-PowerShell"},"scoop bucket add otterize-cli https://github.com/otterize/scoop-otterize-cli\nscoop update\nscoop install otterize-cli\n"))),(0,o.kt)(l.Z,{value:"64-bit",label:"64-bit",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-PowerShell"},"Invoke-WebRequest -Uri https://get.otterize.com/otterize-cli/v0.1.30/otterize_windows_x86_64.zip -OutFile otterize_Windows_x86_64.zip\nExpand-Archive otterize_Windows_x86_64.zip -DestinationPath .\n# optionally move to PATH\n"))))),(0,o.kt)(l.Z,{value:"linux",label:"Linux",mdxType:"TabItem"},(0,o.kt)(i.Z,{mdxType:"Tabs"},(0,o.kt)(l.Z,{value:"64-bit",label:"64-bit",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"wget https://get.otterize.com/otterize-cli/v0.1.30/otterize_linux_x86_64.tar.gz\ntar xf otterize_linux_x86_64.tar.gz\nsudo cp otterize /usr/local/bin  # optionally move to PATH\n")))))),(0,o.kt)("p",null,"More variants are available at the ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/otterize/otterize-cli/releases"},"GitHub Releases page"),".")),(0,o.kt)("h2",{id:"install-and-configure-istio"},"Install and configure Istio"),(0,o.kt)("details",null,(0,o.kt)("summary",null,"Install Istio in the cluster via Helm"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-shell"},"helm repo add istio https://istio-release.storage.googleapis.com/charts\nhelm repo update\nhelm install istio-base istio/base -n istio-system --create-namespace\nhelm install istiod istio/istiod -n istio-system --wait\n"))),(0,o.kt)("admonition",{type:"tip"},(0,o.kt)("p",{parentName:"admonition"},"HTTP request paths and methods aren't exported in Envoy's connection metrics by default, but we do want to capture those\ndetails when creating the network map. That way we not only have better visibility of the calling patterns,\ne.g. in the access graph, but we can also use that information to automatically capture fine-grained intents and\nuse them to generate Istio authorization policies.")),(0,o.kt)("details",null,(0,o.kt)("summary",null,"Enhance Istio exported metrics with HTTP methods and request paths"),(0,o.kt)("p",null,"Apply this configuration in the ",(0,o.kt)("inlineCode",{parentName:"p"},"istio-system")," namespace, propagating it to all namespaces covered by the mesh."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"kubectl apply -f ${ABSOLUTE_URL}/code-examples/network-mapper/istio-telemetry-enablement.yaml\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml"},"apiVersion: telemetry.istio.io/v1alpha1\nkind: Telemetry\nmetadata:\n  name: mesh-default\n  namespace: istio-system\nspec:\n  accessLogging:\n    - providers:\n        - name: envoy\n  metrics:\n    - providers:\n        - name: prometheus\n      overrides:\n        - tagOverrides:\n            request_method:\n              value: request.method\n            request_path:\n              value: request.path\n"))),(0,o.kt)("h2",{id:"deploy-demo-to-simulate-traffic"},"Deploy demo to simulate traffic"),(0,o.kt)("details",null,(0,o.kt)("summary",null,"Create a namespace for our demo application and label it for Istio injection"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"kubectl create namespace otterize-visual-tutorial-istio\nkubectl label namespace otterize-visual-tutorial-istio istio-injection=enabled\n"))),(0,o.kt)("details",null,(0,o.kt)("summary",null,"Deploy the demo set of services"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"kubectl apply -n otterize-visual-tutorial-istio -f ${ABSOLUTE_URL}/code-examples/ibac-for-istio/demo-app.yaml\n"))),(0,o.kt)("h2",{id:"seeing-the-access-graph"},"Seeing the access graph"),(0,o.kt)("p",null,"In the Otterize Cloud web app, within the ",(0,o.kt)("a",{parentName:"p",href:"https://app.otterize.com/clusters"},"Clusters tab"),", your cluster should be displaying all three Otterize OSS\noperators ","\u2014"," the intents operator, network mapper, and credentials operator ","\u2014"," in the green connected state."),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"Access graph",src:n(7084).Z,width:"1584",height:"338"})),(0,o.kt)("p",null,"Now, let's head back to the ",(0,o.kt)("a",{parentName:"p",href:"https://app.otterize.com/access-graph"},"access graph"),". If necessary, make sure to select your cluster from the dropdown menu.\nYou should see the map for the demo running in your cluster:"),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"Access graph",src:n(6088).Z,width:"1747",height:"1383"})),(0,o.kt)("p",null,"Each service is shown as a node in the access graph, while the dashed lines (edges) connecting the services show access between them, as detected by the network mapper."),(0,o.kt)("p",null,"The lines are dashed because the client services are missing intent declarations: we've ",(0,o.kt)("em",{parentName:"p"},"discovered")," their intents to call the servers, but they haven't ",(0,o.kt)("em",{parentName:"p"},"declared")," those intents."),(0,o.kt)("p",null,'Otterize can configure several access control mechanisms, such as network policies and Kafka ACLs, and the access graph can take into account their combined state. But for this demo, we\'re only using Istio authorization policies, so let\'s adjust the access graph view to only take these Istio policies into account: in the Istio policies section at the top, toggle on "Use in access graph"; and in the sections for network\npolicies and Kafka ACLs, toggle off "Use in access graph".'),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"Access graph",src:n(9258).Z,width:"762",height:"130"})),(0,o.kt)("p",null,"Finally, let's filter out all but the ",(0,o.kt)("inlineCode",{parentName:"p"},"otterize-visual-tutorial-istio")," namespace, as that's where the functional services are running. Select that namespace from the namespace filter at the top."),(0,o.kt)("h2",{id:"try-out-ibac-with-shadow-mode"},"Try out IBAC with shadow mode"),(0,o.kt)("p",null,"Our mission in this tutorial is to achieve zero trust in our cluster, but we don't want to break anything in the process. So we'll start off by rolling out IBAC for just one service: only it will be protected from any unauthorized access."),(0,o.kt)("p",null,"Even then, one of the biggest challenges in rolling out zero trust is that Istio authorization policies, like network policies and Kafka ACLs, can't let us know what would be blocked ",(0,o.kt)("em",{parentName:"p"},"before")," we actually block it."),(0,o.kt)("p",null,'Otterize solves this problem by providing a "shadow mode" enforcement. In shadow mode, Otterize doesn\'t actually generate\nIstio authorization policies from client intents declarations, so nothing is actually blocked.\nBut Otterize still sees any intent declarations that ',(0,o.kt)("em",{parentName:"p"},"would")," generate policies, so the access graph can preview what access would be blocked or enabled if we were to generate policies."),(0,o.kt)("h2",{id:"choose-a-first-service-to-protect"},"Choose a first service to protect"),(0,o.kt)("p",null,"Let's pick one service and manually protect it, before automating the process for the whole cluster.\nWe will start with the ",(0,o.kt)("inlineCode",{parentName:"p"},"recommendationservice"),". Find it in the access graph. If you have a large graph, you can always type its name in the search box on the left and select it to bring it into view. You can also zoom in to see it larger:"),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"Access graph",src:n(7796).Z,width:"1704",height:"883"})),(0,o.kt)("p",null,"Click on the ",(0,o.kt)("inlineCode",{parentName:"p"},"recommendationservice")," to see more details:"),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"Access graph",src:n(5886).Z,width:"655",height:"529"})),(0,o.kt)("p",null,"At the  bottom of this panel, you can see it as a server (on the left) receiving requests, and as a client (on the right) sending requests."),(0,o.kt)("p",null,"As a server, the access graph tells you it's currently unprotected. Why?"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"There is no default ",(0,o.kt)("inlineCode",{parentName:"li"},"allow nothing"),' authorization policy configured for the cluster, as we informed the graph in the "Istio policies" section at the top right. That\'s appropriate for our situation: we want to roll out protection one service at a time, without breaking access to the others.'),(0,o.kt)("li",{parentName:"ul"},"The first authorization policy would protect this server, but no such policies would be created for it right now if enforcement were turned on, since no clients have declared their intents to call it. We'll do that in the next step.")),(0,o.kt)("p",null,"At the very bottom of the server section, we can see that this service is called by the ",(0,o.kt)("inlineCode",{parentName:"p"},"frontend"),"\nservice, which uses the ",(0,o.kt)("inlineCode",{parentName:"p"},"GET")," method to access the ",(0,o.kt)("inlineCode",{parentName:"p"},"/recommendations")," resource. Let's click the dashed line from ",(0,o.kt)("inlineCode",{parentName:"p"},"frontend"),"\nto ",(0,o.kt)("inlineCode",{parentName:"p"},"recommendationservice")," to see the details of the access:"),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"Access graph",src:n(1500).Z,width:"567",height:"271"})),(0,o.kt)("p",null,"We see that the network mapper ",(0,o.kt)("em",{parentName:"p"},"discovered")," the intent by the ",(0,o.kt)("inlineCode",{parentName:"p"},"frontend")," to ",(0,o.kt)("inlineCode",{parentName:"p"},"GET")," ",(0,o.kt)("inlineCode",{parentName:"p"},"/recommendations")," on the ",(0,o.kt)("inlineCode",{parentName:"p"},"recommendationservice"),", but the ",(0,o.kt)("inlineCode",{parentName:"p"},"frontend")," did not ",(0,o.kt)("em",{parentName:"p"},"declare")," it."),(0,o.kt)("p",null,"(Note also that the ",(0,o.kt)("inlineCode",{parentName:"p"},"recommendationservice")," ",(0,o.kt)("em",{parentName:"p"},"as a client")," is also not blocked by any authorization policy.)"),(0,o.kt)("h2",{id:"declare-your-intentions"},"Declare your intentions!"),(0,o.kt)("p",null,"As suggested by the access graph, we will now take the intent we just ",(0,o.kt)("em",{parentName:"p"},"discovered")," and ",(0,o.kt)("em",{parentName:"p"},"declare")," that the ",(0,o.kt)("inlineCode",{parentName:"p"},"frontend")," service intends to\ncall the ",(0,o.kt)("inlineCode",{parentName:"p"},"recommendationservice")," via ",(0,o.kt)("inlineCode",{parentName:"p"},"GET")," requests to the HTTP resource at ",(0,o.kt)("inlineCode",{parentName:"p"},"/recommendations"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml"},"apiVersion: k8s.otterize.com/v1alpha2\nkind: ClientIntents\nmetadata:\n  name: frontend\nspec:\n  service:\n    name: frontend\n  calls:\n    - name: recommendationservice\n      type: http\n      resources:\n        - path: /recommendations\n          methods:\n            - GET\n")),(0,o.kt)("p",null,"We expect this will eventually provide secure access: ",(0,o.kt)("strong",{parentName:"p"},"allowing")," the intended access from the ",(0,o.kt)("inlineCode",{parentName:"p"},"frontend"),", while ",(0,o.kt)("strong",{parentName:"p"},"protecting")," the ",(0,o.kt)("inlineCode",{parentName:"p"},"recommendationservice")," from unintended access (since it will now have an authorization policy on it).\nWhy eventually? Because we'll still need to go from shadow mode to actual enforcement, after getting reassured in shadow mode that intentional calls won't be blocked."),(0,o.kt)("p",null,"Apply the above client intents file with:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"kubectl apply -n otterize-visual-tutorial-istio -f ${ABSOLUTE_URL}/code-examples/ibac-for-istio/phase-1.yaml\n")),(0,o.kt)("p",null,"Look at the access graph again:"),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"Access graph",src:n(7110).Z,width:"1767",height:"940"})),(0,o.kt)("p",null,"The green line from ",(0,o.kt)("inlineCode",{parentName:"p"},"frontend")," to ",(0,o.kt)("inlineCode",{parentName:"p"},"recommendationservice")," is no longer dashed, but rather ",(0,o.kt)("strong",{parentName:"p"},"solid"),": the desired access we discovered has now been declared."),(0,o.kt)("p",null,"Click on that solid ",(0,o.kt)("inlineCode",{parentName:"p"},"frontend")," ","\u2192"," ",(0,o.kt)("inlineCode",{parentName:"p"},"recommendationservice")," line:"),(0,o.kt)("img",{src:"/img/quick-tutorials/istio-visual-tutorial/frontend-recommendation-applied.png",alt:"Discovered intents",width:"600"}),(0,o.kt)("p",null,"We can see that:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"The ",(0,o.kt)("em",{parentName:"li"},"discovered")," intent to access is now also ",(0,o.kt)("em",{parentName:"li"},"declared"),", and as a result..."),(0,o.kt)("li",{parentName:"ul"},"...this call will be guaranteed access even after enforcement is turned on: the arrow is now ",(0,o.kt)("strong",{parentName:"li"},"solid")," green.")),(0,o.kt)("p",null,"Click on the ",(0,o.kt)("inlineCode",{parentName:"p"},"recommendationservice")," itself:"),(0,o.kt)("img",{src:"/img/quick-tutorials/istio-visual-tutorial/recommendation-access-state.png",alt:"Discovered intents",width:"600"}),(0,o.kt)("p",null,"The access graph shows us:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"This service is still not currently protected: after all, we're in shadow mode, without enforcement, so there are no authorization policies blocking unintended access."),(0,o.kt)("li",{parentName:"ul"},'The "Istio policies" tag indicates that specifically it\'s not currently protected by Istio authorization policies. Had we been using other access controls, you would see the protection status for those too.'),(0,o.kt)("li",{parentName:"ul"},"There is no longer a warning about the ",(0,o.kt)("inlineCode",{parentName:"li"},"recommendationservice")," remaining unprotected once enforcement is turned on."),(0,o.kt)("li",{parentName:"ul"},"From this server's perspective, all's ready to activate enforcement.")),(0,o.kt)("p",null,"We now have ",(0,o.kt)("strong",{parentName:"p"},"a green light for turning on enforcement")," and protecting this service from any unintended calls without breaking its intended clients."),(0,o.kt)("admonition",{title:"Ready to enforce?",type:"tip"},(0,o.kt)("p",{parentName:"admonition"},"We could certainly turn on enforcement now."),(0,o.kt)("p",{parentName:"admonition"},"But instead, let's first protect another service, just to show how the access graph would warn us if we're not ready to turn on enforcement.")),(0,o.kt)("h3",{id:"declare-more-intents"},"Declare more intents"),(0,o.kt)("p",null,"We can see in the access graph that the ",(0,o.kt)("inlineCode",{parentName:"p"},"recommendationservice")," in turn calls the ",(0,o.kt)("inlineCode",{parentName:"p"},"productcatalogservice"),", sending ",(0,o.kt)("inlineCode",{parentName:"p"},"GET")," requests to the resource at ",(0,o.kt)("inlineCode",{parentName:"p"},"/similar-products"),", so let's declare that intent:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml"},"apiVersion: k8s.otterize.com/v1alpha2\nkind: ClientIntents\nmetadata:\n  name: recommendationservice\nspec:\n  service:\n    name: recommendationservice\n  calls:\n    - name: productcatalogservice\n      type: http\n      resources:\n        - path: /similar-products\n          methods:\n            - GET\n")),(0,o.kt)("p",null,"Apply this intents file with:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"kubectl apply -n otterize-visual-tutorial-istio -f ${ABSOLUTE_URL}/code-examples/istio-visual-tutorial/phase-2.yaml\n")),(0,o.kt)("p",null,"Look at the access graph again:"),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"Access graph",src:n(2380).Z,width:"1401",height:"640"})),(0,o.kt)("p",null,"As before, the line from ",(0,o.kt)("inlineCode",{parentName:"p"},"recommendationservice")," ","\u2192"," ",(0,o.kt)("inlineCode",{parentName:"p"},"productcatalogservice")," is now solid green line, with no warnings. That's what we expect when we properly declare a discovered intent."),(0,o.kt)("p",null,"But two other lines, ",(0,o.kt)("inlineCode",{parentName:"p"},"frontend")," ","\u2192"," ",(0,o.kt)("inlineCode",{parentName:"p"},"productcatalogservice")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"checkoutservice")," ","\u2192"," ",(0,o.kt)("inlineCode",{parentName:"p"},"productcatalogservice"),", have turned orange. And a red warning has shown up on the ",(0,o.kt)("inlineCode",{parentName:"p"},"productcatalogservice"),". Why?"),(0,o.kt)("p",null,"Click on one of those orange lines:"),(0,o.kt)("img",{src:"/img/quick-tutorials/istio-visual-tutorial/frontend-productactalogservice-missing-intent.png",alt:"Discovered intents",width:"600"}),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"There is no declaration of the discovered ",(0,o.kt)("inlineCode",{parentName:"li"},"GET /products")," calls from the ",(0,o.kt)("inlineCode",{parentName:"li"},"frontend")," to the ",(0,o.kt)("inlineCode",{parentName:"li"},"productcatalogservice"),"."),(0,o.kt)("li",{parentName:"ul"},"This undeclared access is not blocked ",(0,o.kt)("em",{parentName:"li"},"now")," ","\u2014"," because we're still in shadow mode (otherwise the line would have been red)."),(0,o.kt)("li",{parentName:"ul"},"But access ",(0,o.kt)("em",{parentName:"li"},"would")," be blocked once enforcement is turned on. To prevent that, we're told to declare the intent for this call.")),(0,o.kt)("p",null,"Click on the ",(0,o.kt)("inlineCode",{parentName:"p"},"productcatalogservice")," to read its warnings, and what's there and what's missing:"),(0,o.kt)("img",{src:"/img/quick-tutorials/istio-visual-tutorial/productcatalog-would-block.png",alt:"Discovered intents",width:"600"}),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"We can see it's not protected now, again because we're in shadow mode."),(0,o.kt)("li",{parentName:"ul"},"But we can also see it ",(0,o.kt)("em",{parentName:"li"},"would")," block some clients once protection is enabled."),(0,o.kt)("li",{parentName:"ul"},"We can see that the ",(0,o.kt)("inlineCode",{parentName:"li"},"recommendationservice")," will be allowed to ",(0,o.kt)("inlineCode",{parentName:"li"},"GET /similar-products"),", but no other clients are guaranteed access."),(0,o.kt)("li",{parentName:"ul"},"And there is an explicit warning to apply the missing intents from ",(0,o.kt)("strong",{parentName:"li"},"all")," the clients of the ",(0,o.kt)("inlineCode",{parentName:"li"},"productcatalogservice")," before turning on enforcement.")),(0,o.kt)("p",null,"Let's declare those intents from the ",(0,o.kt)("inlineCode",{parentName:"p"},"frontend")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"checkoutservice")," clients:"),(0,o.kt)(i.Z,{mdxType:"Tabs"},(0,o.kt)(l.Z,{value:"frontend",label:"frontend",default:!0,mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml"},"apiVersion: k8s.otterize.com/v1alpha2\nkind: ClientIntents\nmetadata:\n  name: frontend\nspec:\n  service:\n    name: frontend\n  calls:\n    - name: recommendationservice\n      type: http\n      resources:\n        - path: /recommendations\n          methods:\n            - GET\n    - name: productcatalogservice\n      type: http\n      resources:\n        - path: /products\n          methods:\n            - GET\n"))),(0,o.kt)(l.Z,{value:"checkout-service",label:"checkoutservice",default:!0,mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml"},"apiVersion: k8s.otterize.com/v1alpha2\nkind: ClientIntents\nmetadata:\n  name: checkoutservice\n  namespace: otterize-visual-tutorial-istio\nspec:\n  service:\n    name: checkoutservice\n  calls:\n    - name: productcatalogservice\n      type: http\n      resources:\n        - path: /products\n          methods:\n            - POST\n\n")))),(0,o.kt)("p",null,"Apply these intents files with:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"kubectl apply -n otterize-visual-tutorial-istio -f ${ABSOLUTE_URL}/code-examples/ibac-for-istio/phase-3.yaml\n")),(0,o.kt)("p",null,"Let's go back to the access graph:"),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"Access graph",src:n(3586).Z,width:"2717",height:"1094"})),(0,o.kt)("p",null,"Note that all arrows are now green again; specifically, the ones to the ",(0,o.kt)("inlineCode",{parentName:"p"},"productcatalogservice")," are also solid, indicating all access has been declared."),(0,o.kt)("p",null,"Click on the ",(0,o.kt)("inlineCode",{parentName:"p"},"productcatalogservice"),":"),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"Access graph",src:n(4297).Z,width:"1328",height:"1140"})),(0,o.kt)("p",null,"All is well again:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"The ",(0,o.kt)("inlineCode",{parentName:"li"},"productcatalogservice")," will be protected, without blocking its 3 declared clients, once enforcement is turned on. We have ",(0,o.kt)("strong",{parentName:"li"},"a green light to activate enforcement"),"."),(0,o.kt)("li",{parentName:"ul"},"Each client's access will be limited to the HTTP resource and method declared in its intents file. Clients have the intended access and nothing more (least privilege).")),(0,o.kt)("admonition",{title:"We can now see how to roll out IBAC gradually:",type:"tip"},(0,o.kt)("ol",{parentName:"admonition"},(0,o.kt)("li",{parentName:"ol"},"Pick a service to protect."),(0,o.kt)("li",{parentName:"ol"},"Make sure all its clients declare their intents to call it."),(0,o.kt)("li",{parentName:"ol"},"When you're ready, and the access graph shows green solid arrows without warnings, turn on enforcement.")),(0,o.kt)("p",{parentName:"admonition"},"The access graph and shadow mode allow us to gain confidence by showing what would happen, highlighting any problems, and pointing to their fixes.")),(0,o.kt)("h3",{id:"optional-protect-everything-easily"},"Optional: protect everything easily"),(0,o.kt)("p",null,"Since Otterize already knows the problems and their fixes, could we somehow automatically bootstrap this for the whole cluster and protect all services, without breaking any intended calls? Yes!"),(0,o.kt)("p",null,"The network mapper keeps track of all attempted calls, after all: those are the discovered intents. If you are confident that all intended call patterns have been exercised while the network mapper was running (so it could capture them), and all the calls it saw are intended and appropriate, you can use that information to automatically generate intent declarations and apply them."),(0,o.kt)("p",null,"Let's use the ",(0,o.kt)("a",{parentName:"p",href:"/reference/cli"},"Otterize CLI")," to export all discovered intents as YAML declarations:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"otterize network-mapper export -n otterize-visual-tutorial-istio --output-type dir --output intents\n")),(0,o.kt)("p",null,"You can apply them using:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"kubectl apply -f intents\n")),(0,o.kt)("p",null,"Or, equivalently, just use the already-generated intents files included in this docs location:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"kubectl apply -n otterize-visual-tutorial-istio -f ${ABSOLUTE_URL}/code-examples/ibac-for-istio/all.yaml\n")),(0,o.kt)("details",null,(0,o.kt)("summary",null,"If you are curious, have a look at the intents files generated by this single command:"),(0,o.kt)(i.Z,{mdxType:"Tabs"},(0,o.kt)(l.Z,{value:"frontend",label:"frontend",default:!0,mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml"},"apiVersion: k8s.otterize.com/v1alpha2\nkind: ClientIntents\nmetadata:\n  name: frontend\n  namespace: otterize-visual-tutorial-istio\nspec:\n  service:\n    name: frontend\n  calls:\n    - name: adservice\n      type: http\n      resources:\n        - path: /ads\n          methods:\n            - GET\n    - name: cartservice\n      type: http\n      resources:\n        - path: /items\n          methods:\n            - POST\n            - GET\n    - name: checkoutservice\n      type: http\n      resources:\n        - path: /checkout\n          methods:\n            - POST\n    - name: currencyservice\n      type: http\n      resources:\n        - path: /currency\n          methods:\n            - GET\n    - name: productcatalogservice\n      type: http\n      resources:\n        - path: /products\n          methods:\n            - GET\n    - name: recommendationservice\n      type: http\n      resources:\n        - path: /recommendations\n          methods:\n            - GET\n    - name: shippingservice\n      type: http\n      resources:\n        - path: /shipping\n          methods:\n            - POST\n"))),(0,o.kt)(l.Z,{value:"checkout-service",label:"checkoutservice",default:!0,mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml"},"apiVersion: k8s.otterize.com/v1alpha2\nkind: ClientIntents\nmetadata:\n  name: checkoutservice\n  namespace: otterize-visual-tutorial-istio\nspec:\n  service:\n    name: checkoutservice\n  calls:\n    - name: productcatalogservice\n      type: http\n      resources:\n        - path: /products\n          methods:\n            - POST\n"))),(0,o.kt)(l.Z,{value:"recommendation-service",label:"recommendationservice",default:!0,mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml"},"apiVersion: k8s.otterize.com/v1alpha2\nkind: ClientIntents\nmetadata:\n  name: recommendationservice\n  namespace: otterize-visual-tutorial-istio\nspec:\n  service:\n    name: recommendationservice\n  calls:\n    - name: productcatalogservice\n      type: http\n      resources:\n        - path: /similar-products\n          methods:\n            - GET\n"))),(0,o.kt)(l.Z,{value:"cart-service",label:"cartservice",default:!0,mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml"},"apiVersion: k8s.otterize.com/v1alpha2\nkind: ClientIntents\nmetadata:\n  name: cartservice\n  namespace: otterize-visual-tutorial-istio\nspec:\n  service:\n    name: cartservice\n  calls:\n    - name: redis-cart\n      type: http\n      resources:\n        - path: /items\n          methods:\n            - GET\n            - POST\n"))),(0,o.kt)(l.Z,{value:"load-generator",label:"loadgenerator",default:!0,mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml"},"apiVersion: k8s.otterize.com/v1alpha2\nkind: ClientIntents\nmetadata:\n  name: loadgenerator\n  namespace: otterize-visual-tutorial-istio\nspec:\n  service:\n    name: loadgenerator\n  calls:\n    - name: frontend\n      type: http\n      resources:\n        - path: /\n          methods:\n            - GET\n"))))),(0,o.kt)("p",null,"Look at the access graph again:"),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"Access graph",src:n(2841).Z,width:"1675",height:"1223"})),(0,o.kt)("p",null,"The graph confirms that all services would be protected, and no intended calls would be blocked, once we apply protection."),(0,o.kt)("admonition",{type:"tip"},(0,o.kt)("p",{parentName:"admonition"},"In essence, in one shot, we've declared that all the traffic in the environment where the mapper was running is all the intended traffic: all these calls, and no other calls, should be allowed.")),(0,o.kt)("h2",{id:"enable-enforcement"},"Enable enforcement"),(0,o.kt)("p",null,"With the confidence we've gained, let's enable enforcement (via Istio authorization policies) by upgrading your Otterize installation and setting the Helm chart flag ",(0,o.kt)("inlineCode",{parentName:"p"},"intentsOperator.operator.mode=defaultActive"),"."),(0,o.kt)("p",null,"At the top of the access graph, click the ",(0,o.kt)("strong",{parentName:"p"},"Configure cluster")," button; or in the clusters page, click on the ",(0,o.kt)("strong",{parentName:"p"},"Connection guide ","\u2192")," link for your cluster."),(0,o.kt)("p",null,"Then run the Helm commands shown there, and specifically follow the instructions to install Otterize ",(0,o.kt)("b",null,"with enforcement on")," (use the toggle to make ",(0,o.kt)("inlineCode",{parentName:"p"},"Enforcement mode: active"),")"),(0,o.kt)("p",null,"Let's look at the access graph again:"),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"Access graph",src:n(1247).Z,width:"1658",height:"1201"})),(0,o.kt)("p",null,"Note that all of the servers (the server sides of the services) are shown in green, as protected. And no client call attempts (discovered by the network mapper) are being blocked. This is what a service-to-service zero-trust architecture looks like."),(0,o.kt)("admonition",{title:"How would blocked access attempts look now?",type:"tip"},(0,o.kt)("p",{parentName:"admonition"},"From now on, if a client attempts a server call that wasn't covered by one of the declared intents, that would be discovered by the network mapper and show up as (new) discovered intents. Remember that the network mapper discovers attempted access, not just successful access. In this case, a red line would appear from that client to that server, and a red warning would show up on the server and client, saying: calls from that client are being blocked."),(0,o.kt)("p",{parentName:"admonition"},"That may be because:"),(0,o.kt)("ul",{parentName:"admonition"},(0,o.kt)("li",{parentName:"ul"},"The calls were legitimate, but were missed when intents were generated because they didn't happen when the network mapper was building its map from which the intents were bootstrapped. In that case, you may choose to generate all the intents again, or or just create and apply the new ones manually."),(0,o.kt)("li",{parentName:"ul"},"Or... the client maliciously called this server, but is being blocked by the authorization policies. IBAC has saved the day!"))),(0,o.kt)("details",null,(0,o.kt)("summary",null,"Optional: see the generated authorization policies"),"Otterize automatically generated authorization policies according to your declared intents.",(0,o.kt)("p",null,"To list all generated authorization policies run:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"kubectl get authorizationpolicies.security.istio.io -n otterize-visual-tutorial-istio\n")),(0,o.kt)("p",null,"Let's inspect one of these authorization policies with:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"kubectl get authorizationpolicies.security.istio.io -n otterize-visual-tutorial-istio authorization-policy-to-productcatalogservice-from-checkoutservice.otterize-visual-tutorial-istio -o yaml\n")),(0,o.kt)("p",null,"The result should be:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml"},"apiVersion: security.istio.io/v1\nkind: AuthorizationPolicy\nmetadata:\n  name: authorization-policy-to-productcatalogservice-from-checkoutservice.otterize-visual-tutorial-istio\n  namespace: otterize-visual-tutorial-istio\n...\nspec:\n  rules:\n  - from:\n    - source:\n      principals:\n      - cluster.local/ns/otterize-visual-tutorial-istio/sa/checkoutservice-service-account\n  to:\n    - operation:\n      methods:\n      - POST\n      paths:\n      - /products\n  selector:\n    matchLabels:\n      intents.otterize.com/server: productcatalogservic-otterize-visual-tuto-99a036\n"))),(0,o.kt)("h2",{id:"whats-next"},"What's next"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Learn how to ",(0,o.kt)("a",{parentName:"li",href:"/quick-visual-tutorials/visual-ibac-network-policies"},"roll out IBAC with Kubernetes network policies"),", automatically generating and updating network policies."),(0,o.kt)("li",{parentName:"ul"},"Learn how to ",(0,o.kt)("a",{parentName:"li",href:"/quick-visual-tutorials/visual-ibac-kafka-k8s"},"roll out secure access for Kafka in Kubernetes"),", automating both mTLS for client authentication and the ACLs built into Kafka.")),(0,o.kt)("h2",{id:"teardown"},"Teardown"),(0,o.kt)("p",null,"To remove the deployed demo run:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"kubectl delete -n otterize-vizual-tutorial-istio -f ${ABSOLUTE_URL}/code-examples/ibac-for-istio/all.yaml\nkubectl delete -n otterize-vizual-tutorial-istio -f ${ABSOLUTE_URL}/code-examples/ibac-for-istio/demo-app.yaml\n")))}h.isMDXComponent=!0},9258:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/access-graph-panel-3901b998fef28aea842d3ba59e62142f.png"},7084:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/cluster-connected-287fae3f3769c1091c52ce5bcd357b88.png"},1500:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/frontend-recommendation-phase-0-df02d8d9edb24611bbf34017130b044a.png"},6088:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/phase-0-f967551e9db884c7cfa05270e41b9b00.png"},7110:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/phase-1-331bd512ea9c1ac2dbcd7dca8254d47a.png"},2380:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/phase-2-bcffe0f2e57969ab5b2e0deea67d9628.png"},3586:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/phase-3-f4316c9a546f1f274af57feeea7e9191.png"},2841:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/phase-4-c5f2732ecc5a048a4c4cbfcc99f456de.png"},1247:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/phase-5-98c50c3ccda6f09c8fa54f9fc953df01.png"},4297:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/productcatalog-service-all-green-f101d04b6cf20d0264671a7fe721f514.png"},7796:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/recommendation-graph-phase-0-409c07d2817a49ab072cd7fbf35f7253.png"},5886:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/recommendation-service-phase-0-d1b5ce76e3ed7855fefb5df05fab5c8b.png"}}]);