"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[842],{5162:(e,t,n)=>{n.d(t,{Z:()=>i});var a=n(7294),l=n(6010);const o="tabItem_Ymn6";function i(e){let{children:t,hidden:n,className:i}=e;return a.createElement("div",{role:"tabpanel",className:(0,l.Z)(o,i),hidden:n},t)}},5488:(e,t,n)=>{n.d(t,{Z:()=>d});var a=n(7462),l=n(7294),o=n(6010),i=n(2389),r=n(7392),s=n(7094),p=n(2466);const c="tabList__CuJ",u="tabItem_LNqP";function m(e){var t,n;const{lazy:i,block:m,defaultValue:d,values:k,groupId:h,className:g}=e,w=l.Children.map(e.children,(e=>{if((0,l.isValidElement)(e)&&"value"in e.props)return e;throw new Error("Docusaurus error: Bad <Tabs> child <"+("string"==typeof e.type?e.type:e.type.name)+'>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.')})),y=null!=k?k:w.map((e=>{let{props:{value:t,label:n,attributes:a}}=e;return{value:t,label:n,attributes:a}})),N=(0,r.l)(y,((e,t)=>e.value===t.value));if(N.length>0)throw new Error('Docusaurus error: Duplicate values "'+N.map((e=>e.value)).join(", ")+'" found in <Tabs>. Every value needs to be unique.');const b=null===d?d:null!=(t=null!=d?d:null==(n=w.find((e=>e.props.default)))?void 0:n.props.value)?t:w[0].props.value;if(null!==b&&!y.some((e=>e.value===b)))throw new Error('Docusaurus error: The <Tabs> has a defaultValue "'+b+'" but none of its children has the corresponding value. Available values are: '+y.map((e=>e.value)).join(", ")+". If you intend to show no default tab, use defaultValue={null} instead.");const{tabGroupChoices:f,setTabGroupChoices:v}=(0,s.U)(),[C,T]=(0,l.useState)(b),z=[],{blockElementScrollPositionUntilNextRender:I}=(0,p.o5)();if(null!=h){const e=f[h];null!=e&&e!==C&&y.some((t=>t.value===e))&&T(e)}const x=e=>{const t=e.currentTarget,n=z.indexOf(t),a=y[n].value;a!==C&&(I(t),T(a),null!=h&&v(h,String(a)))},E=e=>{var t;let n=null;switch(e.key){case"ArrowRight":{var a;const t=z.indexOf(e.currentTarget)+1;n=null!=(a=z[t])?a:z[0];break}case"ArrowLeft":{var l;const t=z.indexOf(e.currentTarget)-1;n=null!=(l=z[t])?l:z[z.length-1];break}}null==(t=n)||t.focus()};return l.createElement("div",{className:(0,o.Z)("tabs-container",c)},l.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,o.Z)("tabs",{"tabs--block":m},g)},y.map((e=>{let{value:t,label:n,attributes:i}=e;return l.createElement("li",(0,a.Z)({role:"tab",tabIndex:C===t?0:-1,"aria-selected":C===t,key:t,ref:e=>z.push(e),onKeyDown:E,onFocus:x,onClick:x},i,{className:(0,o.Z)("tabs__item",u,null==i?void 0:i.className,{"tabs__item--active":C===t})}),null!=n?n:t)}))),i?(0,l.cloneElement)(w.filter((e=>e.props.value===C))[0],{className:"margin-top--md"}):l.createElement("div",{className:"margin-top--md"},w.map(((e,t)=>(0,l.cloneElement)(e,{key:t,hidden:e.props.value!==C})))))}function d(e){const t=(0,i.Z)();return l.createElement(m,(0,a.Z)({key:String(t)},e))}},1681:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>s,default:()=>d,frontMatter:()=>r,metadata:()=>p,toc:()=>u});var a=n(7462),l=(n(7294),n(3905)),o=(n(814),n(5488)),i=n(5162);const r={sidebar_position:2,title:"Automate network policies"},s=void 0,p={unversionedId:"quick-tutorials/k8s-network-policies",id:"quick-tutorials/k8s-network-policies",title:"Automate network policies",description:"Otterize automates pod-to-pod access control with network policies, within your cluster.",source:"@site/docs/quick-tutorials/k8s-network-policies.mdx",sourceDirName:"quick-tutorials",slug:"/quick-tutorials/k8s-network-policies",permalink:"/quick-tutorials/k8s-network-policies",draft:!1,editUrl:"https://github.com/otterize/docs/edit/main/docs/quick-tutorials/k8s-network-policies.mdx",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2,title:"Automate network policies"},sidebar:"docSidebar",previous:{title:"Getting started",permalink:"/"},next:{title:"Map your cluster",permalink:"/quick-tutorials/k8s-network-mapper"}},c={},u=[{value:"Prerequisites",id:"prerequisites",level:2},{value:"Deploy the server, client, client-other",id:"deploy-the-server-client-client-other",level:2},{value:"Apply intents",id:"apply-intents",level:2},{value:"Visualize using Otterize Cloud",id:"visualize-using-otterize-cloud",level:3},{value:"See it in action",id:"see-it-in-action",level:3},{value:"What did we accomplish?",id:"what-did-we-accomplish",level:2},{value:"What&#39;s next",id:"whats-next",level:2},{value:"Teardown",id:"teardown",level:2}],m={toc:u};function d(e){let{components:t,...r}=e;return(0,l.kt)("wrapper",(0,a.Z)({},m,r,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("p",null,"Otterize automates pod-to-pod access control with network policies, within your cluster."),(0,l.kt)("p",null,"Instead of managing pod identities, labeling clients, servers and namespaces,\nand manually authoring individual network policies, Otterize implements ",(0,l.kt)("strong",{parentName:"p"},"intent-based access control")," (IBAC).\nYou just declare what calls the client pods intend to make,\nand everything is automatically wired together so only intended calls are allowed."),(0,l.kt)("p",null,"In this tutorial, we will:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Deploy a server pod, and two client pods calling it."),(0,l.kt)("li",{parentName:"ul"},"Declare that the first client intends to call the server."),(0,l.kt)("li",{parentName:"ul"},"See that a network policy was autogenerated to allow just that, and block the (undeclared) calls from the other client.")),(0,l.kt)("h2",{id:"prerequisites"},"Prerequisites"),(0,l.kt)("details",null,(0,l.kt)("summary",null,"Prepare a cluster that supports network policies"),(0,l.kt)("p",null,"Before you start, you need a Kubernetes cluster with a ",(0,l.kt)("a",{parentName:"p",href:"https://kubernetes.io/docs/concepts/extend-kubernetes/compute-storage-net/network-plugins/"},"CNI")," that supports ",(0,l.kt)("a",{parentName:"p",href:"https://kubernetes.io/docs/concepts/services-networking/network-policies/"},"NetworkPolicies"),"."),(0,l.kt)("p",null,"Below are instructions for setting up a cluster with network policies.\nIf you don't have a cluster already, we recommend starting out with a Minikube cluster."),(0,l.kt)(o.Z,{groupId:"cni",mdxType:"Tabs"},(0,l.kt)(i.Z,{value:"minikube",label:"Minikube",mdxType:"TabItem"},"Start your Minikube cluster. ",(0,l.kt)("a",{href:"https://minikube.sigs.k8s.io/docs/start/"},"Don't have the Minikube CLI? Read the installation instructions"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"minikube start --network-plugin=cni\n")),(0,l.kt)("p",null,"Install Calico:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"kubectl apply -f https://raw.githubusercontent.com/projectcalico/calico/v3.24.1/manifests/calico.yaml\n"))),(0,l.kt)(i.Z,{value:"gke",label:"Google GKE",mdxType:"TabItem"},(0,l.kt)("a",{href:"https://cloud.google.com/kubernetes-engine/docs/how-to/network-policy#gcloud"},"Visit the official documentation"),", or follow the instructions below:",(0,l.kt)(o.Z,{mdxType:"Tabs"},(0,l.kt)(i.Z,{value:"cli",label:"gcloud CLI",mdxType:"TabItem"},(0,l.kt)("p",null,"To use the gcloud CLI for this tutorial, ",(0,l.kt)("a",{parentName:"p",href:"https://cloud.google.com/sdk/docs/install"},"install")," and then\n",(0,l.kt)("a",{parentName:"p",href:"https://cloud.google.com/sdk/docs/initializing"},"initialize")," it."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},(0,l.kt)("em",{parentName:"strong"},"To enable network policy enforcement when creating a new cluster, run the following command:"))),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"gcloud container clusters create CLUSTER_NAME --enable-network-policy --zone=ZONE"),"\nReplace CLUSTER_NAME with the name of the new cluster."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},(0,l.kt)("em",{parentName:"strong"},"To enable network policy enforcement for an existing cluster, perform the following tasks:"))),(0,l.kt)("p",null,"Run the following command to enable the add-on:"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"gcloud container clusters update CLUSTER_NAME --update-addons=NetworkPolicy=ENABLED"),"\nReplace CLUSTER_NAME with the name of the cluster."),(0,l.kt)("p",null,"Run the following command to enable network policy enforcement on your cluster, which in turn re-creates your cluster's node pools with network policy enforcement enabled:"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"gcloud container clusters update CLUSTER_NAME --enable-network-policy"))),(0,l.kt)(i.Z,{value:"console",label:"Console",mdxType:"TabItem"},(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},(0,l.kt)("em",{parentName:"strong"},"To enable network policy enforcement when creating a new cluster:"))),(0,l.kt)("ol",null,(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("p",{parentName:"li"},"Go to the Google Kubernetes Engine page in the Google Cloud console.\nThe remaining steps will appear automatically in the Google Cloud console.")),(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("p",{parentName:"li"},"On the Google Kubernetes Engine page, click Create.")),(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("p",{parentName:"li"},"Configure your cluster as desired.")),(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("p",{parentName:"li"},"From the navigation pane, under Cluster, click Networking.")),(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("p",{parentName:"li"},"Select the checkbox to Enable network policy.")),(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("p",{parentName:"li"},"Click Create."))),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},(0,l.kt)("em",{parentName:"strong"},"To enable network policy enforcement for an existing cluster:"))),(0,l.kt)("ol",null,(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("p",{parentName:"li"},"Go to the Google Kubernetes Engine page in the Google Cloud console. The remaining steps will appear automatically in the Google Cloud console.")),(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("p",{parentName:"li"},"In the cluster list, click the name of the cluster you want to modify.")),(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("p",{parentName:"li"},"Under Networking, in the Network policy field, click Edit network policy.")),(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("p",{parentName:"li"},"Select the checkbox to Enable network policy for master and click Save Changes.")),(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("p",{parentName:"li"},"Wait for your changes to apply, and then click Edit network policy again.")),(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("p",{parentName:"li"},"Select the checkbox to Enable network policy for nodes.")),(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("p",{parentName:"li"},"Click Save Changes.")))))),(0,l.kt)(i.Z,{value:"eks",label:"AWS EKS",mdxType:"TabItem"},(0,l.kt)("a",{href:"https://docs.aws.amazon.com/eks/latest/userguide/calico.html"},"Visit the official documentation"),", or follow the instructions below:",(0,l.kt)("ol",null,(0,l.kt)("li",{parentName:"ol"},"Spin up an ",(0,l.kt)("a",{parentName:"li",href:"https://docs.aws.amazon.com/eks/latest/userguide/create-cluster.html"},"EKS cluster")," using the console, AWS CLI or ",(0,l.kt)("inlineCode",{parentName:"li"},"eksctl"),"."),(0,l.kt)("li",{parentName:"ol"},"Install Calico for NetworkPolicy enforcement, without replacing the CNI:")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"kubectl apply -f https://raw.githubusercontent.com/aws/amazon-vpc-cni-k8s/master/config/master/calico-operator.yaml\nkubectl apply -f https://raw.githubusercontent.com/aws/amazon-vpc-cni-k8s/master/config/master/calico-crs.yaml\n"))),(0,l.kt)(i.Z,{value:"aks",label:"Azure AKS",mdxType:"TabItem"},(0,l.kt)("p",null,"You can set up an AKS cluster using this ",(0,l.kt)("a",{parentName:"p",href:"https://learn.microsoft.com/en-us/azure/aks/learn/quick-kubernetes-deploy-cli"},"guide"),"."),(0,l.kt)("p",null,"For network policy support, no setup is required: Azure AKS comes with a built-in network policy implementation called Azure Network Policy Manager. You choose whether you'd like to use this option or Calico when you create a cluster."),(0,l.kt)("a",{href:"https://learn.microsoft.com/en-us/azure/aks/use-network-policies"}," Read more at the official documentation site"),"."))),(0,l.kt)("details",null,(0,l.kt)("summary",null,"Install Otterize on your cluster"),(0,l.kt)("admonition",{type:"note"},(0,l.kt)("p",{parentName:"admonition"},"You can skip this section if Otterize is already installed in your cluster.")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-shell"},"helm repo add otterize https://helm.otterize.com\nhelm repo update\nhelm install otterize otterize/otterize-kubernetes -n otterize-system --create-namespace\n")),(0,l.kt)("p",null,"This chart is a bundle of the Otterize intents operator, Otterize credentials operator, Otterize network mapper, and SPIRE.\nInitial deployment may take a couple of minutes.\nYou can add the ",(0,l.kt)("inlineCode",{parentName:"p"},"--wait")," flag for Helm to wait for deployment to complete and all pods to be Ready, or manually watch for all pods to be ",(0,l.kt)("inlineCode",{parentName:"p"},"Ready")," using ",(0,l.kt)("inlineCode",{parentName:"p"},"kubectl get pods -n otterize-system -w"),".")),(0,l.kt)("h2",{id:"deploy-the-server-client-client-other"},"Deploy the server, client, client-other"),(0,l.kt)("p",null,"Our simple example consists of three pods: an HTTP server and two clients that call it."),(0,l.kt)("details",null,(0,l.kt)("summary",null,"Expand to see the example YAML files"),(0,l.kt)(o.Z,{mdxType:"Tabs"},(0,l.kt)(i.Z,{value:"namespace.yaml",label:"namespace.yaml",default:!0,mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-yaml"},"apiVersion: v1\nkind: Namespace\nmetadata:\n  name: otterize-tutorial-npol\n"))),(0,l.kt)(i.Z,{value:"server.yaml",label:"server.yaml",default:!0,mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-yaml"},'apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: server\n  namespace:  otterize-tutorial-npol\nspec:\n  selector:\n    matchLabels:\n      app: server\n  template:\n    metadata:\n      labels:\n        app: server\n    spec:\n      containers:\n        - name: server\n          image: node\n          command: [ "/bin/sh","-c" ]\n          args: [ "echo \\"Hi, I am the server, you called, may I help you?\\" > index.html; npx --yes http-server -p 80 " ]\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: server\n  namespace:  otterize-tutorial-npol\nspec:\n  selector:\n    app: server\n  ports:\n    - protocol: TCP\n      port: 80\n      targetPort: 80\n'))),(0,l.kt)(i.Z,{value:"client.yaml",label:"client.yaml",default:!0,mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-yaml"},'apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: client\n  namespace:  otterize-tutorial-npol\nspec:\n  selector:\n    matchLabels:\n      app: client\n  template:\n    metadata:\n      labels:\n        app: client\n    spec:\n      containers:\n        - name: client\n          image: alpine/curl\n          command: [ "/bin/sh", "-c", "--" ]\n          args: [ "while true; do echo \\"Calling server...\\"; if ! timeout 2 curl -si server 2>/dev/null; then echo \\"curl timed out\\"; fi; sleep 2; done" ]\n'))),(0,l.kt)(i.Z,{value:"client-other.yaml",label:"client-other.yaml",default:!0,mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-yaml"},'apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: client-other\n  namespace:  otterize-tutorial-npol\nspec:\n  selector:\n    matchLabels:\n      app: client-other\n  template:\n    metadata:\n      labels:\n        app: client-other\n    spec:\n      containers:\n        - name: client-other\n          image: alpine/curl\n          command: [ "/bin/sh", "-c", "--" ]\n          args: [ "while true; do echo \\"Calling server...\\"; if ! timeout 2 curl -si server 2>/dev/null; then echo \\"curl timed out\\"; fi; sleep 2; done" ]\n'))))),(0,l.kt)("ol",null,(0,l.kt)("li",{parentName:"ol"},"Deploy the two clients and the server in their namespace using ",(0,l.kt)("inlineCode",{parentName:"li"},"kubectl"),":")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-shell"},"kubectl apply -f https://docs.otterize.com/code-examples/automate-network-policies/all.yaml\n")),(0,l.kt)("details",null,(0,l.kt)("summary",null,"Optional: check deployment status"),"Check that the client and server pods were deployed",(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"kubectl get pods -n otterize-tutorial-npol\n")),(0,l.kt)("p",null,"You should see"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"NAME                           READY   STATUS    RESTARTS   AGE\nclient-596bcb48d5-pnjxc        1/1     Running   0          8s\nclient-other-f56d65d7f-z2wg2   1/1     Running   0          8s\nserver-6bb4784ccc-wtz7f        1/1     Running   0          8s\n"))),(0,l.kt)("p",null,"The network layout for the deployed workloads looks as follows:\n",(0,l.kt)("img",{alt:"Network policies",src:n(548).Z,width:"923",height:"363"})),(0,l.kt)("admonition",{type:"tip"},(0,l.kt)("p",{parentName:"admonition"},"Check out this ",(0,l.kt)("a",{parentName:"p",href:"/quick-tutorials/k8s-network-mapper"},"tutorial")," to learn how you can use ",(0,l.kt)("a",{parentName:"p",href:"/otterize-cloud"},"Otterize Cloud")," to get these kind of visualizations.")),(0,l.kt)("p",null,"Let's monitor both client attempts to call the server with additional terminal windows,\nso we can see the effects of our changes in real time."),(0,l.kt)("ol",{start:2},(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("strong",{parentName:"li"},"Open a new terminal window ","[client]")," and tail the client log:")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"kubectl logs -f --tail 1 -n otterize-tutorial-npol deploy/client\n")),(0,l.kt)("details",null,(0,l.kt)("summary",null,"Expected output"),(0,l.kt)("p",null,"At this point the client should be able to communicate with the server:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"Calling server...\nHTTP/1.1 200 OK\n...\nHi, I am the server, you called, may I help you?\n"))),(0,l.kt)("ol",{start:3},(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("strong",{parentName:"li"},"Open another terminal window ","[client-other]")," and tail the client-other log:")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"kubectl logs -f --tail 1 -n otterize-tutorial-npol deploy/client-other\n")),(0,l.kt)("details",null,(0,l.kt)("summary",null,"Expected output"),(0,l.kt)("p",null,"At this point the client should be able to communicate with the server:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"Calling server...\nHTTP/1.1 200 OK\n...\nHi, I am the server, you called, may I help you?\n"))),(0,l.kt)("h2",{id:"apply-intents"},"Apply intents"),(0,l.kt)("p",null,"We will now declare that the ",(0,l.kt)("strong",{parentName:"p"},"client")," intends to call the ",(0,l.kt)("strong",{parentName:"p"},"server"),".\nWhen the intents YAML is applied, creating a custom resource of type ",(0,l.kt)("inlineCode",{parentName:"p"},"ClientIntents"),",\nOtterize will add a network policy to allow the intended calls\n(",(0,l.kt)("strong",{parentName:"p"},"client")," ","\u2192"," ",(0,l.kt)("strong",{parentName:"p"},"server"),") and fail all unintended calls (e.g., ",(0,l.kt)("strong",{parentName:"p"},"client-other")," ","\u2192"," ",(0,l.kt)("strong",{parentName:"p"},"server"),")."),(0,l.kt)("ol",null,(0,l.kt)("li",{parentName:"ol"},"Here is the ",(0,l.kt)("inlineCode",{parentName:"li"},"intents.yaml")," declaration of the client, which we will apply below:")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-yaml"},"apiVersion: k8s.otterize.com/v1alpha2\nkind: ClientIntents\nmetadata:\n  name: client\n  namespace:  otterize-tutorial-npol\nspec:\n  service:\n    name: client\n  calls:\n    - name: server\n      type: http\n")),(0,l.kt)("h3",{id:"visualize-using-otterize-cloud"},"Visualize using Otterize Cloud"),(0,l.kt)("p",null,"Otterize Cloud allows you to visualize and understand how your intents shape network policies and what their effects are. In this case after applying the client intents file the access graph would show us that ",(0,l.kt)("strong",{parentName:"p"},"client")," can make secure calls to ",(0,l.kt)("strong",{parentName:"p"},"server")," and that ",(0,l.kt)("strong",{parentName:"p"},"client-other")," is blocked.\n",(0,l.kt)("img",{alt:"Network policies",src:n(9334).Z,width:"871",height:"344"})),(0,l.kt)("admonition",{type:"tip"},(0,l.kt)("p",{parentName:"admonition"},"Otterize Cloud can help you gain confidence when deploying network policies using intents. With its ",(0,l.kt)("a",{parentName:"p",href:"/realistic-example/shadow-mode-network-policies"},"shadow mode")," you can see how workload communication is about to be affected by network policies (and more) before actually rolling out enforcement.")),(0,l.kt)("h3",{id:"see-it-in-action"},"See it in action"),(0,l.kt)("p",null,"Keep an eye on the logs being tailed in the ",(0,l.kt)("strong",{parentName:"p"},"[client-other]")," terminal window,\nand apply this ",(0,l.kt)("inlineCode",{parentName:"p"},"intents.yaml")," file in your ",(0,l.kt)("strong",{parentName:"p"},"main terminal window")," using:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-shell"},"kubectl apply -f https://docs.otterize.com/code-examples/automate-network-policies/intents.yaml\n")),(0,l.kt)("admonition",{type:"tip"},(0,l.kt)("p",{parentName:"admonition"},"Client intents are the cornerstone of ",(0,l.kt)("a",{parentName:"p",href:"https://otterize.com/ibac"},"intent-based access control (IBAC)"),".")),(0,l.kt)("ol",{start:2},(0,l.kt)("li",{parentName:"ol"},"You should quickly see in the ",(0,l.kt)("strong",{parentName:"li"},"[client-other]")," terminal that it times out when calling the server,\nas expected since it didn't declare its intents:")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"Calling server...\nHTTP/1.1 200 OK\n...\nHi, I am the server, you called, may I help you?  # <- before applying the intents file\n# highlight-start\nCalling server...                                 # <- after applying the intents file\ncurl timed out\nCalling server...\ncurl timed out\n# highlight-end\n")),(0,l.kt)("admonition",{type:"info"},(0,l.kt)("p",{parentName:"admonition"},"If the client isn't timing out, then the installed CNI plugin likely does not support network policies.\nConsult the docs for your Kubernetes distribution or head back to the ",(0,l.kt)("a",{parentName:"p",href:"#prerequisites"},"Calico installation section")," to install one.\nFor example, Minikube does not start by default with a CNI that supports network policies\nbut you can ask it to start with one that does, such as Calico.")),(0,l.kt)("ol",{start:3},(0,l.kt)("li",{parentName:"ol"},"And in the ",(0,l.kt)("strong",{parentName:"li"},"[client]")," terminal you should see that calls go through, as expected since they were declared:")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"Calling server...\nHTTP/1.1 200 OK\n...\nHi, I am the server, you called, may I help you?\n")),(0,l.kt)("ol",{start:4},(0,l.kt)("li",{parentName:"ol"},"You should also see that a new network policy was created:")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"kubectl get NetworkPolicies -n otterize-tutorial-npol\n")),(0,l.kt)("p",null,"will output:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"NAME                                           POD-SELECTOR                                         AGE\naccess-to-server-from-otterize-tutorial-npol   otterize/server=server-otterize-tutorial-np-7e16db   6s\ndefault-deny-ingress                           <none>                                               28s\n")),(0,l.kt)("admonition",{title:"Done!",type:"tip"},(0,l.kt)("p",{parentName:"admonition"},"Otterize did its job of both protecting ",(0,l.kt)("em",{parentName:"p"},"and")," allowing intended access.")),(0,l.kt)("h2",{id:"what-did-we-accomplish"},"What did we accomplish?"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"Controlling access through network policies no longer means touching network policies at all.")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"Clients simply declare what they need to access with their intents files.")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"The next ",(0,l.kt)("inlineCode",{parentName:"p"},"kubectl apply")," ensures that network policies automatically reflect the intended pod-to-pod access."))),(0,l.kt)("details",null,(0,l.kt)("summary",null,"Expand to see what happened behind the scenes"),(0,l.kt)("p",null,"Otterize generated a specific network policy on the ingress of the pods of a server, allowing the server to\nbe accessed by the pods of a client. Otterize uses labels to define the network policy and associate it\nwith a server in a namespace and a client in a namespace, as follows:"),(0,l.kt)("ol",null,(0,l.kt)("li",{parentName:"ol"},"The server's pods are given a label ",(0,l.kt)("inlineCode",{parentName:"li"},"intents.otterize.com/server")," whose value uniquely represents that server.\nThe network policy stipulates that it applies to the ingress of server pods with this label."),(0,l.kt)("li",{parentName:"ol"},"The client's pods are given a label ",(0,l.kt)("inlineCode",{parentName:"li"},"intents.otterize.com/access-...")," derived from the server's unique ",(0,l.kt)("inlineCode",{parentName:"li"},"intents.otterize.com/server")," value.\nThe network policy stipulates that only client pods with this matching label can access the server."),(0,l.kt)("li",{parentName:"ol"},"The client's namespace is given a label ",(0,l.kt)("inlineCode",{parentName:"li"},"intents.otterize.com/namespace-name")," whose value is the namespace of the client.\nThe network policy stipulates that only client pods whose namespaces have this label can access the server.\nThis is used to allow cross-namespace intents.")),(0,l.kt)("p",null,"Otterize saved us from doing all this work by simply declaring the client's intents in ",(0,l.kt)("inlineCode",{parentName:"p"},"intents.yaml"),",\nwhile the appropriate network policies were managed automatically behind the scenes."),(0,l.kt)("p",null,"Further information about network policies and Otterize can be found\n",(0,l.kt)("a",{parentName:"p",href:"/reference/network-policies"},"here"),".")),(0,l.kt)("admonition",{title:"Bonus tutorial",type:"tip"},(0,l.kt)("p",{parentName:"admonition"},"Try to create an intents file yourself for ",(0,l.kt)("strong",{parentName:"p"},"client-other"),", and apply it to allow this other client to call the server.")),(0,l.kt)("h2",{id:"whats-next"},"What's next"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Get started with the ",(0,l.kt)("a",{parentName:"li",href:"/k8s-network-mapper"},"Otterize network mapper")," to help you bootstrap intents files\nfor use in IBAC.")),(0,l.kt)("p",null,"Or take a realistic ecommerce application with multiple services for a spin and learn how to manage it with"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"/realistic-example/shadow-mode-network-policies"},"Network policies")," - use shadow mode to boost confidence when rolling out secure access."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"/realistic-example/visualize-kafka-protection"},"Secure access to Kafka")," - visualize kafka configuration and changes.")),(0,l.kt)("h2",{id:"teardown"},"Teardown"),(0,l.kt)("p",null,"To remove the deployed examples run:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"kubectl delete namespace otterize-tutorial-npol\n")))}d.isMDXComponent=!0},548:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/base-3b27eff2ff18e66aa1a98f59399ab97c.png"},9334:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/protected-8376d92498eafa33c9e3ad5dc9e4002f.png"}}]);