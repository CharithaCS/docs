"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[350],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>m});var i=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,i,o=function(e,t){if(null==e)return{};var n,i,o={},r=Object.keys(e);for(i=0;i<r.length;i++)n=r[i],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(i=0;i<r.length;i++)n=r[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var s=i.createContext({}),c=function(e){var t=i.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},p=function(e){var t=c(e.components);return i.createElement(s.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},u=i.forwardRef((function(e,t){var n=e.components,o=e.mdxType,r=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),u=c(n),m=o,g=u["".concat(s,".").concat(m)]||u[m]||d[m]||r;return n?i.createElement(g,a(a({ref:t},p),{},{components:n})):i.createElement(g,a({ref:t},p))}));function m(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var r=n.length,a=new Array(r);a[0]=u;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:o,a[1]=l;for(var c=2;c<r;c++)a[c]=n[c];return i.createElement.apply(null,a)}return i.createElement.apply(null,n)}u.displayName="MDXCreateElement"},1588:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>a,default:()=>d,frontMatter:()=>r,metadata:()=>l,toc:()=>c});var i=n(7462),o=(n(7294),n(3905));const r={sidebar_position:3,title:"IBAC via network policies"},a=void 0,l={unversionedId:"documentation/guides/ibac-via-network-policies",id:"documentation/guides/ibac-via-network-policies",title:"IBAC via network policies",description:"Recap: K8s network policies and CNI network plugins",source:"@site/docs/documentation/3-guides/3-ibac-via-network-policies.md",sourceDirName:"documentation/3-guides",slug:"/documentation/guides/ibac-via-network-policies",permalink:"/documentation/guides/ibac-via-network-policies",draft:!1,editUrl:"https://github.com/otterize/docs/edit/main/docs/documentation/3-guides/3-ibac-via-network-policies.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3,title:"IBAC via network policies"},sidebar:"docSidebar",previous:{title:"Mapping pod-to-pod calls",permalink:"/documentation/guides/mapping-pod-to-pod-calls"},next:{title:"Terminology",permalink:"/documentation/concepts/terminology"}},s={},c=[{value:"Recap: K8s network policies and CNI network plugins",id:"recap-k8s-network-policies-and-cni-network-plugins",level:2},{value:"Implications of setting an ingress network policy",id:"implications-of-setting-an-ingress-network-policy",level:3},{value:"Setting security scope via default network policies",id:"setting-security-scope-via-default-network-policies",level:3},{value:"\u2026",id:"",level:2},{value:"Practical notes",id:"practical-notes",level:2},{value:"Avoiding drift",id:"avoiding-drift",level:3},{value:"Avoiding blocking of essential services",id:"avoiding-blocking-of-essential-services",level:3}],p={toc:c};function d(e){let{components:t,...n}=e;return(0,o.kt)("wrapper",(0,i.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h2",{id:"recap-k8s-network-policies-and-cni-network-plugins"},"Recap: K8s network policies and CNI network plugins"),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://kubernetes.io/docs/concepts/services-networking/network-policies/"},"Network policies")," are one of the tools we\ncan use for traffic shaping within K8s clusters. They allow us to shape traffic using selectors, policies, and L3\nand L4 identifiers. To enforce network policies, a Kubernetes cluster requires a CNI supporting network policies to be\ninstalled. Some popular options are Calico and Cilium."),(0,o.kt)("p",null,"The following example shows a network policy allowing traffic"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("em",{parentName:"li"},"from")," pods labeled ",(0,o.kt)("inlineCode",{parentName:"li"},"app:backend")," belonging to namespaces labeled ",(0,o.kt)("inlineCode",{parentName:"li"},"env:production")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("em",{parentName:"li"},"to")," pods labeled ",(0,o.kt)("inlineCode",{parentName:"li"},"app:db")," in the namespace  ",(0,o.kt)("inlineCode",{parentName:"li"},"production-db"))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml"},"apiVersion: networking.k8s.io/v1\nkind: NetworkPolicy\nmetadata:\n  name: allow-production-backend\n  # highlight-next-line\n  namespace: production-db            # [Target filter] Policy applies to target pods in this namespace\nspec:\n  podSelector:\n    matchLabels:\n      # highlight-next-line\n      app: db                         # [Target filter] Policy applies to target pods with this label\n  policyTypes:\n    # highlight-next-line\n    - Ingress                         # [Direction] Policy implemented as a filter on incoming connections\n  ingress:\n    - from:\n        - namespaceSelector:\n            matchLabels:\n              # highlight-next-line\n              env: production         # [Source filter] Policy filters source pods from namespaces with this label\n        - podSelector:\n            matchLabels:\n              # highlight-next-line\n              app: backend            # [Source filter] Policy filters source pods from with this label\n")),(0,o.kt)("h3",{id:"implications-of-setting-an-ingress-network-policy"},"Implications of setting an ingress network policy"),(0,o.kt)("h3",{id:"setting-security-scope-via-default-network-policies"},"Setting security scope via default network policies"),(0,o.kt)("p",null,"Default deny network policy example"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml"},"apiVersion: networking.k8s.io/v1\nkind: NetworkPolicy\nmetadata:\n  name: default-deny-ingress\n  namespace:  production\nspec:\n  podSelector: {}\n  policyTypes:\n    - Ingress\n")),(0,o.kt)("h2",{id:""},"\u2026"),(0,o.kt)("h2",{id:"practical-notes"},"Practical notes"),(0,o.kt)("h3",{id:"avoiding-drift"},"Avoiding drift"),(0,o.kt)("h3",{id:"avoiding-blocking-of-essential-services"},"Avoiding blocking of essential services"))}d.isMDXComponent=!0}}]);