"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[529],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>m});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},l=Object.keys(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),c=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=c(e.components);return a.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,l=e.originalType,s=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),d=c(n),m=r,h=d["".concat(s,".").concat(m)]||d[m]||u[m]||l;return n?a.createElement(h,i(i({ref:t},p),{},{components:n})):a.createElement(h,i({ref:t},p))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var l=n.length,i=new Array(l);i[0]=d;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o.mdxType="string"==typeof e?e:r,i[1]=o;for(var c=2;c<l;c++)i[c]=n[c];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},5162:(e,t,n)=>{n.d(t,{Z:()=>i});var a=n(7294),r=n(6010);const l="tabItem_Ymn6";function i(e){let{children:t,hidden:n,className:i}=e;return a.createElement("div",{role:"tabpanel",className:(0,r.Z)(l,i),hidden:n},t)}},5488:(e,t,n)=>{n.d(t,{Z:()=>m});var a=n(7462),r=n(7294),l=n(6010),i=n(2389),o=n(7392),s=n(7094),c=n(2466);const p="tabList__CuJ",u="tabItem_LNqP";function d(e){var t,n;const{lazy:i,block:d,defaultValue:m,values:h,groupId:k,className:f}=e,g=r.Children.map(e.children,(e=>{if((0,r.isValidElement)(e)&&"value"in e.props)return e;throw new Error("Docusaurus error: Bad <Tabs> child <"+("string"==typeof e.type?e.type:e.type.name)+'>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.')})),y=null!=h?h:g.map((e=>{let{props:{value:t,label:n,attributes:a}}=e;return{value:t,label:n,attributes:a}})),v=(0,o.l)(y,((e,t)=>e.value===t.value));if(v.length>0)throw new Error('Docusaurus error: Duplicate values "'+v.map((e=>e.value)).join(", ")+'" found in <Tabs>. Every value needs to be unique.');const b=null===m?m:null!=(t=null!=m?m:null==(n=g.find((e=>e.props.default)))?void 0:n.props.value)?t:g[0].props.value;if(null!==b&&!y.some((e=>e.value===b)))throw new Error('Docusaurus error: The <Tabs> has a defaultValue "'+b+'" but none of its children has the corresponding value. Available values are: '+y.map((e=>e.value)).join(", ")+". If you intend to show no default tab, use defaultValue={null} instead.");const{tabGroupChoices:N,setTabGroupChoices:T}=(0,s.U)(),[w,C]=(0,r.useState)(b),z=[],{blockElementScrollPositionUntilNextRender:x}=(0,c.o5)();if(null!=k){const e=N[k];null!=e&&e!==w&&y.some((t=>t.value===e))&&C(e)}const S=e=>{const t=e.currentTarget,n=z.indexOf(t),a=y[n].value;a!==w&&(x(t),C(a),null!=k&&T(k,String(a)))},O=e=>{var t;let n=null;switch(e.key){case"ArrowRight":{var a;const t=z.indexOf(e.currentTarget)+1;n=null!=(a=z[t])?a:z[0];break}case"ArrowLeft":{var r;const t=z.indexOf(e.currentTarget)-1;n=null!=(r=z[t])?r:z[z.length-1];break}}null==(t=n)||t.focus()};return r.createElement("div",{className:(0,l.Z)("tabs-container",p)},r.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,l.Z)("tabs",{"tabs--block":d},f)},y.map((e=>{let{value:t,label:n,attributes:i}=e;return r.createElement("li",(0,a.Z)({role:"tab",tabIndex:w===t?0:-1,"aria-selected":w===t,key:t,ref:e=>z.push(e),onKeyDown:O,onFocus:S,onClick:S},i,{className:(0,l.Z)("tabs__item",u,null==i?void 0:i.className,{"tabs__item--active":w===t})}),null!=n?n:t)}))),i?(0,r.cloneElement)(g.filter((e=>e.props.value===w))[0],{className:"margin-top--md"}):r.createElement("div",{className:"margin-top--md"},g.map(((e,t)=>(0,r.cloneElement)(e,{key:t,hidden:e.props.value!==w})))))}function m(e){const t=(0,i.Z)();return r.createElement(d,(0,a.Z)({key:String(t)},e))}},5958:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>s,default:()=>m,frontMatter:()=>o,metadata:()=>c,toc:()=>u});var a=n(7462),r=(n(7294),n(3905)),l=n(5488),i=n(5162);const o={sidebar_position:5,title:"Kubernetes mTLS with Otterize"},s=void 0,c={unversionedId:"guides/k8s-mtls/README",id:"guides/k8s-mtls/README",title:"Kubernetes mTLS with Otterize",description:"Otterize can automatically provision mTLS credentials by baking exiting K8s workload identities into certificates.",source:"@site/docs/3-guides/5-k8s-mtls/README.mdx",sourceDirName:"3-guides/5-k8s-mtls",slug:"/guides/k8s-mtls/",permalink:"/guides/k8s-mtls/",draft:!1,editUrl:"https://github.com/otterize/docs/edit/main/docs/3-guides/5-k8s-mtls/README.mdx",tags:[],version:"current",sidebarPosition:5,frontMatter:{sidebar_position:5,title:"Kubernetes mTLS with Otterize"},sidebar:"docSidebar",previous:{title:"Mapping pod-to-pod calls in Kubernetes",permalink:"/guides/k8s-mapping-pod-to-pod-calls/"},next:{title:"Terminology",permalink:"/terminology/"}},p={},u=[{value:"Install Otterize",id:"install-otterize",level:2},{value:"Choose a Kubernetes cluster and services",id:"choose-a-kubernetes-cluster-and-services",level:2},{value:"Deploy demo",id:"deploy-demo",level:3},{value:"Annotate deployment",id:"annotate-deployment",level:2},{value:"Annotation parameters",id:"annotation-parameters",level:3},{value:"Global parameters",id:"global-parameters",level:4},{value:"Cert-type - pem parameters",id:"cert-type---pem-parameters",level:4},{value:"Cert-type - jks parameters",id:"cert-type---jks-parameters",level:4},{value:"Verify generated credentials",id:"verify-generated-credentials",level:2},{value:"Inspect credentials",id:"inspect-credentials",level:3},{value:"Optional - verify demo setup",id:"optional---verify-demo-setup",level:3},{value:"What happened behind the scenes",id:"what-happened-behind-the-scenes",level:4},{value:"What&#39;s next",id:"whats-next",level:2}],d={toc:u};function m(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"Otterize can automatically provision mTLS credentials by baking exiting K8s workload identities into certificates."),(0,r.kt)("admonition",{title:"to complete",type:"note"}),(0,r.kt)("h2",{id:"install-otterize"},"Install Otterize"),(0,r.kt)("p",null,"Use Helm to install the latest version of Otterize:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"helm repo add otterize https://helm.otterize.com\nhelm repo update\nhelm upgrade --install otterize otterize/otterize-kubernetes -n otterize --create-namespace\n")),(0,r.kt)("details",null,(0,r.kt)("summary",null,"Optional: check installation status"),(0,r.kt)("div",null,(0,r.kt)("p",null," It can take several minutes for the pods to be ",(0,r.kt)("inlineCode",{parentName:"p"},"Running")," and all containers to be ready.\nYou can monitor progress with the following command:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"kubectl get pods -n otterize -w\n")),(0,r.kt)("p",null,"   Once you see the following (there may be even more pods), you can stop monitoring with ",(0,r.kt)("inlineCode",{parentName:"p"},"Ctrl-C"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"NAME                                                             READY   STATUS    RESTARTS      AGE\nintents-operator-controller-manager-6b97596d54-5qxcw             2/2     Running   0             53s\notterize-spire-agent-9s8w7                                       1/1     Running   0             54s\notterize-spire-agent-np2wf                                       1/1     Running   1             54s\notterize-spire-server-0                                          1/1     Running   0             53s\notterize-watcher-77db87cfcd-xhsrk                                1/1     Running   0             53s\nspire-integration-operator-controller-manager-65b8bf57b5-mpltl   2/2     Running   0             53s\n")))),(0,r.kt)("h2",{id:"choose-a-kubernetes-cluster-and-services"},"Choose a Kubernetes cluster and services"),(0,r.kt)("p",null,"You can use this guide with your own set of services, e.g. first in a Kubernetes cluster running dev or lab services,\nand eventually in a staging or production cluster. You'll need admin access."),(0,r.kt)("p",null,"Alternatively, you can deploy our demo setup as follows. You'll deploy these into any Kubernetes cluster to which you have admin access."),(0,r.kt)("h3",{id:"deploy-demo"},"Deploy demo"),(0,r.kt)("p",null,"Our example consists of two pods: client and server communicating over HTTPS using credentials\nprovisioned by Otterize."),(0,r.kt)("details",null,(0,r.kt)("summary",null,"Expand to see the details of this example..."),(0,r.kt)(l.Z,{mdxType:"Tabs"},(0,r.kt)(i.Z,{value:"namespace.yaml",label:"namespace.yaml",default:!0,mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},"\n> include file not found: ../../../../static/code-examples/kafka-mtls/namespace.yaml --\x3e /home/runner/work/docs/static/code-examples/kafka-mtls/namespace.yaml\n\n"))),(0,r.kt)(i.Z,{value:"client-deployment.yaml",label:"client-deployment.yaml",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},"\n> include file not found: ../../../../static/code-examples/kafka-mtls/client-deployment.yaml --\x3e /home/runner/work/docs/static/code-examples/kafka-mtls/client-deployment.yaml\n\n"))),(0,r.kt)(i.Z,{value:"client-configmap.yaml",label:"client-configmap.yaml",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},"\n> include file not found: ../../../../static/code-examples/kafka-mtls/client-configmap.yaml --\x3e /home/runner/work/docs/static/code-examples/kafka-mtls/client-configmap.yaml\n\n"))),(0,r.kt)(i.Z,{value:"client.js",label:"client.js",default:!0,mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"const fs = require('fs');\nconst https = require('https');\n\nconst options = {\n hostname: 'server.otterize-tutorial-mtls',\n port: 443,\n path: '/hello',\n method: 'GET',\n cert: fs.readFileSync('/var/otterize/credentials/svid.pem'),\n key: fs.readFileSync('/var/otterize/credentials/key.pem'),\n ca: fs.readFileSync('/var/otterize/credentials/bundle.pem')\n}\n\nconst req = https.request(\n options,\n res => {\n     res.on('data', function (data) {\n         console.log(data.toString())\n     });\n }\n);\n\nreq.end();\n"))),(0,r.kt)(i.Z,{value:"server.js",label:"server.js",default:!0,mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"const https = require(`https`);\nconst fs = require(`fs`);\n\nconst options = {\nkey: fs.readFileSync('/var/otterize/credentials/key.pem'),\ncert: fs.readFileSync('/var/otterize/credentials/svid.pem'),\nca: fs.readFileSync('/var/otterize/credentials/bundle.pem'),\nrequestCert: true\n};\n\nhttps.createServer(\n options,\n (req, res) => {\n     const peerCert = req.connection.getPeerCertificate();\n     const ownCert = req.connection.getCertificate();\n     console.log(\"Received request:\");\n     console.log(peerCert.subject.CN + \":\\t\" + req.method + \" \" + req.url);\n     if (req.url === '/hello') {\n         res.writeHead(200);\n         res.end('mTLS hello world\\nfrom: ' + ownCert.subject.CN + '\\nto client: ' + peerCert.subject.CN);\n     } else {\n         res.end();\n     }\n }).listen(443);\n"))))),(0,r.kt)("p",null,"Deploy the ",(0,r.kt)("inlineCode",{parentName:"p"},"client")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"server")," using ",(0,r.kt)("inlineCode",{parentName:"p"},"kubectl"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"kubectl apply -f https://docs.otterize.com/code-examples/mtls/all.yaml\n")),(0,r.kt)("details",null,(0,r.kt)("summary",null,"Optional: check deployment status"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"kubectl get pods -n otterize-tutorial-mtls\n")),(0,r.kt)("p",null,"You should see"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"NAME                      READY   STATUS    RESTARTS   AGE\nclient-5689997b5c-grlnt   1/1     Running   0          35s\nserver-6698c58cbc-v9n9b   1/1     Running   0          34s\n"))),(0,r.kt)("h2",{id:"annotate-deployment"},"Annotate deployment"),(0,r.kt)("p",null,"To generate credentials for the pod we simply need to update the deployment by annotating it.\nThe required steps are to"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"Annotate the pod - Otterize automatically identifies the ",(0,r.kt)("inlineCode",{parentName:"li"},"otterize/credentials-secret-name")," annotation, generates\nmTLS credentials, and stores them as K8s secret named as the annotation value."),(0,r.kt)("li",{parentName:"ol"},"Mount the credentials stored as a K8s secret as a volume"),(0,r.kt)("li",{parentName:"ol"},"Mount the volume into the container")),(0,r.kt)("details",null,(0,r.kt)("summary",null,"Expand to see a detailed explanation for the annotations"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},"spec:\n  template:\n    metadata:\n      ...\n      annotations:\n        # highlight-next-line\n        otterize/credentials-secret-name: client-credentials-secret       # 1 Generate credentials\n    spec:\n      volumes:\n        # highlight-start\n        - name: otterize-credentials\n          secret:\n            secretName: client-credentials-secret                         # 2 Mount credentials as a volume\n            # highlight-end\n      containers:\n        - name: client\n        ...\n        volumeMounts:\n          # highlight-start\n          - name: otterize-credentials\n            mountPath: /var/otterize/credentials                          # 3 Mount volume into container\n            readOnly: true\n            # highlight-end\n"))),(0,r.kt)("p",null,"The provided demo pods were already configured and annotated as required."),(0,r.kt)("h3",{id:"annotation-parameters"},"Annotation parameters"),(0,r.kt)("p",null,"The following annotations control different aspects of the credential generation:"),(0,r.kt)("h4",{id:"global-parameters"},"Global parameters"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"spire-integration.otterize.com/tls-secret-name"),"  - The name of the k8s secret in which the certificate data is stored"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"spire-integration.otterize.com/dns-names")," - A comma-separated list of additional dns names to be registered as part of the"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"spire-integration.otterize.com/cert-ttl")," - The certificate TTL. Defaults to SPIRE-server's configured default TTL",(0,r.kt)("admonition",{parentName:"li",type:"note"},(0,r.kt)("p",{parentName:"admonition"},"Otterize defaults to generating credentials with an expiry time of 1 day. The certificates are automatically refreshed before expiring."))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"spire-integration.otterize.com/cert-type")," - The requested certificate type - pem (default) or jks")),(0,r.kt)("h4",{id:"cert-type---pem-parameters"},"Cert-type - pem parameters"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"spire-integration.otterize.com/svid-file-name")," - The name of the file in the secret data, that stores the certificate's SVID file. Defaults to ",(0,r.kt)("inlineCode",{parentName:"li"},"svid.pem")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"spire-integration.otterize.com/bundle-file-name")," - The name of the file in the secret data, that stores the certificate's bundle file. Defaults to ",(0,r.kt)("inlineCode",{parentName:"li"},"bundle.pem"),"."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"spire-integration.otterize.com/key-file-name")," - The name of the file in the secret data, that stores the certificate's key file. Defaults to ",(0,r.kt)("inlineCode",{parentName:"li"},"key.pem"),".")),(0,r.kt)("h4",{id:"cert-type---jks-parameters"},"Cert-type - jks parameters"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"spire-integration.otterize.com/keystore-file-name")," - The name of the file in the secret data, that stores the certificate's key store file. Defaults to ",(0,r.kt)("inlineCode",{parentName:"li"},"keystore.jks"),"."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"spire-integration.otterize.com/truststore-file-name")," - The name of the file in the secret data, that stores the certificate's trust store file. Defaults to ",(0,r.kt)("inlineCode",{parentName:"li"},"truststore.jks"),"."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"spire-integration.otterize.com/jks-password")," - The jks certificate password. Defaults to ",(0,r.kt)("inlineCode",{parentName:"li"},"password"),".")),(0,r.kt)("admonition",{type:"tip"},(0,r.kt)("p",{parentName:"admonition"},"Certificates are automatically refreshed before expiring. We recommend loading certificates each time before using them where possible.")),(0,r.kt)("h2",{id:"verify-generated-credentials"},"Verify generated credentials"),(0,r.kt)("h3",{id:"inspect-credentials"},"Inspect credentials"),(0,r.kt)("p",null,"We can use openssl to inspect the generated certificates. The certificates are stored as ",(0,r.kt)("inlineCode",{parentName:"p"},"K8s secrets")," and are also\n",(0,r.kt)("inlineCode",{parentName:"p"},"mounted")," into containers."),(0,r.kt)("p",null,"We will first retrieve them with one of the following options"),(0,r.kt)(l.Z,{mdxType:"Tabs"},(0,r.kt)(i.Z,{value:"secret-direct",label:"K8s secret",default:!0,mdxType:"TabItem"},"To retrieve the credentials from the K8s secrets store use:",(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"kubectl get secret -n otterize-tutorial-mtls client-credentials-secret -o jsonpath='{.data.svid\\.pem}' | base64 -d > svid.pem\n"))),(0,r.kt)(i.Z,{value:"secret-pod",label:"K8s pod mount",default:!0,mdxType:"TabItem"},"To retrieve the credentials from the container mount use:",(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"kubectl exec -n otterize-tutorial-mtls -it deploy/client -- cat /var/otterize/credentials/svid.pem > svid.pem\n")))),(0,r.kt)("p",null,"And then inspect them with"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"openssl x509 -in svid.pem -text | head -n 15\n")),(0,r.kt)("p",null,"   You should see a similar output to"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-x509"},"Certificate:\n    Data:\n        Version: 3 (0x2)\n        Serial Number:\n            0b:eb:eb:4d:0e:02:7e:28:93:30:1c:55:26:22:8b:c7\n        Signature Algorithm: sha256WithRSAEncryption\n        Issuer: C = US, O = SPIRE\n        Validity\n            Not Before: Aug 24 12:19:57 2022 GMT\n            Not After : Sep 23 12:20:07 2022 GMT\n# highlight-next-line\n        Subject: C = US, O = SPIRE, CN = client.otterize-tutorial-mtls       # the client's name\n        Subject Public Key Info:\n            Public Key Algorithm: id-ecPublicKey\n                Public-Key: (256 bit)\n                pub:\n")),(0,r.kt)("p",null,"You can see that Otterize generated an x509 certificate using the pod's name ","[",(0,r.kt)("inlineCode",{parentName:"p"},"client"),"]"," and namespace ","[",(0,r.kt)("inlineCode",{parentName:"p"},"otterize-tutorial-mtls"),"]",".\nThe certificate belongs to a chain of trust starting at the SPIRE server."),(0,r.kt)("h3",{id:"optional---verify-demo-setup"},"Optional - verify demo setup"),(0,r.kt)("p",null,"Confirm that the client can successfully call the server using HTTP over mTLS. The server will reply to the client\nwith it's ",(0,r.kt)("inlineCode",{parentName:"p"},"own")," certificate's ",(0,r.kt)("inlineCode",{parentName:"p"},"common name")," and the ",(0,r.kt)("inlineCode",{parentName:"p"},"client"),"'s certificate ",(0,r.kt)("inlineCode",{parentName:"p"},"common name"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"kubectl logs --tail 3 -n otterize-tutorial-mtls deploy/client\n")),(0,r.kt)("p",null,"   You should see the following line"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"mTLS hello world\nfrom: server.otterize-tutorial-mtls          # server's common name in the certificate\nto client: client.otterize-tutorial-mtls     # client's common name in the certificate\n")),(0,r.kt)("p",null,"You can also follow the server's output log with"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"kubectl logs --tail 1 -n otterize-tutorial-mtls deploy/server\n")),(0,r.kt)("p",null,"   You should see the following line"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"client.otterize-tutorial-mtls:  GET /hello\n")),(0,r.kt)("h4",{id:"what-happened-behind-the-scenes"},"What happened behind the scenes"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"We annotated the pods to let Otterize know it should generate mTLS credentials."),(0,r.kt)("li",{parentName:"ol"},"The Otterize SPIRE integration operator",(0,r.kt)("ol",{parentName:"li"},(0,r.kt)("li",{parentName:"ol"},"Created an entries for the annotated pods with the SPIRE server."),(0,r.kt)("li",{parentName:"ol"},"Generated matching mTLS credentials using the SPIRE server."),(0,r.kt)("li",{parentName:"ol"},"Stored the mTLS credentials into a K8s secrets."))),(0,r.kt)("li",{parentName:"ol"},"The secrets were mounted (separately) into each pod's container."),(0,r.kt)("li",{parentName:"ol"},"The pods communicated with each other using HTTP of mutual TLS.")),(0,r.kt)("h2",{id:"whats-next"},"What's next"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Learn how to configure your existing code to use mTLS for ",(0,r.kt)("a",{parentName:"li",href:"/service-identities/using-credentials/#http"},"HTTPS"),"\n(clients and servers) and for ",(0,r.kt)("a",{parentName:"li",href:"/service-identities/using-credentials/#kafka"},"Kafka clients"),"."),(0,r.kt)("li",{parentName:"ul"},"Configure secure access between pods and Kafka with this ",(0,r.kt)("a",{parentName:"li",href:"/guides/ibac-for-k8s-kafka/"},"guide"),".")))}m.isMDXComponent=!0}}]);