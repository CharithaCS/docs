"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[6069],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>h});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=r.createContext({}),c=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=c(e.components);return r.createElement(l.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),u=c(n),h=a,f=u["".concat(l,".").concat(h)]||u[h]||d[h]||o;return n?r.createElement(f,i(i({ref:t},p),{},{components:n})):r.createElement(f,i({ref:t},p))}));function h(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=u;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:a,i[1]=s;for(var c=2;c<o;c++)i[c]=n[c];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}u.displayName="MDXCreateElement"},6712:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>d,frontMatter:()=>o,metadata:()=>s,toc:()=>c});var r=n(7462),a=(n(7294),n(3905));const o={sidebar_position:7,title:"Shadow vs active enforcement"},i=void 0,s={unversionedId:"shadow-vs-active-enforcement/README",id:"shadow-vs-active-enforcement/README",title:"Shadow vs active enforcement",description:"When installing Otterize, the intents operator can be configured to enforce access controls or not.",source:"@site/docs/shadow-vs-active-enforcement/README.mdx",sourceDirName:"shadow-vs-active-enforcement",slug:"/shadow-vs-active-enforcement/",permalink:"/shadow-vs-active-enforcement/",draft:!1,editUrl:"https://github.com/otterize/docs/edit/main/docs/shadow-vs-active-enforcement/README.mdx",tags:[],version:"current",sidebarPosition:7,frontMatter:{sidebar_position:7,title:"Shadow vs active enforcement"},sidebar:"docSidebar",previous:{title:"IBAC: Intent-based access control",permalink:"/intent-based-access-control/"},next:{title:"Otterize OSS",permalink:"/otterize-oss/"}},l={},c=[{value:"Active enforcement",id:"active-enforcement",level:2},{value:"Shadow enforcement",id:"shadow-enforcement",level:2}],p={toc:c};function d(e){let{components:t,...o}=e;return(0,a.kt)("wrapper",(0,r.Z)({},p,o,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"When installing Otterize, the intents operator can be ",(0,a.kt)("a",{parentName:"p",href:"/reference/configuration/intents-operator/helm-chart"},"configured")," to enforce access controls or not."),(0,a.kt)("p",null,"By default, the intents operator enforces access controls by creating, updating and deleting network policies and Kafka ACLs, for example, but all enforcement can be disabled by setting ",(0,a.kt)("inlineCode",{parentName:"p"},"enableEnforcement")," to be ",(0,a.kt)("inlineCode",{parentName:"p"},"false"),", or more granularly setting ",(0,a.kt)("inlineCode",{parentName:"p"},"enableNetworkPolicyCreation")," and/or ",(0,a.kt)("inlineCode",{parentName:"p"},"enableNetworkPolicyCreation")," to be ",(0,a.kt)("inlineCode",{parentName:"p"},"false"),"."),(0,a.kt)("h2",{id:"active-enforcement"},"Active enforcement"),(0,a.kt)("p",null,"When enforcement is active ","\u2014"," when it is not disabled ","\u2014"," the intents operator processes client intents and turns each into access authorizations from the client to its called servers: if network policies are active (and supported by the CNI in the Kubernetes cluster), the operator labels pods and creates/updates network policies to allow access from that client to all its called servers, as well as removing previously-granted access based on out of date intents; and similarly for Kafka ACLs to Kafka servers."),(0,a.kt)("p",null,"In general, of course, this will immediately block access from services that have not declared their intents to call the now-protected servers. That is, after all, why you use intent-based access control (IBAC)."),(0,a.kt)("p",null,"Whether this is a good thing or a problem depends on your situation. There are multiple ways of rolling out IBAC across the many services that may be running in some environment or Kubernetes cluster."),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"For example, you can insist that all services are protected by default, with a global default-deny network policy. In the case of Kafka, you can achieve the same with an appropriate restrictive access policy (see the ",(0,a.kt)("a",{parentName:"li",href:"/reference/configuration/intents-operator/configuration"},"Otterize KafkaServiceConfig documentation"),"). All clients must then declare and apply intents in order to reach their intended servers."),(0,a.kt)("li",{parentName:"ul"},"You can bootstrap these intents by generating the client intents files using the Otterize network mapper (see ",(0,a.kt)("a",{parentName:"li",href:"/quick-visual-tutorials/visual-ibac-network-policies#protect-everything-easily"},"this quick visual tutorial"),"), and then hand them over to the client developer teams to own and update as their code evolves."),(0,a.kt)("li",{parentName:"ul"},"Or you can gradually roll out IBAC, starting with just a few services and expanding to more (see ",(0,a.kt)("a",{parentName:"li",href:"/quick-visual-tutorials/visual-ibac-network-policies"},"this network policies tutorial")," or ",(0,a.kt)("a",{parentName:"li",href:"/quick-visual-tutorials/visual-ibac-kafka-k8s"},"this Kafka ACLs tutorial"),").")),(0,a.kt)("p",null,"To help you manage the rollout of IBAC, consider starting with shadow enforcement."),(0,a.kt)("h2",{id:"shadow-enforcement"},"Shadow enforcement"),(0,a.kt)("p",null,"When enforcement is not active, the intents operator still processes client intents files, but it does not then turn them into access authorizations: no network policies are created or deleted or changed in any way, and similarly no Kafka ACLs are created, deleted, or modified."),(0,a.kt)("p",null,"How does this help?"),(0,a.kt)("p",null,"The intents operator still reflects what access controls ",(0,a.kt)("em",{parentName:"p"},"would be in place")," should enforcement be enabled. For example, you can query Kubernetes to see the ClientIntents resources that are in place, so you know which clients have declared (and applied) their intents to call which servers."),(0,a.kt)("p",null,"And the Otterize network mapper, if installed in the Kubernetes cluster, still reflects which clients have ",(0,a.kt)("em",{parentName:"p"},"in fact")," been calling which servers, whether successfully or not. Those are ",(0,a.kt)("em",{parentName:"p"},"discovered")," intents: presumably, the clients intended to call those servers, whether they have declared (and applied) them or not."),(0,a.kt)("p",null,'So by operating in this "shadow mode", and comparing the discovered intents with the declared intents, you can predict what ',(0,a.kt)("em",{parentName:"p"},"would")," happen if enforcement were to be active: which clients calls that are in fact happening now would be blocked or allowed, which servers are ready to have enforcement for them activated because none of their clients would get blocked, and so on."),(0,a.kt)("p",null,"To unlock these insights, the Otterize OSS components (the intents operator, the network mapper, and the credentials operator) can be configured to connect to Otterize Cloud in order to report their configurations, the discovered intents, and the declared intents in the cluster. Within Otterize Cloud, the results are processed and displayed as an access graph:"),(0,a.kt)("p",null,(0,a.kt)("img",{alt:"Otterize Cloud - access graph",src:n(6021).Z,width:"1671",height:"785"})),(0,a.kt)("p",null,"You can read more about the access graph in the ",(0,a.kt)("a",{parentName:"p",href:"/otterize-cloud"},"Otterize Cloud")," documentation."),(0,a.kt)("p",null,"And for a quick tutorial that shows how to use shadow enforcement to roll out IBAC gradually and controllably, start with the ",(0,a.kt)("a",{parentName:"p",href:"/quick-visual-tutorials/visual-k8s-cluster-mapping"},"Kubernetes cluster mapping tutorial")," and proceed to ",(0,a.kt)("a",{parentName:"p",href:"/quick-visual-tutorials/visual-ibac-network-policies"},"IBAC with network policies")," and ",(0,a.kt)("a",{parentName:"p",href:"/quick-visual-tutorials/visual-ibac-kafka-k8s"},"IBAC for Kafka in Kubernetes"),"."))}d.isMDXComponent=!0},6021:(e,t,n)=>{n.d(t,{Z:()=>r});const r=n.p+"assets/images/access-graph-screenshot-998b1b6b2b1072fa073ed2fdc7c0c421.png"}}]);