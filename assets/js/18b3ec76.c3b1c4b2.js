"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[136],{3905:(e,t,a)=>{a.d(t,{Zo:()=>p,kt:()=>m});var n=a(7294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function s(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function i(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?s(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):s(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function l(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},s=Object.keys(e);for(n=0;n<s.length;n++)a=s[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(n=0;n<s.length;n++)a=s[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var o=n.createContext({}),c=function(e){var t=n.useContext(o),a=t;return e&&(a="function"==typeof e?e(t):i(i({},t),e)),a},p=function(e){var t=c(e.components);return n.createElement(o.Provider,{value:t},e.children)},k={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},u=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,s=e.originalType,o=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),u=c(a),m=r,d=u["".concat(o,".").concat(m)]||u[m]||k[m]||s;return a?n.createElement(d,i(i({ref:t},p),{},{components:a})):n.createElement(d,i({ref:t},p))}));function m(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var s=a.length,i=new Array(s);i[0]=u;var l={};for(var o in t)hasOwnProperty.call(t,o)&&(l[o]=t[o]);l.originalType=e,l.mdxType="string"==typeof e?e:r,i[1]=l;for(var c=2;c<s;c++)i[c]=a[c];return n.createElement.apply(null,i)}return n.createElement.apply(null,a)}u.displayName="MDXCreateElement"},5162:(e,t,a)=>{a.d(t,{Z:()=>i});var n=a(7294),r=a(6010);const s="tabItem_Ymn6";function i(e){let{children:t,hidden:a,className:i}=e;return n.createElement("div",{role:"tabpanel",className:(0,r.Z)(s,i),hidden:a},t)}},5488:(e,t,a)=>{a.d(t,{Z:()=>m});var n=a(7462),r=a(7294),s=a(6010),i=a(2389),l=a(7392),o=a(7094),c=a(2466);const p="tabList__CuJ",k="tabItem_LNqP";function u(e){var t,a;const{lazy:i,block:u,defaultValue:m,values:d,groupId:f,className:h}=e,g=r.Children.map(e.children,(e=>{if((0,r.isValidElement)(e)&&"value"in e.props)return e;throw new Error("Docusaurus error: Bad <Tabs> child <"+("string"==typeof e.type?e.type:e.type.name)+'>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.')})),N=null!=d?d:g.map((e=>{let{props:{value:t,label:a,attributes:n}}=e;return{value:t,label:a,attributes:n}})),v=(0,l.l)(N,((e,t)=>e.value===t.value));if(v.length>0)throw new Error('Docusaurus error: Duplicate values "'+v.map((e=>e.value)).join(", ")+'" found in <Tabs>. Every value needs to be unique.');const b=null===m?m:null!=(t=null!=m?m:null==(a=g.find((e=>e.props.default)))?void 0:a.props.value)?t:g[0].props.value;if(null!==b&&!N.some((e=>e.value===b)))throw new Error('Docusaurus error: The <Tabs> has a defaultValue "'+b+'" but none of its children has the corresponding value. Available values are: '+N.map((e=>e.value)).join(", ")+". If you intend to show no default tab, use defaultValue={null} instead.");const{tabGroupChoices:y,setTabGroupChoices:S}=(0,o.U)(),[w,T]=(0,r.useState)(b),C=[],{blockElementScrollPositionUntilNextRender:E}=(0,c.o5)();if(null!=f){const e=y[f];null!=e&&e!==w&&N.some((t=>t.value===e))&&T(e)}const I=e=>{const t=e.currentTarget,a=C.indexOf(t),n=N[a].value;n!==w&&(E(t),T(n),null!=f&&S(f,String(n)))},z=e=>{var t;let a=null;switch(e.key){case"ArrowRight":{var n;const t=C.indexOf(e.currentTarget)+1;a=null!=(n=C[t])?n:C[0];break}case"ArrowLeft":{var r;const t=C.indexOf(e.currentTarget)-1;a=null!=(r=C[t])?r:C[C.length-1];break}}null==(t=a)||t.focus()};return r.createElement("div",{className:(0,s.Z)("tabs-container",p)},r.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,s.Z)("tabs",{"tabs--block":u},h)},N.map((e=>{let{value:t,label:a,attributes:i}=e;return r.createElement("li",(0,n.Z)({role:"tab",tabIndex:w===t?0:-1,"aria-selected":w===t,key:t,ref:e=>C.push(e),onKeyDown:z,onFocus:I,onClick:I},i,{className:(0,s.Z)("tabs__item",k,null==i?void 0:i.className,{"tabs__item--active":w===t})}),null!=a?a:t)}))),i?(0,r.cloneElement)(g.filter((e=>e.props.value===w))[0],{className:"margin-top--md"}):r.createElement("div",{className:"margin-top--md"},g.map(((e,t)=>(0,r.cloneElement)(e,{key:t,hidden:e.props.value!==w})))))}function m(e){const t=(0,i.Z)();return r.createElement(u,(0,n.Z)({key:String(t)},e))}},9810:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>p,contentTitle:()=>o,default:()=>m,frontMatter:()=>l,metadata:()=>c,toc:()=>k});var n=a(7462),r=(a(7294),a(3905)),s=a(5488),i=a(5162);const l={sidebar_position:4,title:"IBAC for Kafka"},o=void 0,c={unversionedId:"documentation/guides/ibac-for-kafka",id:"documentation/guides/ibac-for-kafka",title:"IBAC for Kafka",description:"Recap: controlling access to Kafka (incl. mTLS or tokens, users and ACLs, different ports)",source:"@site/docs/documentation/3-guides/4-ibac-for-kafka.md",sourceDirName:"documentation/3-guides",slug:"/documentation/guides/ibac-for-kafka",permalink:"/documentation/guides/ibac-for-kafka",draft:!1,editUrl:"https://github.com/otterize/docs/edit/main/docs/documentation/3-guides/4-ibac-for-kafka.md",tags:[],version:"current",sidebarPosition:4,frontMatter:{sidebar_position:4,title:"IBAC for Kafka"},sidebar:"docSidebar",previous:{title:"IBAC via network policies",permalink:"/documentation/guides/ibac-via-network-policies"},next:{title:"Terminology",permalink:"/documentation/core/terminology"}},p={},k=[{value:"Recap: controlling access to Kafka (incl. mTLS or tokens, users and ACLs, different ports)",id:"recap-controlling-access-to-kafka-incl-mtls-or-tokens-users-and-acls-different-ports",level:2},{value:"Configuring Kafka for secure access",id:"configuring-kafka-for-secure-access",level:2},{value:"Testing secure connection to Kafka",id:"testing-secure-connection-to-kafka",level:3},{value:"Setting security scope via\u2026",id:"setting-security-scope-via",level:2},{value:"\u2026",id:"",level:2},{value:"Practical notes",id:"practical-notes",level:2},{value:"Credentials",id:"credentials",level:3},{value:"Inspecting Kafka credentials - Keystore",id:"inspecting-kafka-credentials---keystore",level:3},{value:"Inspecting Kafka credentials - Truststore",id:"inspecting-kafka-credentials---truststore",level:3},{value:"Inspecting client credentials",id:"inspecting-client-credentials",level:3},{value:"Validating client credentials",id:"validating-client-credentials",level:3},{value:"Avoiding drift",id:"avoiding-drift",level:2},{value:"Granularities of access <em>(incl. via network policies, via authN-only, &amp; topic-level)</em>",id:"granularities-of-access-incl-via-network-policies-via-authn-only--topic-level",level:2}],u={toc:k};function m(e){let{components:t,...a}=e;return(0,r.kt)("wrapper",(0,n.Z)({},u,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"recap-controlling-access-to-kafka-incl-mtls-or-tokens-users-and-acls-different-ports"},"Recap: controlling access to Kafka (incl. mTLS or tokens, users and ACLs, different ports)"),(0,r.kt)("h2",{id:"configuring-kafka-for-secure-access"},"Configuring Kafka for secure access"),(0,r.kt)("p",null,"To configure kafka for secure access we have multiple areas we need to modify in its configuration to prepare for secure\naccess and another where we add annotations to let Otterize know it needs to generate credentials for secure access."),(0,r.kt)("p",null,"The following example shows how to configure bitnami's popular\nkafka ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/bitnami/charts/tree/master/bitnami/kafka"},"chart"),":"),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("p",{parentName:"admonition"},"Though SSL was replaced by TLS, Kafka still uses the term SSL internally.")),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Allow Otterize to manage Kafka by adding it as a super user wtih:"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},'superUsers: "User:CN=kafka.kafka,O=SPIRE,C=US;User:CN=intents-operator.otterize,O=SPIRE,C=US"\n'))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Configure its ",(0,r.kt)("a",{parentName:"p",href:"https://www.confluent.io/blog/kafka-listeners-explained/"},"listeners")," to use SSL"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},'listeners:\n  - "CLIENT://:9092"\n  - "INTERNAL://:9093"\nadvertisedListeners:\n  - "CLIENT://:9092"\n  - "INTERNAL://:9093"\nlistenerSecurityProtocolMap: "INTERNAL:SSL,CLIENT:SSL"\n'))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Set the authentication parameters to"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Use mTLS"),(0,r.kt)("li",{parentName:"ul"},"Having the credentials stored in a Java KeyStore (JKS) format stored in a K8s secret called ",(0,r.kt)("inlineCode",{parentName:"li"},"kafka-tls-secret"),"\nwith a password set to ",(0,r.kt)("inlineCode",{parentName:"li"},"password"),"."),(0,r.kt)("li",{parentName:"ul"},"Deny anonymous access")),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},"auth: \n  clientProtocol: mtls\n  interBrokerProtocol: mtls\n  tls:\n    type: jks\n    existingSecrets:\n      - kafka-tls-secret\n    password: password\nauthorizerClassName: kafka.security.authorizer.AclAuthorizer\nallowEveryoneIfNoAclFound: true  \n"))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Add pod annotations to let Otterize know it needs to generate the JKS credentials and store them at the specified K8s\nsecret according to bitnami's\nchart ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/bitnami/charts/tree/master/bitnami/kafka#enable-security-for-kafka-and-zookeeper"},"specifications")," :"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},'podAnnotations:\n  otterize/cert-type: jks\n  otterize/tls-secret-name: kafka-tls-secret\n  otterize/truststore-file-name: kafka.truststore.jks\n  otterize/keystore-file-name: kafka-keystore.jks\n  otterize/dns-names: "kafka-0.kafka-headless.kafka.svc.cluster.local,kafka.kafka.svc.cluster.local"\n  otterize/cert-ttl: "31536000" # 1 year\n')))),(0,r.kt)("details",null,(0,r.kt)("summary",null,"Expand to see the complete YAML of this example..."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},'superUsers: "User:CN=kafka.kafka,O=SPIRE,C=US;User:CN=intents-operator.otterize,O=SPIRE,C=US"\nlisteners:\n  - "CLIENT://:9092"\n  - "INTERNAL://:9093"\nadvertisedListeners:\n  - "CLIENT://:9092"\n  - "INTERNAL://:9093"\nlistenerSecurityProtocolMap: "INTERNAL:SSL,CLIENT:SSL"\nauth:\n  clientProtocol: mtls\n  interBrokerProtocol: mtls\n  tls:\n    type: jks\n    existingSecrets:\n      - kafka-tls-secret\n    password: password\nauthorizerClassName: kafka.security.authorizer.AclAuthorizer\nallowEveryoneIfNoAclFound: true\npodAnnotations:\n  otterize/cert-type: jks\n  otterize/tls-secret-name: kafka-tls-secret\n  otterize/truststore-file-name: kafka.truststore.jks\n  otterize/keystore-file-name: kafka-keystore.jks\n  otterize/dns-names: "kafka-0.kafka-headless.kafka.svc.cluster.local,kafka.kafka.svc.cluster.local"\n  otterize/cert-ttl: "31536000" # 1 year\n'))),(0,r.kt)("h3",{id:"testing-secure-connection-to-kafka"},"Testing secure connection to Kafka"),(0,r.kt)("p",null,"You can set up an interactive session that securely connects to Kafka by deploying a pod configured to get credentials\nand using the popular ",(0,r.kt)("a",{parentName:"p",href:"https://kafka.apache.org/quickstart#quickstart_send"},"kafka-console-producer")," and\n",(0,r.kt)("a",{parentName:"p",href:"https://kafka.apache.org/quickstart#quickstart_consume"},"kafka-console-consumer")," scripts:"),(0,r.kt)("details",null,(0,r.kt)("summary",null,"Expand to see the details of this example..."),(0,r.kt)(s.Z,{mdxType:"Tabs"},(0,r.kt)(i.Z,{value:"namespace.yaml",label:"namespace.yaml",default:!0,mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},"apiVersion: v1\nkind: Namespace\nmetadata:\nname: otterize-tutorial-kafka-mtls\n"))),(0,r.kt)(i.Z,{value:"interactive.yaml",label:"interactive.yaml",default:!0,mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},'apiVersion: apps/v1\nkind: Deployment\nmetadata:\nname: interactive\nnamespace: otterize-tutorial-kafka-mtls\nspec:\nselector:\n matchLabels:\n   app: interactive\ntemplate:\n metadata:\n   labels:\n     app: interactive\n   annotations:\n     otterize/tls-secret-name: interactive-credentials-secret\n     otterize/cert-type: jks\n     otterize/truststore-file-name: kafka.truststore.jks\n     otterize/keystore-file-name: kafka.keystore.jks\n     otterize/cert-ttl: "2592000"\n spec:\n   containers:\n     - name: interactive\n       image: bitnami/kafka\n       command: [ "/bin/sh", "-c", "--" ]\n       args: [ "sleep infinity" ]\n       volumeMounts:\n         - mountPath: /app\n           name: interactive-properties\n         - name: otterize-credentials\n           mountPath: /var/otterize/credentials\n           readOnly: true\n   volumes:\n     - name: interactive-properties\n       configMap:\n         name: interactive-properties\n     - name: otterize-credentials\n       secret:\n         secretName: interactive-credentials-secret\n'))),(0,r.kt)(i.Z,{value:"interactive-configmap.yaml",label:"interactive-configmap.yaml",default:!0,mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},"apiVersion: v1\nkind: ConfigMap\nmetadata:\nname: interactive-properties\nnamespace: otterize-tutorial-kafka-mtls\ndata:\nclient.properties: |\n security.protocol=SSL\n ssl.keystore.location=/var/otterize/credentials/kafka.keystore.jks\n ssl.keystore.password=password\n ssl.truststore.location=/var/otterize/credentials/kafka.truststore.jks\n ssl.truststore.password=password\n"))))),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Deploy a pod configured for the interactive session connecting to Kafka"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"kubectl apply -f https://docs.otterize.com/code-examples/kafka-mtls/shell/all.yaml\n"))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Check that the ",(0,r.kt)("inlineCode",{parentName:"p"},"pod")," was deployed"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"kubectl get pods -n otterize-tutorial-kafka-mtls -l app=interactive\n")),(0,r.kt)("p",{parentName:"li"},"You should see"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre"},"NAME                           READY   STATUS    RESTARTS   AGE\ninteractive-5568ff58ff-84ksc   1/1     Running   0          8s\n"))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Let's open two interactive terminal windows - one for the producer and one for the consumer with so we can see\nthe messages sent and received in real time:"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-bash",metastring:'title="Producer terminal"',title:'"Producer','terminal"':!0},"kubectl exec -n otterize-tutorial-kafka-mtls -it deploy/interactive -- bash \\\n/opt/bitnami/kafka/bin/kafka-console-producer.sh \\\n--bootstrap-server kafka.kafka:9092 \\\n-topic mytopic \\\n--producer.config /app/client.properties\n")),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-bash",metastring:'title="Consumer terminal"',title:'"Consumer','terminal"':!0},"kubectl exec -n otterize-tutorial-kafka-mtls -it deploy/interactive -- bash \\\n/opt/bitnami/kafka/bin/kafka-console-consumer.sh \\\n--bootstrap-server kafka.kafka:9092 \\\n-topic mytopic \\\n--consumer.config /app/client.properties\n"))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Write any text you wish on the ",(0,r.kt)("strong",{parentName:"p"},"producer terminal"),", send it with an ",(0,r.kt)("strong",{parentName:"p"},"enter")," and you will see the messages appear\non the"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-bash",metastring:'title="Producer terminal"',title:'"Producer','terminal"':!0},">Hello there consumer, this is the producer!\n>\n")),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-bash",metastring:'title="Consumer terminal"',title:'"Consumer','terminal"':!0},"Hello there consumer, this is the producer!\n")))),(0,r.kt)("h2",{id:"setting-security-scope-via"},"Setting security scope via\u2026"),(0,r.kt)("h2",{id:""},"\u2026"),(0,r.kt)("h2",{id:"practical-notes"},"Practical notes"),(0,r.kt)("h3",{id:"credentials"},"Credentials"),(0,r.kt)("p",null,"Kafka expects credentials to be stored in teh Java Keystore format."),(0,r.kt)("h3",{id:"inspecting-kafka-credentials---keystore"},"Inspecting Kafka credentials - Keystore"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"Retrieve the Keystore with",(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"kubectl get secret -n kafka kafka-tls-secret -o jsonpath='{.data.kafka-keystore\\.jks}' | base64 -d > kafka-keystore.jks\n"))),(0,r.kt)("li",{parentName:"ol"},"Extract the certificate from the store",(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"keytool -storepass password -keystore kafka-keystore.jks -alias pkey -exportcert -rfc > server.pem\n"))),(0,r.kt)("li",{parentName:"ol"},"Inspect it with",(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"openssl x509 -in server.pem -text\n")),"You should see",(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre"},"Certificate:\n    Data:\n        Version: 3 (0x2)\n        Serial Number:\n            06:3c:6b:b9:39:33:74:44:2d:e6:66:72:4b:0c:a0:f4\n        Signature Algorithm: sha256WithRSAEncryption\n        Issuer: C = US, O = SPIRE\n        Validity\n            Not Before: Sep  9 21:50:24 2022 GMT\n            Not After : Sep  9 21:53:34 2022 GMT\n        Subject: C = US, O = SPIRE, CN = kafka.kafka\n        ... truncated\n\n            X509v3 Subject Alternative Name:\n                DNS:kafka.kafka, DNS:kafka-0.kafka-headless.kafka.svc.cluster.local, DNS:kafka.kafka.svc.cluster.local, URI:spiffe://example.org/otterize/namespace/kafka/service/kafka \n... truncated\n")))),(0,r.kt)("h3",{id:"inspecting-kafka-credentials---truststore"},"Inspecting Kafka credentials - Truststore"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"Retrieve the Truststore with",(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"kubectl get secret -n kafka kafka-tls-secret -o jsonpath='{.data.kafka\\.truststore\\.jks}' | base64 -d > kafka.truststore.jks\n"))),(0,r.kt)("li",{parentName:"ol"},"Extract the certificate from the store",(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"keytool -storepass password -keystore kafka.truststore.jks -alias ca-0 -exportcert -rfc > bundle.pem\n"))),(0,r.kt)("li",{parentName:"ol"},"Inspect it with",(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"openssl x509 -in bundle.pem -text\n")),"You should see",(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre"},"Certificate:\nData:\n    Version: 3 (0x2)\n    Serial Number: 0 (0x0)\n    Signature Algorithm: sha256WithRSAEncryption\n    Issuer: C = US, O = SPIRE\n    Validity\n        Not Before: Sep  6 09:59:21 2022 GMT\n        Not After : Sep  5 09:59:31 2025 GMT\n    Subject: C = US, O = SPIRE\n... truncated\n")))),(0,r.kt)("h3",{id:"inspecting-client-credentials"},"Inspecting client credentials"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"Retrieve the client credentials with",(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"kubectl get secret -n otterize-tutorial-kafka-mtls client-credentials-secret -o jsonpath='{.data.svid\\.pem}' | base64 -d > svid.pem\n"))),(0,r.kt)("li",{parentName:"ol"},"Inspect with",(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"openssl x509 -in svid.pem -text\n")),"You should see",(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre"},"Certificate:\nData:\n    Version: 3 (0x2)\n    Serial Number:\n        e3:81:42:74:5e:c4:d8:d9:cd:97:16:72:23:2e:90:62\n    Signature Algorithm: sha256WithRSAEncryption\n    Issuer: C = US, O = SPIRE\n    Validity\n        Not Before: Sep  9 21:06:52 2022 GMT\n        Not After : Sep 10 21:07:02 2022 GMT\n    Subject: C = US, O = SPIRE, CN = client.otterize-tutorial-kafka-mtls\n    ... truncated\n        X509v3 Subject Alternative Name:\n            DNS:client.otterize-tutorial-kafka-mtls, URI:spiffe://example.org/otterize/namespace/otterize-tutorial-kafka-mtls/service/client \n... truncated\n")))),(0,r.kt)("h3",{id:"validating-client-credentials"},"Validating client credentials"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"Retrieve the client credentials with",(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"kubectl get secret -n otterize-tutorial-kafka-mtls client-credentials-secret -o jsonpath='{.data.svid\\.pem}' | base64 -d > svid.pem\nkubectl get secret -n otterize-tutorial-kafka-mtls client-credentials-secret -o jsonpath='{.data.key\\.pem}' | base64 -d > key.pem\nkubectl get secret -n otterize-tutorial-kafka-mtls client-credentials-secret -o jsonpath='{.data.bundle\\.pem}' | base64 -d > bundle.pem\n"))),(0,r.kt)("li",{parentName:"ol"},"Validate that the key belongs to the certificate be comparing their public keys",(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"openssl pkey -pubout -in key.pem  | openssl md5\n")),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"openssl x509 -noout -pubkey -in svid.pem | openssl md5\n")),"If their public keys match you should see the same results for both executions, in the following format",(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"(stdin)= e01e28be4e3e11a70cdebe327e1aabc9\n"))),(0,r.kt)("li",{parentName:"ol"},"Verify that the certificates belongs to the bundle with",(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"openssl verify -CAfile bundle.pem svid.pem\n")),"You should see",(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"svid.pem: OK\n")))),(0,r.kt)("h2",{id:"avoiding-drift"},"Avoiding drift"),(0,r.kt)("h2",{id:"granularities-of-access-incl-via-network-policies-via-authn-only--topic-level"},"Granularities of access ",(0,r.kt)("em",{parentName:"h2"},"(incl. via network policies, via authN-only, & topic-level)")))}m.isMDXComponent=!0}}]);