"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[7679,7918],{5162:(e,t,n)=>{n.d(t,{Z:()=>r});var a=n(7294),o=n(6010);const l={tabItem:"tabItem_Ymn6"};function r(e){let{children:t,hidden:n,className:r}=e;return a.createElement("div",{role:"tabpanel",className:(0,o.Z)(l.tabItem,r),hidden:n},t)}},4866:(e,t,n)=>{n.d(t,{Z:()=>v});var a=n(7462),o=n(7294),l=n(6010),r=n(2466),i=n(6550),s=n(1980),c=n(7392),u=n(12);function p(e){return function(e){return o.Children.map(e,(e=>{if(!e||(0,o.isValidElement)(e)&&function(e){const{props:t}=e;return!!t&&"object"==typeof t&&"value"in t}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}(e).map((e=>{let{props:{value:t,label:n,attributes:a,default:o}}=e;return{value:t,label:n,attributes:a,default:o}}))}function d(e){const{values:t,children:n}=e;return(0,o.useMemo)((()=>{const e=t??p(n);return function(e){const t=(0,c.l)(e,((e,t)=>e.value===t.value));if(t.length>0)throw new Error(`Docusaurus error: Duplicate values "${t.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[t,n])}function m(e){let{value:t,tabValues:n}=e;return n.some((e=>e.value===t))}function h(e){let{queryString:t=!1,groupId:n}=e;const a=(0,i.k6)(),l=function(e){let{queryString:t=!1,groupId:n}=e;if("string"==typeof t)return t;if(!1===t)return null;if(!0===t&&!n)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return n??null}({queryString:t,groupId:n});return[(0,s._X)(l),(0,o.useCallback)((e=>{if(!l)return;const t=new URLSearchParams(a.location.search);t.set(l,e),a.replace({...a.location,search:t.toString()})}),[l,a])]}function k(e){const{defaultValue:t,queryString:n=!1,groupId:a}=e,l=d(e),[r,i]=(0,o.useState)((()=>function(e){let{defaultValue:t,tabValues:n}=e;if(0===n.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(t){if(!m({value:t,tabValues:n}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${t}" but none of its children has the corresponding value. Available values are: ${n.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return t}const a=n.find((e=>e.default))??n[0];if(!a)throw new Error("Unexpected error: 0 tabValues");return a.value}({defaultValue:t,tabValues:l}))),[s,c]=h({queryString:n,groupId:a}),[p,k]=function(e){let{groupId:t}=e;const n=function(e){return e?`docusaurus.tab.${e}`:null}(t),[a,l]=(0,u.Nk)(n);return[a,(0,o.useCallback)((e=>{n&&l.set(e)}),[n,l])]}({groupId:a}),g=(()=>{const e=s??p;return m({value:e,tabValues:l})?e:null})();(0,o.useLayoutEffect)((()=>{g&&i(g)}),[g]);return{selectedValue:r,selectValue:(0,o.useCallback)((e=>{if(!m({value:e,tabValues:l}))throw new Error(`Can't select invalid tab value=${e}`);i(e),c(e),k(e)}),[c,k,l]),tabValues:l}}var g=n(2389);const b={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};function f(e){let{className:t,block:n,selectedValue:i,selectValue:s,tabValues:c}=e;const u=[],{blockElementScrollPositionUntilNextRender:p}=(0,r.o5)(),d=e=>{const t=e.currentTarget,n=u.indexOf(t),a=c[n].value;a!==i&&(p(t),s(a))},m=e=>{let t=null;switch(e.key){case"Enter":d(e);break;case"ArrowRight":{const n=u.indexOf(e.currentTarget)+1;t=u[n]??u[0];break}case"ArrowLeft":{const n=u.indexOf(e.currentTarget)-1;t=u[n]??u[u.length-1];break}}t?.focus()};return o.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,l.Z)("tabs",{"tabs--block":n},t)},c.map((e=>{let{value:t,label:n,attributes:r}=e;return o.createElement("li",(0,a.Z)({role:"tab",tabIndex:i===t?0:-1,"aria-selected":i===t,key:t,ref:e=>u.push(e),onKeyDown:m,onClick:d},r,{className:(0,l.Z)("tabs__item",b.tabItem,r?.className,{"tabs__item--active":i===t})}),n??t)})))}function w(e){let{lazy:t,children:n,selectedValue:a}=e;const l=(Array.isArray(n)?n:[n]).filter(Boolean);if(t){const e=l.find((e=>e.props.value===a));return e?(0,o.cloneElement)(e,{className:"margin-top--md"}):null}return o.createElement("div",{className:"margin-top--md"},l.map(((e,t)=>(0,o.cloneElement)(e,{key:t,hidden:e.props.value!==a}))))}function y(e){const t=k(e);return o.createElement("div",{className:(0,l.Z)("tabs-container",b.tabList)},o.createElement(f,(0,a.Z)({},e,t)),o.createElement(w,(0,a.Z)({},e,t)))}function v(e){const t=(0,g.Z)();return o.createElement(y,(0,a.Z)({key:String(t)},e))}},3155:(e,t,n)=>{n.d(t,{Z:()=>B});var a=n(7462),o=n(7294),l=n(2389),r=n(6010),i=n(6412),s=n(5281),c=n(7016);const u={codeBlockContainer:"codeBlockContainer_APcc"};function p(e){let{as:t,...n}=e;const l=(0,i.p)(),p=(0,c.QC)(l);return o.createElement(t,(0,a.Z)({},n,{style:p,className:(0,r.Z)(n.className,u.codeBlockContainer,s.k.common.codeBlock)}))}const d={codeBlockContent:"codeBlockContent_m3Ux",codeBlockTitle:"codeBlockTitle_P25_",codeBlock:"codeBlock_qGQc",codeBlockStandalone:"codeBlockStandalone_zC50",codeBlockLines:"codeBlockLines_p187",codeBlockLinesWithNumbering:"codeBlockLinesWithNumbering_OFgW",buttonGroup:"buttonGroup_6DOT"};function m(e){let{children:t,className:n}=e;return o.createElement(p,{as:"pre",tabIndex:0,className:(0,r.Z)(d.codeBlockStandalone,"thin-scrollbar",n)},o.createElement("code",{className:d.codeBlockLines},t))}var h=n(6668),k=n(5448),g=n(3746);const b={codeLine:"codeLine_iPqp",codeLineNumber:"codeLineNumber_F4P7",codeLineContent:"codeLineContent_pOih"};var f=n(4996);function w(e){let{line:t,classNames:n,showLineNumbers:l,getLineProps:i,getTokenProps:s}=e;1===t.length&&"\n"===t[0].content&&(t[0].content="");const c=i({line:t,className:(0,r.Z)(n,l&&b.codeLine)}),u=t.map(((e,t)=>o.createElement("span",(0,a.Z)({key:t},s({token:e,key:t})))));return o.createElement("span",c,l?o.createElement(o.Fragment,null,o.createElement("span",{className:b.codeLineNumber}),o.createElement("span",{className:b.codeLineContent},u)):u,o.createElement("br",null))}var y=n(195),v=n(5999),N=n(345),C=n(7666);const T={copyButtonCopied:"copyButtonCopied__QnY",copyButtonIcons:"copyButtonIcons_FhaS",copyButtonIcon:"copyButtonIcon_phi_",copyButtonSuccessIcon:"copyButtonSuccessIcon_FfTR"};function E(e){let{code:t,className:n}=e;const[a,l]=(0,o.useState)(!1),i=(0,o.useRef)(void 0),s=(0,o.useCallback)((()=>{(0,y.Z)(t),l(!0),i.current=window.setTimeout((()=>{l(!1)}),1e3)}),[t]);return(0,o.useEffect)((()=>()=>window.clearTimeout(i.current)),[]),o.createElement("button",{type:"button","aria-label":a?(0,v.I)({id:"theme.CodeBlock.copied",message:"Copied",description:"The copied button label on code blocks"}):(0,v.I)({id:"theme.CodeBlock.copyButtonAriaLabel",message:"Copy code to clipboard",description:"The ARIA label for copy code blocks button"}),title:(0,v.I)({id:"theme.CodeBlock.copy",message:"Copy",description:"The copy button label on code blocks"}),className:(0,r.Z)("clean-btn",n,T.copyButton,a&&T.copyButtonCopied),onClick:s},o.createElement("span",{className:T.copyButtonIcons,"aria-hidden":"true"},o.createElement(N.Z,{className:T.copyButtonIcon}),o.createElement(C.Z,{className:T.copyButtonSuccessIcon})))}var I=n(670);const S={wordWrapButtonIcon:"wordWrapButtonIcon_iowe",wordWrapButtonEnabled:"wordWrapButtonEnabled_gY8A"};function z(e){let{className:t,onClick:n,isEnabled:a}=e;const l=(0,v.I)({id:"theme.CodeBlock.wordWrapToggle",message:"Toggle word wrap",description:"The title attribute for toggle word wrapping button of code block lines"});return o.createElement("button",{type:"button",onClick:n,className:(0,r.Z)("clean-btn",t,a&&S.wordWrapButtonEnabled),"aria-label":l,title:l},o.createElement(I.Z,{className:S.wordWrapButtonIcon,"aria-hidden":"true"}))}function A(e){let{children:t,className:n="",metastring:l,title:s,showLineNumbers:u,language:m}=e;const{prism:{defaultLanguage:b,magicComments:y}}=(0,h.L)(),v=m??(0,c.Vo)(n)??b,N=(0,i.p)(),C=(0,k.F)(),T=(0,c.bc)(l)||s,{lineClassNames:I,code:S}=(0,c.nZ)(t,{metastring:l,language:v,magicComments:y}),A=(0,f.Z)("/",{absolute:!0}).slice(0,-1),B=S.replaceAll("${ABSOLUTE_URL}",A),L=u??(0,c.nt)(l);return o.createElement(p,{as:"div",className:(0,r.Z)(n,v&&!n.includes(`language-${v}`)&&`language-${v}`)},T&&o.createElement("div",{className:d.codeBlockTitle},T),o.createElement("div",{className:d.codeBlockContent},o.createElement(g.ZP,(0,a.Z)({},g.lG,{theme:N,code:B,language:v??"text"}),(e=>{let{className:t,tokens:n,getLineProps:a,getTokenProps:l}=e;return o.createElement("pre",{tabIndex:0,ref:C.codeBlockRef,className:(0,r.Z)(t,d.codeBlock,"thin-scrollbar")},o.createElement("code",{className:(0,r.Z)(d.codeBlockLines,L&&d.codeBlockLinesWithNumbering)},n.map(((e,t)=>o.createElement(w,{key:t,line:e,getLineProps:a,getTokenProps:l,classNames:I[t],showLineNumbers:L})))))})),o.createElement("div",{className:d.buttonGroup},(C.isEnabled||C.isCodeScrollable)&&o.createElement(z,{className:d.codeButton,onClick:()=>C.toggle(),isEnabled:C.isEnabled}),o.createElement(E,{className:d.codeButton,code:B}))))}function B(e){let{children:t,...n}=e;const r=(0,l.Z)(),i=function(e){return o.Children.toArray(e).some((e=>(0,o.isValidElement)(e)))?e:Array.isArray(e)?e.join(""):e}(t),s="string"==typeof i?A:m;return o.createElement(s,(0,a.Z)({key:String(r)},n),i)}},3928:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>u,contentTitle:()=>s,default:()=>h,frontMatter:()=>i,metadata:()=>c,toc:()=>p});var a=n(7462),o=(n(7294),n(3905)),l=(n(3155),n(4866)),r=n(5162);const i={sidebar_position:2,title:"Visual tutorial: IBAC with network policies",sidebar_label:"IBAC with network policies"},s=void 0,c={unversionedId:"quick-visual-tutorials/visual-ibac-network-policies",id:"quick-visual-tutorials/visual-ibac-network-policies",title:"Visual tutorial: IBAC with network policies",description:"Otterize enables intent-based access control (IBAC).",source:"@site/docs/quick-visual-tutorials/visual-ibac-network-policies.mdx",sourceDirName:"quick-visual-tutorials",slug:"/quick-visual-tutorials/visual-ibac-network-policies",permalink:"/quick-visual-tutorials/visual-ibac-network-policies",draft:!1,editUrl:"https://github.com/otterize/docs/edit/main/docs/quick-visual-tutorials/visual-ibac-network-policies.mdx",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2,title:"Visual tutorial: IBAC with network policies",sidebar_label:"IBAC with network policies"},sidebar:"docSidebar",previous:{title:"Kubernetes cluster mapping",permalink:"/quick-visual-tutorials/visual-k8s-cluster-mapping"},next:{title:"IBAC for Kafka in Kubernetes",permalink:"/quick-visual-tutorials/visual-ibac-kafka-k8s"}},u={},p=[{value:"Prerequisites",id:"prerequisites",level:2},{value:"Seeing the access graph",id:"seeing-the-access-graph",level:2},{value:"Try out IBAC with shadow mode",id:"try-out-ibac-with-shadow-mode",level:2},{value:"Declare more intents",id:"declare-more-intents",level:3},{value:"Protect everything easily",id:"protect-everything-easily",level:3},{value:"Enable enforcement",id:"enable-enforcement",level:2},{value:"What&#39;s next",id:"whats-next",level:2},{value:"Teardown",id:"teardown",level:2}],d={toc:p},m="wrapper";function h(e){let{components:t,...i}=e;return(0,o.kt)(m,(0,a.Z)({},d,i,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"Otterize enables intent-based access control (IBAC).\nBuilding on the previous ",(0,o.kt)("a",{parentName:"p",href:"/quick-visual-tutorials/visual-k8s-cluster-mapping"},"Kubernetes cluster mapping tutorial"),", we'll actually roll out intent-based access control (IBAC) in the cluster using Kubernetes network policies to control access,\nfirst in shadow mode without enforcement, and then with enforcement on."),(0,o.kt)("p",null,"All the capabilities of IBAC are within Otterize OSS, while the access graph in Otterize Cloud will guide us visually in these steps."),(0,o.kt)("p",null,"In this tutorial, we will:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Start where the previous tutorial left off: with a demo based on the ",(0,o.kt)("a",{parentName:"li",href:"https://github.com/GoogleCloudPlatform/microservices-demo"},"Google microservices demo"),"\n(a simple e-commerce application) deployed to a Kubernetes cluster, with Otterize OSS installed in the cluster and integrated with Otterize Cloud."),(0,o.kt)("li",{parentName:"ul"},"Use the access graph and shadow mode along with intents to see what would happen once enforcement is turned on."),(0,o.kt)("li",{parentName:"ul"},"Turn on enforcement and verify that what happened is what was expected.")),(0,o.kt)("h2",{id:"prerequisites"},"Prerequisites"),(0,o.kt)("p",null,"The following steps are only needed if you haven't already run through the ",(0,o.kt)("a",{parentName:"p",href:"/quick-visual-tutorials/visual-k8s-cluster-mapping"},"Kubernetes cluster mapping tutorial"),"."),(0,o.kt)("details",null,(0,o.kt)("summary",null,"Prepare a cluster"),(0,o.kt)("p",null,"Before you start, you'll need a Kubernetes cluster."),(0,o.kt)("p",null,"Below are instructions for setting up a Kubernetes cluster with network policies.\nIf you don't have a cluster already, we recommend starting out with a Minikube cluster."),(0,o.kt)(l.Z,{groupId:"cni",mdxType:"Tabs"},(0,o.kt)(r.Z,{value:"minikube",label:"Minikube",mdxType:"TabItem"},(0,o.kt)("p",null,"If you don't have the Minikube CLI, first ",(0,o.kt)("a",{parentName:"p",href:"https://minikube.sigs.k8s.io/docs/start/"},"install it"),". "),(0,o.kt)("p",null,"Then start your Minikube cluster with Calico, in order to enforce network policies."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"minikube start --cpus=4 --memory 4096 --disk-size 32g --cni=calico\n")),(0,o.kt)("p",null,"The increased CPU, memory and disk resource allocations are required to be able to deploy the ecommerce app used in the visual tutorials successfully.")),(0,o.kt)(r.Z,{value:"gke",label:"Google GKE",mdxType:"TabItem"},(0,o.kt)("a",{href:"https://cloud.google.com/kubernetes-engine/docs/how-to/network-policy#gcloud"},"Visit the official documentation"),", or follow the instructions below:",(0,o.kt)(l.Z,{mdxType:"Tabs"},(0,o.kt)(r.Z,{value:"cli",label:"gcloud CLI",mdxType:"TabItem"},(0,o.kt)("p",null,"To use the gcloud CLI for this tutorial, first ",(0,o.kt)("a",{parentName:"p",href:"https://cloud.google.com/sdk/docs/install"},"install")," and then\n",(0,o.kt)("a",{parentName:"p",href:"https://cloud.google.com/sdk/docs/initializing"},"initialize")," it."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},(0,o.kt)("em",{parentName:"strong"},"To enable network policy enforcement when creating a new cluster:"))),(0,o.kt)("p",null,"Run the following command:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"gcloud container clusters create CLUSTER_NAME --enable-network-policy --zone=ZONE\n")),(0,o.kt)("p",null,"(Replace ",(0,o.kt)("inlineCode",{parentName:"p"},"CLUSTER_NAME")," with the name of the new cluster and ",(0,o.kt)("inlineCode",{parentName:"p"},"ZONE")," with your zone.)"),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},(0,o.kt)("em",{parentName:"strong"},"To enable network policy enforcement for an existing cluster, perform the following tasks:"))),(0,o.kt)("p",null,"Run the following command to enable the add-on:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"gcloud container clusters update CLUSTER_NAME --update-addons=NetworkPolicy=ENABLED\n")),(0,o.kt)("p",null,"(Replace ",(0,o.kt)("inlineCode",{parentName:"p"},"CLUSTER_NAME")," with the name of the cluster.)"),(0,o.kt)("p",null,"Then enable network policy enforcement on your cluster, re-creating your cluster's node pools with network policy enforcement enabled:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"gcloud container clusters update CLUSTER_NAME --enable-network-policy\n")),(0,o.kt)("p",null,"(Replace ",(0,o.kt)("inlineCode",{parentName:"p"},"CLUSTER_NAME")," with the name of the cluster.)")),(0,o.kt)(r.Z,{value:"console",label:"Console",mdxType:"TabItem"},(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},(0,o.kt)("em",{parentName:"strong"},"To enable network policy enforcement when creating a new cluster:"))),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Go to the Google Kubernetes Engine page in the Google Cloud console.\nThe remaining steps will appear automatically in the Google Cloud console.")),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"On the Google Kubernetes Engine page, click Create.")),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Configure your cluster as desired.")),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"From the navigation pane, under Cluster, click Networking.")),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Select the checkbox to Enable network policy.")),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Click Create."))),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},(0,o.kt)("em",{parentName:"strong"},"To enable network policy enforcement for an existing cluster:"))),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Go to the Google Kubernetes Engine page in the Google Cloud console. The remaining steps will appear automatically in the Google Cloud console.")),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"In the cluster list, click the name of the cluster you want to modify.")),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Under Networking, in the Network policy field, click Edit network policy.")),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Select the checkbox to Enable network policy for master and click Save Changes.")),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Wait for your changes to apply, and then click Edit network policy again.")),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Select the checkbox to Enable network policy for nodes.")),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Click Save Changes.")))))),(0,o.kt)(r.Z,{value:"eks",label:"AWS EKS",mdxType:"TabItem"},(0,o.kt)("p",null,"Starting August 29, 2023, ",(0,o.kt)("a",{parentName:"p",href:"https://aws.amazon.com/blogs/containers/amazon-vpc-cni-now-supports-kubernetes-network-policies"},"you can configure the built-in VPC CNI add-on to enable network policy support"),".\nTo spin up a new cluster, use the following ",(0,o.kt)("inlineCode",{parentName:"p"},"eksctl")," ",(0,o.kt)("inlineCode",{parentName:"p"},"ClusterConfig"),", and save it to a file called ",(0,o.kt)("inlineCode",{parentName:"p"},"cluster.yaml"),"."),(0,o.kt)("p",null,"Spin up the cluster using ",(0,o.kt)("inlineCode",{parentName:"p"},"eksctl create cluster -f cluster.yaml"),". This will spin up a cluster called ",(0,o.kt)("inlineCode",{parentName:"p"},"network-policy-demo")," in ",(0,o.kt)("inlineCode",{parentName:"p"},"us-west-2"),"."),(0,o.kt)("p",null,"The important bit is the configuration for the VPC CNI addon:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml"},'    configurationValues: |-\n       # highlight-next-line\n      enableNetworkPolicy: "true"\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml"},'apiVersion: eksctl.io/v1alpha5\nkind: ClusterConfig\n\nmetadata:\n  name: network-policy-demo\n  version: "1.27"\n  region: us-west-2\n\niam:\n  withOIDC: true\n\nvpc:\n  clusterEndpoints:\n    publicAccess: true\n    privateAccess: true\n\naddons:\n  - name: vpc-cni\n    version: 1.14.0\n    attachPolicyARNs: #optional\n    - arn:aws:iam::aws:policy/AmazonEKS_CNI_Policy \n    configurationValues: |-\n       # highlight-next-line\n      enableNetworkPolicy: "true"\n  - name: coredns\n  - name: kube-proxy\n\nmanagedNodeGroups:\n  - name: x86-al2-on-demand\n    amiFamily: AmazonLinux2\n    instanceTypes: [ "m6i.xlarge", "m6a.xlarge" ]\n    minSize: 0\n    desiredCapacity: 2\n    maxSize: 6\n    privateNetworking: true\n    disableIMDSv1: true\n    volumeSize: 100\n    volumeType: gp3\n    volumeEncrypted: true\n    tags:\n      team: "eks"\n')),(0,o.kt)("p",null,"For guides that deploy the larger set of services, Kafka and ZooKeeper are also deployed, and you will also need the EBS CSI driver to accommodate their storage needs. ",(0,o.kt)("a",{parentName:"p",href:"https://docs.aws.amazon.com/eks/latest/userguide/managing-ebs-csi.html"},"Follow the AWS guide for the EBS CSI add-on to do so."),"\nIf you're not using the VPC CNI, you can set up the Calico network policy controller using the following instructions:"),(0,o.kt)("a",{href:"https://docs.aws.amazon.com/eks/latest/userguide/calico.html"},"Visit the official documentation"),", or follow the instructions below:",(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"Spin up an ",(0,o.kt)("a",{parentName:"li",href:"https://docs.aws.amazon.com/eks/latest/userguide/create-cluster.html"},"EKS cluster")," using the console, AWS CLI or ",(0,o.kt)("inlineCode",{parentName:"li"},"eksctl"),"."),(0,o.kt)("li",{parentName:"ol"},"Install Calico for network policy enforcement, without replacing the CNI:")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"kubectl apply -f https://raw.githubusercontent.com/aws/amazon-vpc-cni-k8s/v1.12.6/config/master/calico-operator.yaml\nkubectl apply -f https://raw.githubusercontent.com/aws/amazon-vpc-cni-k8s/v1.12.6/config/master/calico-crs.yaml\n"))),(0,o.kt)(r.Z,{value:"aks",label:"Azure AKS",mdxType:"TabItem"},(0,o.kt)("p",null,"You can set up an AKS cluster using this ",(0,o.kt)("a",{parentName:"p",href:"https://learn.microsoft.com/en-us/azure/aks/learn/quick-kubernetes-deploy-cli"},"guide"),"."),(0,o.kt)("p",null,"For network policy support, no setup is required: Azure AKS comes with a built-in network policy implementation called Azure Network Policy Manager. You can choose whether you'd like to use this option or Calico when you create a cluster."),(0,o.kt)("a",{href:"https://learn.microsoft.com/en-us/azure/aks/use-network-policies"}," Read more at the official documentation site"),"."))),(0,o.kt)("details",null,(0,o.kt)("summary",null,"Deploy the demo set of services"),(0,o.kt)("p",null,"To deploy these into your cluster:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"kubectl create namespace otterize-ecom-demo\nkubectl apply -n otterize-ecom-demo -f ${ABSOLUTE_URL}/code-examples/shadow-mode/ecom-demo.yaml\n"))),(0,o.kt)("details",null,(0,o.kt)("summary",null,"Create an Otterize Cloud account"),(0,o.kt)("p",null,"If you don't already have an account, browse to ",(0,o.kt)("a",{parentName:"p",href:"https://app.otterize.com"},"https://app.otterize.com")," to set one up."),(0,o.kt)("p",null,"If someone in your team has already created an org in Otterize Cloud, and invited you (using your email address), you may see an invitation to accept."),(0,o.kt)("p",null,"Otherwise, you'll create a new org, which you can later rename, and invite your teammates to join you there.")),(0,o.kt)("details",null,(0,o.kt)("summary",null,"Install Otterize OSS"),(0,o.kt)("p",null,'If no Kubernetes clusters are connected to your account, click the "Connect your cluster" button to:'),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"Create a Cloud cluster object, specifying its name and the name of an environment to which all namespaces in that cluster will belong, by default."),(0,o.kt)("li",{parentName:"ol"},'Connect it with your actual Kubernetes cluster, by clicking on the "Connection guide ',"\u2192","\" link and running the Helm commands shown there. You'll want to use ",(0,o.kt)("inlineCode",{parentName:"li"},"mode=defaultShadow")," so you're in shadow mode on every server until you're ready to protect it.")),(0,o.kt)("details",null,(0,o.kt)("summary",null,"More details, if you're curious"),(0,o.kt)("p",null,"Connecting your cluster simply entails installing Otterize OSS via Helm, using credentials from your account so Otterize OSS can report information needed to visualize the cluster."),(0,o.kt)("p",null,"The credentials will already be inlined into the Helm command shown in the Cloud UI, so you just need to copy that line and run it from your shell.\nIf you don't give it the Cloud credentials, Otterize OSS will run fully standalone in your cluster ","\u2014"," you just won't have the visualization in Otterize Cloud."),(0,o.kt)("p",null,'The Helm command shown in the Cloud UI also includes flags to turn off enforcement: Otterize OSS will be running in "shadow mode," meaning that it will not create network policies to restrict pod-to-pod traffic, or create Kafka ACLs to control access to Kafka topics. Instead, it will report to Otterize Cloud what ',(0,o.kt)("strong",{parentName:"p"},"would")," happen if enforcement were to be enabled, guiding you to implement IBAC without blocking intended access."))),(0,o.kt)("details",null,(0,o.kt)("summary",null,"Optional: check that the demo was deployed..."),(0,o.kt)("p",null,"To see all the pods in the demo:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"kubectl get pods -n otterize-ecom-demo\n")),(0,o.kt)("p",null,"The pods should all be ready and running:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"NAME                                     READY   STATUS    RESTARTS      AGE\nadservice-65494cbb9d-5lrv6               1/1     Running   0             115s\ncartservice-6d84fc45bb-hdtwn             1/1     Running   0             115s\ncheckoutservice-5599486df-dvj9n          1/1     Running   0             115s\ncurrencyservice-6d64686d74-lxb7x         1/1     Running   0             115s\nemailservice-7c6cbfbbd7-xjxlt            1/1     Running   0             115s\nfrontend-f9448d7d4-6dmnr                 1/1     Running   0             115s\nkafka-0                                  1/1     Running   0             115s\nloadgenerator-7f6987f59-bchgm            1/1     Running   0             114s\norderservice-7ffdbf6df-wzzfd             1/1     Running   0             115s\notterize-ecom-demo-zookeeper-0           1/1     Running   0             115s\npaymentservice-86855d78db-zjjfn          1/1     Running   0             115s\nproductcatalogservice-5944c7f666-2rjc6   1/1     Running   0             115s\nrecommendationservice-6c8d848498-zm2rm   1/1     Running   0             114s\nredis-cart-6b79c5b497-xpms2              1/1     Running   0             115s\nshippingservice-85694cb9bd-v54xp         1/1     Running   0             114s\n"))),(0,o.kt)("details",null,(0,o.kt)("summary",null,"Optional: Browse the demo"),(0,o.kt)(l.Z,{groupId:"frontend-addr",mdxType:"Tabs"},(0,o.kt)(r.Z,{value:"k8s",label:"K8s",mdxType:"TabItem"},(0,o.kt)("p",null,"To get the externally-accessible URL where your demo front end is available, run:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"kubectl get service -n otterize-ecom-demo frontend-external | awk '{print $4}'\n")),(0,o.kt)("p",null,"The result should be similar to (if running on AWS EKS):"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"a11843075fd254f8099a986467098647-1889474685.us-east-1.elb.amazonaws.com\n")),(0,o.kt)("p",null,'Go ahead and browse to the URL above to "shop" and get a feel for the demo\'s behavior.\n(The URL might take some time to populate across DNS servers. Note that we are accessing an HTTP and not an HTTPS website.)')),(0,o.kt)(r.Z,{value:"minikube",label:"Minikube",mdxType:"TabItem"},(0,o.kt)("p",null,"To get the externally-accessible URL where your demo front end is available, run:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"kubectl port-forward -n otterize-ecom-demo service/frontend-external 8080:80 &\n")),(0,o.kt)("p",null,"The demo is now accessible at:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"http://localhost:8080\n")),(0,o.kt)("p",null,'Go ahead and browse to the URL above to "shop" and get a feel for the demo\'s behavior.')))),(0,o.kt)("h2",{id:"seeing-the-access-graph"},"Seeing the access graph"),(0,o.kt)("p",null,"In the Otterize Cloud UI, your ",(0,o.kt)("a",{parentName:"p",href:"https://app.otterize.com/clusters"},"cluster")," should now show all 3 Otterize OSS operators ","\u2014"," the intents operator, network mapper, and credentials operator ","\u2014"," as connected, with a green status."),(0,o.kt)("p",null,"And when you go back to the ",(0,o.kt)("a",{parentName:"p",href:"https://app.otterize.com/access-graph"},"access graph")," (and select your cluster from the dropdown, if needed), you should see the following map for the demo running in your cluster:"),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"Access graph",src:n(714).Z,width:"1467",height:"693"})),(0,o.kt)("p",null,"Each service is shown as a node in the access graph, while the thick lines (edges) connecting the services show access between them, as detected by the network mapper."),(0,o.kt)("p",null,"If you haven't already run through the ",(0,o.kt)("a",{parentName:"p",href:"/quick-visual-tutorials/visual-k8s-cluster-mapping"},"Kubernetes cluster mapping tutorial"),", you might  browse just ",(0,o.kt)("a",{parentName:"p",href:"/quick-visual-tutorials/visual-k8s-cluster-mapping#visualizing-the-cluster-via-the-access-graph"},"the section about visualizing the cluster via the access graph as you see it now"),", before returning here."),(0,o.kt)("h2",{id:"try-out-ibac-with-shadow-mode"},"Try out IBAC with shadow mode"),(0,o.kt)("p",null,"Now let's start to roll out access controls, but remain in shadow mode: no actual enforcement of controls, yet."),(0,o.kt)("p",null,"We'll declare that the ",(0,o.kt)("inlineCode",{parentName:"p"},"frontend")," intends to call the ",(0,o.kt)("inlineCode",{parentName:"p"},"recommendationservice"),"."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml"},"apiVersion: k8s.otterize.com/v1alpha2\nkind: ClientIntents\nmetadata:\n  name: frontend\nspec:\n  service:\n    name: frontend\n  calls:\n    - name: recommendationservice\n")),(0,o.kt)("p",null,"We expect this will provide secure access, allowing the intended access from the ",(0,o.kt)("inlineCode",{parentName:"p"},"frontend")," while protecting the ",(0,o.kt)("inlineCode",{parentName:"p"},"recommendationservice")," from unintended access."),(0,o.kt)("p",null,"Apply this intents file with:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"kubectl apply -n otterize-ecom-demo -f ${ABSOLUTE_URL}/code-examples/shadow-mode/phase-1.yaml\n")),(0,o.kt)("p",null,"Look at the access graph again:"),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"Access graph",src:n(5243).Z,width:"1465",height:"663"})),(0,o.kt)("p",null,"The thick green line from ",(0,o.kt)("inlineCode",{parentName:"p"},"frontend")," to ",(0,o.kt)("inlineCode",{parentName:"p"},"recommendationservice"),", representing the discovered intent from the network mapper, no longer has an empty center, but rather a ",(0,o.kt)("strong",{parentName:"p"},"solid black center, representing the explicitly declared intent"),"."),(0,o.kt)("p",null,"Click on that ",(0,o.kt)("inlineCode",{parentName:"p"},"frontend")," ","\u2192"," ",(0,o.kt)("inlineCode",{parentName:"p"},"recommendationservice")," line:"),(0,o.kt)("img",{src:"/img/quick-tutorials/shadow-mode/frontend-recommendation-applied.png",alt:"Discovered intents",width:"600"}),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"We can see the ",(0,o.kt)("inlineCode",{parentName:"li"},"frontend")," can call the ",(0,o.kt)("inlineCode",{parentName:"li"},"recommendationservice"),", and will be guaranteed access even once enforcement is turned on.")),(0,o.kt)("p",null,"Click on the ",(0,o.kt)("inlineCode",{parentName:"p"},"recommendationservice")," itself:"),(0,o.kt)("img",{src:"/img/quick-tutorials/shadow-mode/recommendation-access-state.png",alt:"Discovered intents",width:"600"}),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"We can see it's not protected now (we're in shadow mode, and there are no default-deny network policies in place)."),(0,o.kt)("li",{parentName:"ul"},"We can also see it would not block any clients once protection is enabled."),(0,o.kt)("li",{parentName:"ul"},"And there is no warning about it remaining unprotected once enforcement is turned on. All is ready for turning on enforcement and protecting this service from any unintended calls.")),(0,o.kt)("h3",{id:"declare-more-intents"},"Declare more intents"),(0,o.kt)("p",null,"Let\u2019s add another intent, this time from ",(0,o.kt)("inlineCode",{parentName:"p"},"recommendationservice")," to ",(0,o.kt)("inlineCode",{parentName:"p"},"productcatalogservice"),"."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml"},"apiVersion: k8s.otterize.com/v1alpha2\nkind: ClientIntents\nmetadata:\n  name: recommendationservice\nspec:\n  service:\n    name: recommendationservice\n  calls:\n    - name: productcatalogservice\n")),(0,o.kt)("p",null,"Apply this intents file with:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"kubectl apply -n otterize-ecom-demo -f ${ABSOLUTE_URL}/code-examples/shadow-mode/phase-2.yaml\n")),(0,o.kt)("p",null,"Look at the access graph again:"),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"Access graph",src:n(228).Z,width:"1469",height:"726"})),(0,o.kt)("p",null,"As before, the line from ",(0,o.kt)("inlineCode",{parentName:"p"},"recommendationservice")," ","\u2192"," ",(0,o.kt)("inlineCode",{parentName:"p"},"productcatalogservice")," now has a solid black center, and no warnings. That's what we expected."),(0,o.kt)("p",null,"But two other lines, ",(0,o.kt)("inlineCode",{parentName:"p"},"frontend")," ","\u2192"," ",(0,o.kt)("inlineCode",{parentName:"p"},"productcatalogservice")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"checkoutservice")," ","\u2192"," ",(0,o.kt)("inlineCode",{parentName:"p"},"productcatalogservice"),", have turned orange. And the ",(0,o.kt)("inlineCode",{parentName:"p"},"productcatalogservice")," lock icon has turned red. Why?"),(0,o.kt)("p",null,"Click on one of those orange lines:"),(0,o.kt)("img",{src:"/img/quick-tutorials/shadow-mode/frontend-productcatalog.png",alt:"Discovered intents",width:"600"}),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"This access is not blocked ",(0,o.kt)("em",{parentName:"li"},"now")," ","\u2014"," because we're still in shadow mode (otherwise the line would have been red)."),(0,o.kt)("li",{parentName:"ul"},"But access ",(0,o.kt)("em",{parentName:"li"},"would be blocked")," once enforcement is turned on. To prevent that, we're told to declare and apply an intent for this call.")),(0,o.kt)("p",null,"Click on the ",(0,o.kt)("inlineCode",{parentName:"p"},"productcatalogservice"),":"),(0,o.kt)("img",{src:"/img/quick-tutorials/shadow-mode/productcatalog-woud-block.png",alt:"Discovered intents",width:"600"}),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"We can see it's not protected now, as before."),(0,o.kt)("li",{parentName:"ul"},"But we can also see it ",(0,o.kt)("em",{parentName:"li"},"would")," block any clients once protection is enabled, which is why the lock is red."),(0,o.kt)("li",{parentName:"ul"},"And there is an explicit warning to apply the missing intents from all its clients before turning on enforcement.")),(0,o.kt)("p",null,"Let's add those intents for the ",(0,o.kt)("inlineCode",{parentName:"p"},"frontend")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"checkoutservice"),"."),(0,o.kt)(l.Z,{mdxType:"Tabs"},(0,o.kt)(r.Z,{value:"frontend",label:"frontend",default:!0,mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml"},"apiVersion: k8s.otterize.com/v1alpha2\nkind: ClientIntents\nmetadata:\n  name: frontend\nspec:\n  service:\n    name: frontend\n  calls:\n    - name: recommendationservice\n    - name: productcatalogservice\n\n"))),(0,o.kt)(r.Z,{value:"checkout-service",label:"checkoutservice",default:!0,mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml"},"apiVersion: k8s.otterize.com/v1alpha2\nkind: ClientIntents\nmetadata:\n  name: checkoutservice\nspec:\n  service:\n    name: checkoutservice\n  calls:\n    - name: productcatalogservice\n\n")))),(0,o.kt)("p",null,"Apply these intents files with:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"kubectl apply -n otterize-ecom-demo -f ${ABSOLUTE_URL}/code-examples/shadow-mode/phase-3.yaml\n")),(0,o.kt)("p",null,"Let's go back to the access graph:"),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"Access graph",src:n(4736).Z,width:"1468",height:"697"})),(0,o.kt)("p",null,"All is well again: the ",(0,o.kt)("inlineCode",{parentName:"p"},"productcatalogservice")," will be protected, and its 3 clients will still have access, after enforcement is turned on."),(0,o.kt)("admonition",{title:"We can see how to roll out IBAC gradually:",type:"tip"},(0,o.kt)("ol",{parentName:"admonition"},(0,o.kt)("li",{parentName:"ol"},"Pick a service to protect."),(0,o.kt)("li",{parentName:"ol"},"Make sure all its clients declare and intents to call it."),(0,o.kt)("li",{parentName:"ol"},"When you're ready, turn on enforcement.")),(0,o.kt)("p",{parentName:"admonition"},"The access graph and shadow mode allow us to gain confidence by showing what would happen and highlighting any problems.")),(0,o.kt)("h3",{id:"protect-everything-easily"},"Protect everything easily"),(0,o.kt)("p",null,"Could we somehow automatically bootstrap this for the whole cluster and protect all services, without breaking any intended calls? Yes!"),(0,o.kt)("p",null,"The network mapper keeps track of all attempted calls, after all: those are the discovered intents. If you are confident that all of those calls are intended and appropriate, you can use that information to automatically generate intent declarations and apply them."),(0,o.kt)("p",null,"Let's use the Otterize CLI (",(0,o.kt)("a",{parentName:"p",href:"/installation#install-the-otterize-cli"},"installation")," and ",(0,o.kt)("a",{parentName:"p",href:"/reference/cli"},"reference")," to export all discovered intents as YAML declarations:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"otterize network-mapper export -n otterize-ecom-demo --output-type dir --output intents\n")),(0,o.kt)("p",null,"You can apply them using:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"kubectl apply -f intents\n")),(0,o.kt)("p",null,"Or, equivalently, just use the already-generated intents files included in this docs location:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"kubectl apply -n otterize-ecom-demo -f ${ABSOLUTE_URL}/code-examples/shadow-mode/all.yaml\n")),(0,o.kt)("p",null,"Look at the access graph again:"),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"Access graph",src:n(2431).Z,width:"1469",height:"671"})),(0,o.kt)("p",null,"The graph confirms that all (but two) services would be protected, and no intended calls would be blocked, once we apply protection."),(0,o.kt)("details",null,(0,o.kt)("summary",null,"What about those last two?"),(0,o.kt)("p",null,"Note that the two leftmost services would not be protected. That's because they have no discovered clients, and hence did not get intents generated and applied for them."),(0,o.kt)("p",null,'They may not even be callable. But if they are callable but are not being called now, you may want to protect them (and all others) with a global default-deny network policy. Check the "Global default deny" checkbox at the top of the access graph to see what would happen in that case. Note this only informs Otterize that such a policy is in place; it does not put it in place, so you\'ll need to do it yourself.)')),(0,o.kt)("h2",{id:"enable-enforcement"},"Enable enforcement"),(0,o.kt)("p",null,"With the confidence we gained, let's enable enforcement (via network policies) by upgrading your Otterize installation and setting the Helm chart flag ",(0,o.kt)("inlineCode",{parentName:"p"},"intentsOperator.operator.mode=defaultActive"),"."),(0,o.kt)("p",null,"At the top of the access graph, click the ",(0,o.kt)("strong",{parentName:"p"},"Configure cluster")," button; or in the clusters page, clicking on the ",(0,o.kt)("strong",{parentName:"p"},"Connection guide ","\u2192")," link for your cluster."),(0,o.kt)("p",null,"Then run the Helm commands shown there, and specifically follow the instructions to install Otterize ",(0,o.kt)("b",null,"with enforcement on")," (use the toggle to make ",(0,o.kt)("inlineCode",{parentName:"p"},"Enforcement mode: active"),")"),(0,o.kt)("p",null,"Let's look at the access graph again:"),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"Access graph",src:n(7547).Z,width:"1469",height:"730"})),(0,o.kt)("p",null,"Note that all (but two) of the lock icons are locked, indicating the services are protected. And all the locks and edges are green, indicating no call attempts (discovered by the network mapper) are being blocked."),(0,o.kt)("admonition",{title:"How would blocked access attempts look now?",type:"tip"},(0,o.kt)("p",{parentName:"admonition"},"From now on, if a client attempts a server call that wasn't covered by one of the declared intents, that would be discovered by the network mapper and show up as (new) discovered intents. Remember that the network mapper discovers attempted access, not just successful access. In this case, a red line would appear from that client to that server, and the lock on that server would turn red: calls from that client are being blocked."),(0,o.kt)("p",{parentName:"admonition"},"That may be because:"),(0,o.kt)("ul",{parentName:"admonition"},(0,o.kt)("li",{parentName:"ul"},"The calls didn't happen when the network mapper was building its map from which the intents were bootstrapped, in which case you may choose to generate all the intents again, or or just create and apply the new ones manually."),(0,o.kt)("li",{parentName:"ul"},"Or... the client maliciously called this server, but is being blocked by the network policies. IBAC has saved the day!"))),(0,o.kt)("details",null,(0,o.kt)("summary",null,"Optional: see the generated network policies"),"Otterize automatically generated network policies according to your declared intents.",(0,o.kt)("p",null,"To list all generated network policies run:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"kubectl get netpol -n otterize-ecom-demo\n")),(0,o.kt)("p",null,"Let's inspect one of these network policies with:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"kubectl get netpol -n otterize-ecom-demo access-to-recommendationservice-from-otterize-ecom-demo -o yaml\n")),(0,o.kt)("p",null,"The result should be:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml"},'apiVersion: networking.k8s.io/v1\nkind: NetworkPolicy\nmetadata:\n  name: access-to-recommendationservice-from-otterize-ecom-demo\n  namespace: otterize-ecom-demo\n  ...\nspec:\n  ingress:\n  - from:\n    - namespaceSelector:\n        matchLabels:\n          intents.otterize.com/namespace-name: otterize-ecom-demo\n      podSelector:\n        matchLabels:\n          intents.otterize.com/access-recommendationservic-otterize-ecom-demo-850ad9: "true"\n  podSelector:\n    matchLabels:\n      intents.otterize.com/server: recommendationservic-otterize-ecom-demo-850ad9\n  policyTypes:\n  - Ingress\n'))),(0,o.kt)("details",null,(0,o.kt)("summary",null,"Optional: browse the demo to verify it still works"),(0,o.kt)("p",null,"You can play with the demo in your browser to see it still works as intended, while everything in it is protected against unintended and potentially malicious access."),(0,o.kt)(l.Z,{groupId:"frontend-addr",mdxType:"Tabs"},(0,o.kt)(r.Z,{value:"k8s",label:"K8s",mdxType:"TabItem"},(0,o.kt)("p",null,"To get the externally-accessible URL where your demo front end is available, run:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"kubectl get service -n otterize-ecom-demo frontend-external | awk '{print $4}'\n")),(0,o.kt)("p",null,"The result should be similar to (if running on AWS EKS):"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"a11843075fd254f8099a986467098647-1889474685.us-east-1.elb.amazonaws.com\n")),(0,o.kt)("p",null,'Go ahead and browse to the URL above to "shop" and get a feel for the demo\'s behavior.\n(The URL might take some time to populate across DNS servers. Note that we are accessing an HTTP and not an HTTPS website.)')),(0,o.kt)(r.Z,{value:"minikube",label:"Minikube",mdxType:"TabItem"},(0,o.kt)("p",null,"To get the externally-accessible URL where your demo front end is available, run:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"kubectl port-forward -n otterize-ecom-demo service/frontend-external 8080:80 &\n")),(0,o.kt)("p",null,"The demo is now accessible at:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"http://localhost:8080\n")),(0,o.kt)("p",null,'Go ahead and browse to the URL above to "shop" and get a feel for the demo\'s behavior.')))),(0,o.kt)("h2",{id:"whats-next"},"What's next"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Learn how to ",(0,o.kt)("a",{parentName:"li",href:"/quick-visual-tutorials/visual-ibac-kafka-k8s"},"manage secure access for Kafka")," using the demo lab tutorial.")),(0,o.kt)("h2",{id:"teardown"},"Teardown"),(0,o.kt)("p",null,"To remove the deployed demo run:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"kubectl delete -n otterize-ecom-demo -f ${ABSOLUTE_URL}/code-examples/shadow-mode/all.yaml\nkubectl delete -n otterize-ecom-demo -f ${ABSOLUTE_URL}/code-examples/shadow-mode/ecom-demo.yaml\nkubectl delete namespace otterize-ecom-demo\n")))}h.isMDXComponent=!0},714:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/phase-0-c52baed0812769632151410b5b83d4e6.png"},5243:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/phase-1-087e5b05c7dc8aed407516841045352f.png"},228:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/phase-2-f29d83d85f034a77b25e77a8b2382cfa.png"},4736:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/phase-3-183759ab88bfedec993795495eedcd07.png"},2431:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/phase-4-1d8eadae2281227dad7fd6d4ddf0e39f.png"},7547:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/phase-5-cea07946b7b46848876f99123c04d6dd.png"}}]);