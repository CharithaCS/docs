"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[825],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>d});var a=n(7294);function l(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){l(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,l=function(e,t){if(null==e)return{};var n,a,l={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(l[n]=e[n]);return l}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(l[n]=e[n])}return l}var s=a.createContext({}),p=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},c=function(e){var t=p(e.components);return a.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,l=e.mdxType,r=e.originalType,s=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),m=p(n),d=l,k=m["".concat(s,".").concat(d)]||m[d]||u[d]||r;return n?a.createElement(k,o(o({ref:t},c),{},{components:n})):a.createElement(k,o({ref:t},c))}));function d(e,t){var n=arguments,l=t&&t.mdxType;if("string"==typeof e||l){var r=n.length,o=new Array(r);o[0]=m;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i.mdxType="string"==typeof e?e:l,o[1]=i;for(var p=2;p<r;p++)o[p]=n[p];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},5162:(e,t,n)=>{n.d(t,{Z:()=>o});var a=n(7294),l=n(6010);const r="tabItem_Ymn6";function o(e){let{children:t,hidden:n,className:o}=e;return a.createElement("div",{role:"tabpanel",className:(0,l.Z)(r,o),hidden:n},t)}},5488:(e,t,n)=>{n.d(t,{Z:()=>d});var a=n(7462),l=n(7294),r=n(6010),o=n(2389),i=n(7392),s=n(7094),p=n(2466);const c="tabList__CuJ",u="tabItem_LNqP";function m(e){var t,n;const{lazy:o,block:m,defaultValue:d,values:k,groupId:h,className:y}=e,g=l.Children.map(e.children,(e=>{if((0,l.isValidElement)(e)&&"value"in e.props)return e;throw new Error("Docusaurus error: Bad <Tabs> child <"+("string"==typeof e.type?e.type:e.type.name)+'>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.')})),N=null!=k?k:g.map((e=>{let{props:{value:t,label:n,attributes:a}}=e;return{value:t,label:n,attributes:a}})),f=(0,i.l)(N,((e,t)=>e.value===t.value));if(f.length>0)throw new Error('Docusaurus error: Duplicate values "'+f.map((e=>e.value)).join(", ")+'" found in <Tabs>. Every value needs to be unique.');const b=null===d?d:null!=(t=null!=d?d:null==(n=g.find((e=>e.props.default)))?void 0:n.props.value)?t:g[0].props.value;if(null!==b&&!N.some((e=>e.value===b)))throw new Error('Docusaurus error: The <Tabs> has a defaultValue "'+b+'" but none of its children has the corresponding value. Available values are: '+N.map((e=>e.value)).join(", ")+". If you intend to show no default tab, use defaultValue={null} instead.");const{tabGroupChoices:w,setTabGroupChoices:v}=(0,s.U)(),[T,z]=(0,l.useState)(b),O=[],{blockElementScrollPositionUntilNextRender:E}=(0,p.o5)();if(null!=h){const e=w[h];null!=e&&e!==T&&N.some((t=>t.value===e))&&z(e)}const C=e=>{const t=e.currentTarget,n=O.indexOf(t),a=N[n].value;a!==T&&(E(t),z(a),null!=h&&v(h,String(a)))},x=e=>{var t;let n=null;switch(e.key){case"ArrowRight":{var a;const t=O.indexOf(e.currentTarget)+1;n=null!=(a=O[t])?a:O[0];break}case"ArrowLeft":{var l;const t=O.indexOf(e.currentTarget)-1;n=null!=(l=O[t])?l:O[O.length-1];break}}null==(t=n)||t.focus()};return l.createElement("div",{className:(0,r.Z)("tabs-container",c)},l.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,r.Z)("tabs",{"tabs--block":m},y)},N.map((e=>{let{value:t,label:n,attributes:o}=e;return l.createElement("li",(0,a.Z)({role:"tab",tabIndex:T===t?0:-1,"aria-selected":T===t,key:t,ref:e=>O.push(e),onKeyDown:x,onFocus:C,onClick:C},o,{className:(0,r.Z)("tabs__item",u,null==o?void 0:o.className,{"tabs__item--active":T===t})}),null!=n?n:t)}))),o?(0,l.cloneElement)(g.filter((e=>e.props.value===T))[0],{className:"margin-top--md"}):l.createElement("div",{className:"margin-top--md"},g.map(((e,t)=>(0,l.cloneElement)(e,{key:t,hidden:e.props.value!==T})))))}function d(e){const t=(0,o.Z)();return l.createElement(m,(0,a.Z)({key:String(t)},e))}},3340:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>s,default:()=>d,frontMatter:()=>i,metadata:()=>p,toc:()=>u});var a=n(7462),l=(n(7294),n(3905)),r=n(5488),o=n(5162);const i={sidebar_position:3,title:"Manage network policies"},s="Network policies",p={unversionedId:"documentation/quick-tutorials/network-policies",id:"documentation/quick-tutorials/network-policies",title:"Manage network policies",description:"Otterize helps you manage network policies within your cluster by abstracting the need to manage",source:"@site/docs/documentation/2-quick-tutorials/3-network-policies.md",sourceDirName:"documentation/2-quick-tutorials",slug:"/documentation/quick-tutorials/network-policies",permalink:"/documentation/quick-tutorials/network-policies",draft:!1,editUrl:"https://github.com/otterize/docs/edit/main/docs/documentation/2-quick-tutorials/3-network-policies.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3,title:"Manage network policies"},sidebar:"docSidebar",previous:{title:"Map your cluster",permalink:"/documentation/quick-tutorials/network-mapper"},next:{title:"Deploy mTLS between pods",permalink:"/documentation/quick-tutorials/mtls"}},c={},u=[{value:"Install Otterize",id:"install-otterize",level:2},{value:"Install Calico",id:"install-calico",level:2},{value:"Deploy tutorial",id:"deploy-tutorial",level:2},{value:"Apply intents as network policies",id:"apply-intents-as-network-policies",level:2},{value:"What&#39;s next",id:"whats-next",level:2},{value:"Teardown",id:"teardown",level:2}],m={toc:u};function d(e){let{components:t,...n}=e;return(0,l.kt)("wrapper",(0,a.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("h1",{id:"network-policies"},"Network policies"),(0,l.kt)("p",null,"Otterize helps you manage network policies within your cluster by abstracting the need to manage\npod identities, pod labels for clients, servers and namespaces, and configure network policies.\nThis tutorial will walk you through managing network policies using Otterize intents files. We will"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Install Otterize"),(0,l.kt)("li",{parentName:"ul"},"Install Calico"),(0,l.kt)("li",{parentName:"ul"},"Deploy client and server pods communicating over HTTP and block their communication with a default deny network policy"),(0,l.kt)("li",{parentName:"ul"},"Use an intents file to easily manage network policies to allow the communication between the client and server pods")),(0,l.kt)("h2",{id:"install-otterize"},"Install Otterize"),(0,l.kt)("admonition",{type:"note"},(0,l.kt)("p",{parentName:"admonition"},"If you already have Otterize installed on your cluster you can skip this step.")),(0,l.kt)("ol",null,(0,l.kt)("li",{parentName:"ol"},"To install Otterize run the following commands",(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre",className:"language-shell"},"helm repo add otterize https://otterize.github.io/helm-charts\nhelm repo update\nhelm upgrade --install --create-namespace -n otterize otterize otterize/otterize-kubernetes\n"))),(0,l.kt)("li",{parentName:"ol"},"It can take several minutes for the pods to ",(0,l.kt)("strong",{parentName:"li"},"stabilize")," into the ",(0,l.kt)("inlineCode",{parentName:"li"},"Ready")," and ",(0,l.kt)("inlineCode",{parentName:"li"},"Running")," states. You can monitor with\nthe following command:",(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre"},"kubectl get pods -n otterize\n")),"After ",(0,l.kt)("strong",{parentName:"li"},"stabilization")," you should see:",(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"NAME                                                             READY   STATUS    RESTARTS      AGE\nintents-operator-controller-manager-6b97596d54-5qxcw             2/2     Running   0             53s\notterize-spire-agent-9s8w7                                       1/1     Running   0             54s\notterize-spire-agent-np2wf                                       1/1     Running   1 (33s ago)   54s\notterize-spire-server-0                                          1/1     Running   0             53s\notterize-watcher-77db87cfcd-xhsrk                                1/1     Running   0             53s\nspire-integration-operator-controller-manager-65b8bf57b5-mpltl   2/2     Running   0             53s\n")))),(0,l.kt)("h2",{id:"install-calico"},"Install Calico"),(0,l.kt)("admonition",{type:"note"},(0,l.kt)("p",{parentName:"admonition"},"If you already have Calico installed on your cluster you can skip this step.")),(0,l.kt)("p",null,"To enforce network policies within your cluster you require a CNI to implement them.\nCalico is one of the CNIs you can use for this task. To install please follow\nthe ",(0,l.kt)("a",{parentName:"p",href:"https://projectcalico.docs.tigera.io/getting-started/kubernetes/helm"},"instructions"),"."),(0,l.kt)("h2",{id:"deploy-tutorial"},"Deploy tutorial"),(0,l.kt)("p",null,"Let's deploy our example which consists of two pods: client and server,\ncommunicating over HTTP. At first the ",(0,l.kt)("strong",{parentName:"p"},"client is blocked")," from communicating with the server as we set a default deny\ningress network policy."),(0,l.kt)("details",null,(0,l.kt)("summary",null,"Code examples"),(0,l.kt)(r.Z,{mdxType:"Tabs"},(0,l.kt)(o.Z,{value:"client-deployment.yaml",label:"client-deployment.yaml",default:!0,mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-yaml"},'apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: client\n  namespace: otterize-tutorial-npol\nspec:\n  selector:\n    matchLabels:\n      app: client\n  template:\n    metadata:\n      labels:\n        app: client\n    spec:\n      containers:\n        - name: client\n          image: alpine/curl\n          command: [ "/bin/sh", "-c", "--" ]\n          args: [ "while true; do if ! timeout 2 curl -si server 2>/dev/null; then echo \\"curl timed out\\"; fi; sleep 2; done" ]\n'))),(0,l.kt)(o.Z,{value:"server-deployment.yaml",label:"server-deployment.yaml",default:!0,mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-yaml"},'apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: server\n  namespace: otterize-tutorial-npol\nspec:\n  selector:\n    matchLabels:\n      app: server\n  template:\n    metadata:\n      labels:\n        app: server\n    spec:\n      containers:\n        - name: server\n          image: hashicorp/http-echo\n          args: [ "-listen=:80", "-text=hello world" ]\n'))),(0,l.kt)(o.Z,{value:"default-deny-network-policy.yaml",label:"default-deny-network-policy.yaml",default:!0,mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-yaml"},"apiVersion: networking.k8s.io/v1\nkind: NetworkPolicy\nmetadata:\n  name: default-deny-ingress\n  namespace: otterize-tutorial-npol\nspec:\n  podSelector: { }\n  policyTypes:\n    - Ingress\n"))))),(0,l.kt)("ol",null,(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("p",{parentName:"li"},"Deploy the client, server, and the default deny network policy using ",(0,l.kt)("inlineCode",{parentName:"p"},"kubectl"),"."),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre",className:"language-shell"},"kubectl apply -f https://docs.otterize.com/code-examples/network-policies/all.yaml\n"))),(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("p",{parentName:"li"},"Check that the ",(0,l.kt)("inlineCode",{parentName:"p"},"client")," and server ",(0,l.kt)("inlineCode",{parentName:"p"},"pods")," were deployed"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"kubectl get pods -n otterize-tutorial-npol\n")),(0,l.kt)("p",{parentName:"li"},"You should see"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre"},"NAME                      READY   STATUS    RESTARTS   AGE\nclient-5689997b5c-grlnt   1/1     Running   0          35s\nserver-6698c58cbc-v9n9b   1/1     Running   0          34s\n"))),(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("p",{parentName:"li"},"Check that the default deny ingress Network Policy was deployed"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"kubectl get NetworkPolicies -n otterize-tutorial-npol\n")),(0,l.kt)("p",{parentName:"li"},"You should see"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre"},"NAME                   POD-SELECTOR   AGE\ndefault-deny-ingress   <none>         17s\n"))),(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("p",{parentName:"li"},"We can now see that ",(0,l.kt)("inlineCode",{parentName:"p"},"client")," ",(0,l.kt)("em",{parentName:"p"},"cannot")," connect to ",(0,l.kt)("inlineCode",{parentName:"p"},"server"),":"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"kubectl logs --tail 1 -n otterize-tutorial-npol deploy/client\n")),(0,l.kt)("p",{parentName:"li"},"You should see the following line"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre"},"curl timed out\n")),(0,l.kt)("p",{parentName:"li"},"This is the expected outcome as we haven't configured a network policy using an intents file to allow it."))),(0,l.kt)("h2",{id:"apply-intents-as-network-policies"},"Apply intents as network policies"),(0,l.kt)("ol",null,(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("p",{parentName:"li"},"We will use the following ",(0,l.kt)("inlineCode",{parentName:"p"},"intetns file")," allows traffic between the client and server pods:"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre",className:"language-yaml"},"apiVersion: k8s.otterize.com/v1\nkind: ClientIntents\nmetadata:\n  name: client\n  namespace:  otterize-tutorial-npol\nspec:\n  service:\n    name: client\n  calls:\n    - server: server\n      type: HTTP\n")),(0,l.kt)("admonition",{parentName:"li",type:"tip"},(0,l.kt)("p",{parentName:"admonition"},"Intents are onf of the cornerstones to how Otterize works and helps developers. Lean more here."))),(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("p",{parentName:"li"},"We will monitor the change in real time with a ",(0,l.kt)("strong",{parentName:"p"},"second terminal")," to see how the effect takes place immediately. Run\nthe following monitoring command in your ",(0,l.kt)("strong",{parentName:"p"},"second terminal"),"."),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"kubectl logs -f --tail 1 -n otterize-tutorial-npol deploy/client\n")),(0,l.kt)("p",{parentName:"li"},"At first you will see the client timing out when trying to call the server"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre"},"curl timed out\ncurl timed out\ncurl timed out\n"))),(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("p",{parentName:"li"},"Apply the intents file on your ",(0,l.kt)("strong",{parentName:"p"},"main terminal")," using:"),(0,l.kt)(r.Z,{mdxType:"Tabs"},(0,l.kt)(o.Z,{value:"kubectl",label:"Kubectl",default:!0,mdxType:"TabItem"},(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre",className:"language-shell"},"kubectl apply -f https://docs.otterize.com/code-examples/network-policies/intents/intents.yaml\n"))),(0,l.kt)(o.Z,{value:"otterize",label:"Otterize",mdxType:"TabItem"},(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre",className:"language-shell"},"otterize apply intents\n"))))),(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("p",{parentName:"li"},"You should immidiatly see on the ",(0,l.kt)("strong",{parentName:"p"},"second terminal")," that ",(0,l.kt)("inlineCode",{parentName:"p"},"client")," is now able to connect to ",(0,l.kt)("inlineCode",{parentName:"p"},"server")," as the output\nwill start to show:"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"curl timed out                              \ncurl timed out                              <- before applying the intents file\n# highlight-start\nHTTP/1.1 200 OK                             <- after applying the intents file\nX-App-Name: http-echo\nX-App-Version: 0.2.3\nDate: Wed, 07 Sep 2022 13:51:34 GMT\nContent-Length: 12\nContent-Type: text/plain; charset=utf-8\n\nhello world\n# highlight-end\n"))),(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("p",{parentName:"li"},"Verify that a new network policy was created"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"kubectl get NetworkPolicies -n otterize-tutorial-npol\n")),(0,l.kt)("p",{parentName:"li"},"You should see"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre"},"NAME                                           POD-SELECTOR                                         AGE\naccess-to-server-from-otterize-tutorial-npol   otterize/server=server-otterize-tutorial-np-7e16db   6s\ndefault-deny-ingress                           <none>                                               28s\n")))),(0,l.kt)("admonition",{type:"tip"},(0,l.kt)("p",{parentName:"admonition"},"To learn more about how Otterize + network policies work see\ndetails ",(0,l.kt)("a",{parentName:"p",href:"/documentation/intents-operator/network-policies/in-depth"},"here"))),(0,l.kt)("h2",{id:"whats-next"},"What's next"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Configure ",(0,l.kt)("a",{parentName:"li",href:"/documentation/intents-operator/network-policies"},"network policies")," for your existing deployments."),(0,l.kt)("li",{parentName:"ul"},"Explore the ",(0,l.kt)("a",{parentName:"li",href:"/documentation/getting-started/network-mapper"},"Network Mapper")," to help you bootstrap intents you can\napply as network policies.")),(0,l.kt)("h2",{id:"teardown"},"Teardown"),(0,l.kt)("p",null,"To remove the deployed resources run"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"kubectl delete namespace otterize-tutorial-npol\n")))}d.isMDXComponent=!0}}]);