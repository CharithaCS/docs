"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[657],{5162:(e,t,n)=>{n.d(t,{Z:()=>o});var a=n(7294),l=n(6010);const i="tabItem_Ymn6";function o(e){let{children:t,hidden:n,className:o}=e;return a.createElement("div",{role:"tabpanel",className:(0,l.Z)(i,o),hidden:n},t)}},5488:(e,t,n)=>{n.d(t,{Z:()=>m});var a=n(7462),l=n(7294),i=n(6010),o=n(2389),r=n(7392),s=n(7094),p=n(2466);const c="tabList__CuJ",u="tabItem_LNqP";function d(e){var t,n;const{lazy:o,block:d,defaultValue:m,values:k,groupId:h,className:y}=e,w=l.Children.map(e.children,(e=>{if((0,l.isValidElement)(e)&&"value"in e.props)return e;throw new Error("Docusaurus error: Bad <Tabs> child <"+("string"==typeof e.type?e.type:e.type.name)+'>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.')})),g=null!=k?k:w.map((e=>{let{props:{value:t,label:n,attributes:a}}=e;return{value:t,label:n,attributes:a}})),v=(0,r.l)(g,((e,t)=>e.value===t.value));if(v.length>0)throw new Error('Docusaurus error: Duplicate values "'+v.map((e=>e.value)).join(", ")+'" found in <Tabs>. Every value needs to be unique.');const b=null===m?m:null!=(t=null!=m?m:null==(n=w.find((e=>e.props.default)))?void 0:n.props.value)?t:w[0].props.value;if(null!==b&&!g.some((e=>e.value===b)))throw new Error('Docusaurus error: The <Tabs> has a defaultValue "'+b+'" but none of its children has the corresponding value. Available values are: '+g.map((e=>e.value)).join(", ")+". If you intend to show no default tab, use defaultValue={null} instead.");const{tabGroupChoices:N,setTabGroupChoices:f}=(0,s.U)(),[C,z]=(0,l.useState)(b),T=[],{blockElementScrollPositionUntilNextRender:I}=(0,p.o5)();if(null!=h){const e=N[h];null!=e&&e!==C&&g.some((t=>t.value===e))&&z(e)}const x=e=>{const t=e.currentTarget,n=T.indexOf(t),a=g[n].value;a!==C&&(I(t),z(a),null!=h&&f(h,String(a)))},E=e=>{var t;let n=null;switch(e.key){case"ArrowRight":{var a;const t=T.indexOf(e.currentTarget)+1;n=null!=(a=T[t])?a:T[0];break}case"ArrowLeft":{var l;const t=T.indexOf(e.currentTarget)-1;n=null!=(l=T[t])?l:T[T.length-1];break}}null==(t=n)||t.focus()};return l.createElement("div",{className:(0,i.Z)("tabs-container",c)},l.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,i.Z)("tabs",{"tabs--block":d},y)},g.map((e=>{let{value:t,label:n,attributes:o}=e;return l.createElement("li",(0,a.Z)({role:"tab",tabIndex:C===t?0:-1,"aria-selected":C===t,key:t,ref:e=>T.push(e),onKeyDown:E,onFocus:x,onClick:x},o,{className:(0,i.Z)("tabs__item",u,null==o?void 0:o.className,{"tabs__item--active":C===t})}),null!=n?n:t)}))),o?(0,l.cloneElement)(w.filter((e=>e.props.value===C))[0],{className:"margin-top--md"}):l.createElement("div",{className:"margin-top--md"},w.map(((e,t)=>(0,l.cloneElement)(e,{key:t,hidden:e.props.value!==C})))))}function m(e){const t=(0,o.Z)();return l.createElement(d,(0,a.Z)({key:String(t)},e))}},4041:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>s,default:()=>m,frontMatter:()=>r,metadata:()=>p,toc:()=>u});var a=n(7462),l=(n(7294),n(3905)),i=(n(814),n(5488)),o=n(5162);const r={sidebar_position:1,title:"Automate network policies"},s=void 0,p={unversionedId:"quick-tutorials/k8s-network-policies",id:"quick-tutorials/k8s-network-policies",title:"Automate network policies",description:"Otterize automates network policies within your cluster by abstracting away",source:"@site/docs/2-quick-tutorials/1-k8s-network-policies.mdx",sourceDirName:"2-quick-tutorials",slug:"/quick-tutorials/k8s-network-policies",permalink:"/quick-tutorials/k8s-network-policies",draft:!1,editUrl:"https://github.com/otterize/docs/edit/main/docs/2-quick-tutorials/1-k8s-network-policies.mdx",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1,title:"Automate network policies"},sidebar:"docSidebar",previous:{title:"Quick tutorials",permalink:"/quick-tutorials/"},next:{title:"Map your cluster",permalink:"/quick-tutorials/k8s-network-mapper"}},c={},u=[{value:"Install Otterize",id:"install-otterize",level:2},{value:"Make sure you have a CNI network plugin",id:"make-sure-you-have-a-cni-network-plugin",level:2},{value:"Deploy the server, client, and default network policy",id:"deploy-the-server-client-and-default-network-policy",level:2},{value:"Apply intents",id:"apply-intents",level:2},{value:"What did we accomplish?",id:"what-did-we-accomplish",level:2},{value:"What&#39;s next",id:"whats-next",level:2},{value:"Teardown",id:"teardown",level:2}],d={toc:u};function m(e){let{components:t,...n}=e;return(0,l.kt)("wrapper",(0,a.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("p",null,"Otterize automates network policies within your cluster by abstracting away\nthe management of pod identities, the labeling of clients, servers and namespaces,\nand the manual authoring of individual network policies."),(0,l.kt)("p",null,"With intent-based access control, you just declare what client calls will be needed,\nand everything is automatically wired together so only intended calls are allowed."),(0,l.kt)("p",null,"In this tutorial, we will:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Install Otterize in your Kubernetes cluster."),(0,l.kt)("li",{parentName:"ul"},"Make sure your Kubernetes cluster has a CNI network plugin that handles network policies"),(0,l.kt)("li",{parentName:"ul"},"Deploy a server pod, and a client pod that calls it"),(0,l.kt)("li",{parentName:"ul"},'Deploy a "default deny" network policy to block undeclared calls'),(0,l.kt)("li",{parentName:"ul"},"Declare that the client pod intends to call the server pod"),(0,l.kt)("li",{parentName:"ul"},"See that a network policy was autogenerated to allow just that")),(0,l.kt)("h2",{id:"install-otterize"},"Install Otterize"),(0,l.kt)("admonition",{type:"note"},(0,l.kt)("p",{parentName:"admonition"},"You can skip this section if Otterize is already installed in your cluster.")),(0,l.kt)("p",null,"Use Helm to install the latest version of Otterize:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-shell"},"helm repo add otterize https://helm.otterize.com\nhelm repo update\nhelm install otterize otterize/otterize-kubernetes -n otterize-system --create-namespace\n")),(0,l.kt)("p",null,"You can add the ",(0,l.kt)("inlineCode",{parentName:"p"},"--wait")," flag for Helm to wait for deployment to complete and all pods to be Ready, or manually watch for all pods to be ",(0,l.kt)("inlineCode",{parentName:"p"},"Ready")," using ",(0,l.kt)("inlineCode",{parentName:"p"},"kubectl get pods -n otterize-system -w"),"."),(0,l.kt)("h2",{id:"make-sure-you-have-a-cni-network-plugin"},"Make sure you have a CNI network plugin"),(0,l.kt)("p",null,"To enforce network policies, a Kubernetes cluster must be using a CNI network plugin\nthat supports network policies."),(0,l.kt)("p",null,"If you don't have a CNI installed, a popular choice is Calico by Tigera.\nTo install it, please follow the\n",(0,l.kt)("a",{parentName:"p",href:"https://projectcalico.docs.tigera.io/getting-started/kubernetes/helm"},"instructions"),"\nand return to this tutorial."),(0,l.kt)("p",null,"If you're not sure whether your cluster's CNI plugin supports network policies, you can just continue ","\u2014"," it'll soon become clear ;-)."),(0,l.kt)("h2",{id:"deploy-the-server-client-and-default-network-policy"},"Deploy the server, client, and default network policy"),(0,l.kt)("p",null,"Our simple example consists of two pods: an HTTP server and a client that calls it."),(0,l.kt)("p",null,"We also deploy a default-deny ingress network policy,\nblocking pods from accepting incoming calls unless another network policy explicitly allows them."),(0,l.kt)("details",null,(0,l.kt)("summary",null,"Expand to see the example YAML files"),(0,l.kt)(i.Z,{mdxType:"Tabs"},(0,l.kt)(o.Z,{value:"namespace.yaml",label:"namespace.yaml",default:!0,mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-yaml"},"apiVersion: v1\nkind: Namespace\nmetadata:\n  name: otterize-tutorial-npol\n"))),(0,l.kt)(o.Z,{value:"server.yaml",label:"server.yaml",default:!0,mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-yaml"},'apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: server\n  namespace:  otterize-tutorial-npol\nspec:\n  selector:\n    matchLabels:\n      app: server\n  template:\n    metadata:\n      labels:\n        app: server\n    spec:\n      containers:\n        - name: server\n          image: hashicorp/http-echo\n          args: [ "-listen=:80", "-text=Hi, I am the server, you called, may I help you?"]\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: server\n  namespace:  otterize-tutorial-npol\nspec:\n  selector:\n    app: server\n  ports:\n    - protocol: TCP\n      port: 80\n      targetPort: 80\n'))),(0,l.kt)(o.Z,{value:"client.yaml",label:"client.yaml",default:!0,mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-yaml"},'apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: client\n  namespace:  otterize-tutorial-npol\nspec:\n  selector:\n    matchLabels:\n      app: client\n  template:\n    metadata:\n      labels:\n        app: client\n    spec:\n      containers:\n        - name: client\n          image: alpine/curl\n          command: [ "/bin/sh", "-c", "--" ]\n          args: [ "while true; do echo \\"Calling server...\\"; if ! timeout 2 curl -si server 2>/dev/null; then echo \\"curl timed out\\"; fi; sleep 2; done" ]\n'))),(0,l.kt)(o.Z,{value:"default-deny.yaml",label:"default-deny.yaml",default:!0,mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-yaml"},"apiVersion: networking.k8s.io/v1\nkind: NetworkPolicy\nmetadata:\n  name: default-deny-ingress\n  namespace:  otterize-tutorial-npol\nspec:\n  podSelector: {}\n  policyTypes:\n    - Ingress\n"))))),(0,l.kt)("p",null,"Deploy the client, server, and the default deny network policy using ",(0,l.kt)("inlineCode",{parentName:"p"},"kubectl"),"."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-shell"},"kubectl apply -f https://docs.otterize.com/code-examples/network-policies/all.yaml\n")),(0,l.kt)("details",null,(0,l.kt)("summary",null,"Optional: check deployment status"),"Check that the client and server pods were deployed",(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"kubectl get pods -n otterize-tutorial-npol\n")),(0,l.kt)("p",null,"You should see"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"NAME                      READY   STATUS    RESTARTS   AGE\nclient-5689997b5c-grlnt   1/1     Running   0          35s\nserver-6698c58cbc-v9n9b   1/1     Running   0          34s\n")),(0,l.kt)("p",null,"Check that the default deny ingress network policy was deployed:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"kubectl get NetworkPolicies -n otterize-tutorial-npol\n")),(0,l.kt)("p",null,"You should see"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"NAME                   POD-SELECTOR   AGE\ndefault-deny-ingress   none           17s\n"))),(0,l.kt)("p",null,"Let's monitor the client's attempts to call the server with a second terminal window,\nso we can see the effects of our changes in real time."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Open a second terminal window")," and tail the client log:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"kubectl logs -f --tail 1 -n otterize-tutorial-npol deploy/client\n")),(0,l.kt)("p",null,"At this point the client should be timing out when trying to call the server:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"Calling server...\ncurl timed out\nCalling server...\ncurl timed out\nCalling server...\ncurl timed out\n")),(0,l.kt)("admonition",{type:"tip"},(0,l.kt)("p",{parentName:"admonition"},"If the client isn't timing out, then the installed CNI plugin likely does not support network policies.\nConsult the docs for your Kubernetes distribution or head back to the ",(0,l.kt)("a",{parentName:"p",href:"#make-sure-you-have-a-cni-network-plugin"},"Calico installation section")," to install one.\nFor example, minikube does not start by default with a CNI that supports network policies\nbut you can ask it to start with one that does, such as Calico.")),(0,l.kt)("p",null,"The client failing like that is the expected outcome since by default the ingress to every pod is blocked by the default network policy:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-yaml"},"apiVersion: networking.k8s.io/v1\nkind: NetworkPolicy\nmetadata:\n  name: default-deny-ingress\n  namespace:  otterize-tutorial-npol\nspec:\n  podSelector: {} # selects all pods in the namespace\n  # the lack of a `from` field means no pod is allowed to access\n  policyTypes: # this policy applies to ingress and doesn't apply to egress\n    - Ingress\n")),(0,l.kt)("p",null,"   Once the client declares its intents, Otterize will add a network policy to allow the intended calls.\nLet's see that now."),(0,l.kt)("h2",{id:"apply-intents"},"Apply intents"),(0,l.kt)("ol",null,(0,l.kt)("li",{parentName:"ol"},"The client declares its intent to call the server with this ",(0,l.kt)("inlineCode",{parentName:"li"},"intents.yaml")," file:")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-yaml"},"apiVersion: k8s.otterize.com/v1alpha1\nkind: ClientIntents\nmetadata:\n  name: client\n  namespace:  otterize-tutorial-npol\nspec:\n  service:\n    name: client\n  calls:\n    - name: server\n      type: HTTP\n")),(0,l.kt)("admonition",{type:"tip"},(0,l.kt)("p",{parentName:"admonition"},"Client intents are the cornerstone of ",(0,l.kt)("a",{parentName:"p",href:"https://otterize.com/ibac"},"intent-based access control"),".")),(0,l.kt)("p",null,"   Keep an eye on the logs being tailed in the ",(0,l.kt)("strong",{parentName:"p"},"second terminal window"),"\nwhile you apply this ",(0,l.kt)("inlineCode",{parentName:"p"},"intents.yaml")," file in your ",(0,l.kt)("strong",{parentName:"p"},"main terminal window")," using:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-shell"},"kubectl apply -f https://docs.otterize.com/code-examples/network-policies/intents.yaml\n")),(0,l.kt)("ol",{start:2},(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("p",{parentName:"li"},"You should quickly see in the ",(0,l.kt)("strong",{parentName:"p"},"second terminal")," that the client is now successfully calling the server:"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"Calling server...\ncurl timed out\nCalling server...\ncurl timed out                              # <- before applying the intents file\n# highlight-start\nCalling server...                           # <- after applying the intents file\nHTTP/1.1 200 OK\nX-App-Name: http-echo\nX-App-Version: 0.2.3\nDate: Wed, 07 Sep 2022 13:51:34 GMT\nContent-Length: 12\nContent-Type: text/plain; charset=utf-8\n\nHi, I am the server, you called, may I help you?\n# highlight-end\n"))),(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("p",{parentName:"li"},"You should see that a new network policy was created:"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"kubectl get NetworkPolicies -n otterize-tutorial-npol\n")),(0,l.kt)("p",{parentName:"li"},"will output:"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre"},"NAME                                           POD-SELECTOR                                         AGE\naccess-to-server-from-otterize-tutorial-npol   otterize/server=server-otterize-tutorial-np-7e16db   6s\ndefault-deny-ingress                           <none>                                               28s\n")))),(0,l.kt)("h2",{id:"what-did-we-accomplish"},"What did we accomplish?"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"Controlling access through network policies no longer means touching network policies at all.")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"Clients simply declare what they need to access with their intents files.")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"The next ",(0,l.kt)("inlineCode",{parentName:"p"},"kubectl apply")," ensures that network policies automatically reflect the intended pod-to-pod access."))),(0,l.kt)("details",null,(0,l.kt)("summary",null,"Expand to see what happened behind the scenes"),(0,l.kt)("p",null,"To generate network policies between two pods, for example called ",(0,l.kt)("inlineCode",{parentName:"p"},"client")," and ",(0,l.kt)("inlineCode",{parentName:"p"},"server")," running in\nnamespace ",(0,l.kt)("inlineCode",{parentName:"p"},"otterize-tutorial-npol")," we needed to (in a simplified form):"),(0,l.kt)("ol",null,(0,l.kt)("li",{parentName:"ol"},"Label the ",(0,l.kt)("inlineCode",{parentName:"li"},"server")," pod with ",(0,l.kt)("inlineCode",{parentName:"li"},"otterize/server")," and a unique value that represents this server - we will use this label in the network policy to apply it to all pods with\nthis label (as an ingress rule)."),(0,l.kt)("li",{parentName:"ol"},"Label the ",(0,l.kt)("inlineCode",{parentName:"li"},"client")," pod with ",(0,l.kt)("inlineCode",{parentName:"li"},"otterize/access-to-server"),", saying that this specific pod has access to ",(0,l.kt)("inlineCode",{parentName:"li"},"server")," - we will\nuse this label in the network policy as a filter ","\u2014"," every\npod that has the label saying ","[this pod can access the server]"," will be able to pass through the network policy."),(0,l.kt)("li",{parentName:"ol"},"Label the ",(0,l.kt)("inlineCode",{parentName:"li"},"client"),"'s namespace ",(0,l.kt)("inlineCode",{parentName:"li"},"otterize/namespace-name")," with value ",(0,l.kt)("inlineCode",{parentName:"li"},"otterize-tutorial-npol")," ","\u2014"," this is used when intents refer to services in other namespaces."),(0,l.kt)("li",{parentName:"ol"},"Generate a network policy saying that",(0,l.kt)("ol",{parentName:"li"},(0,l.kt)("li",{parentName:"ol"},"Only pod with the label ",(0,l.kt)("inlineCode",{parentName:"li"},"otterize/access-to-server")),(0,l.kt)("li",{parentName:"ol"},"From the namespaces with the label ",(0,l.kt)("inlineCode",{parentName:"li"},"otterize/namespace-name")," and value ",(0,l.kt)("inlineCode",{parentName:"li"},"otterize-tutorial-npol")),(0,l.kt)("li",{parentName:"ol"},"Can access pods with the label ",(0,l.kt)("inlineCode",{parentName:"li"},"otterize/server")," and that matches this server")))),(0,l.kt)("p",null,"Otterize saved us from doing all this work by simply declaring the client's intents in ",(0,l.kt)("inlineCode",{parentName:"p"},"intents.yaml"),",\nwhile the appropriate network policies were managed automatically behind the scenes."),(0,l.kt)("p",null,"You can read the detailed explanation about how Otterize manages labels for network policies ",(0,l.kt)("a",{parentName:"p",href:"/guides/k8s-ibac-via-network-policies/deeper-dive#track-artifacts"},"here"),".")),(0,l.kt)("h2",{id:"whats-next"},"What's next"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Configure ",(0,l.kt)("a",{parentName:"li",href:"/guides/k8s-ibac-via-network-policies/"},"network policies")," for your existing deployments."),(0,l.kt)("li",{parentName:"ul"},"Explore the ",(0,l.kt)("a",{parentName:"li",href:"/quick-tutorials/k8s-network-mapper"},"network mapper")," to help you bootstrap intents files\nfor use in IBAC.")),(0,l.kt)("h2",{id:"teardown"},"Teardown"),(0,l.kt)("p",null,"To remove the deployed resources run:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"kubectl delete namespace otterize-tutorial-npol\n")))}m.isMDXComponent=!0}}]);