apiVersion: v1
kind: Namespace
metadata:
  name: otterize-tutorial-mtls
---
apiVersion: v1
kind: Service
metadata:
  name: server
  namespace: otterize-tutorial-mtls
spec:
  selector:
    app: server
  ports:
    - protocol: TCP
      port: 443
      name: tls
      targetPort: 443
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: server-go
  namespace: otterize-tutorial-mtls
data:
  server.go: |
    package main
    
    import (
    "crypto/tls"
    "crypto/x509"
    "fmt"
    "io"
    "io/ioutil"
    "log"
    "net/http"
    )
    
    func helloHandler(w http.ResponseWriter, r *http.Request) {
      // Write "Hello, world!" to the response body
      io.WriteString(w, "Hello, world over mTLS!\n")
      fmt.Println("GET /hello mTLS")
    }
    
    func main() {
    // Set up a /hello resource handler
    http.HandleFunc("/hello", helloHandler)
    
    // Create a CA certificate pool and add cert.pem to it
    caCert, err := ioutil.ReadFile("/etc/otterize/bundle.pem")
    if err != nil {
    log.Fatal(err)
    }
    caCertPool := x509.NewCertPool()
    caCertPool.AppendCertsFromPEM(caCert)
    
    // Create the TLS Config with the CA pool and enable Client certificate validation
    tlsConfig := &tls.Config{
    ClientCAs:  caCertPool,
    ClientAuth: tls.RequireAndVerifyClientCert,
    }
      tlsConfig.BuildNameToCertificate()
      
      // Create a Server instance to listen on port 8443 with the TLS config
      server := &http.Server{
    Addr:      ":443",
    TLSConfig: tlsConfig,
    }
    fmt.Println("Waiting for mTLS connections")
    // Listen to HTTPS connections with the server certificate and wait
    log.Fatal(server.ListenAndServeTLS("/etc/otterize/svid.pem", "/etc/otterize/key.pem"))
    }
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: server
  namespace: otterize-tutorial-mtls
spec:
  selector:
    matchLabels:
      app: server
  template:
    metadata:
      labels:
        app: server
      annotations:
#        to rename credentials-secret-name
        otterize/tls-secret-name: server-credentials-secret
        otterize/cert-ttl: "2592000"
    spec:
      containers:
        - name: server
          image: golang
          command: [ "/bin/sh", "-c", "--" ]
          args: [ "trap : TERM INT; sleep infinity & wait" ]
          volumeMounts:
            - mountPath: /app/
              name: server-go
            - name: otterize-credentials
              mountPath: /etc/otterize
              readOnly: true
      volumes:
        - name: server-go
          configMap:
            name: server-go
        - name: otterize-credentials
          secret:
            secretName: server-credentials-secret