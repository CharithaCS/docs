apiVersion: v1
kind: ConfigMap
metadata:
  name: server-go
data:
  server.go: |
    package main
    
    import (
    "crypto/tls"
    "crypto/x509"
    "fmt"
    "io"
    "io/ioutil"
    "log"
    "net/http"
    )
    
    func helloHandler(w http.ResponseWriter, r *http.Request) {
    // Write "Hello, world!" to the response body
    io.WriteString(w, "Hello world, over mTLS!")
    fmt.Println("GET /hello mTLS")
    }
  
    func main() {
    // Set up a /hello resource handler
    http.HandleFunc("/hello", helloHandler)
    
    // Create a CA certificate pool and add cert.pem to it
    caCert, err := ioutil.ReadFile("/var/otterize/credentials/bundle.pem")
    if err != nil {
      log.Fatal(err)
    }
    caCertPool := x509.NewCertPool()
    caCertPool.AppendCertsFromPEM(caCert)
    
    // Create the TLS Config with the CA pool and enable Client certificate validation
    tlsConfig := &tls.Config{
      ClientCAs:  caCertPool,
      ClientAuth: tls.RequireAndVerifyClientCert,
    }
    tlsConfig.BuildNameToCertificate()
    
    // Create a Server instance to listen on port 8443 with the TLS config
    server := &http.Server{
      Addr:      ":443",
      TLSConfig: tlsConfig,
    }
    fmt.Println("Waiting for mTLS connections")
    // Listen to HTTPS connections with the server certificate and wait
    log.Fatal(server.ListenAndServeTLS("/var/otterize/credentials/svid.pem", "/var/otterize/credentials/key.pem"))
    }