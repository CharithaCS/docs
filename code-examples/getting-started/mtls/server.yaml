apiVersion: v1
kind: Namespace
metadata:
  name: otterize-tutorial-mtls
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: server-js
  namespace: otterize-tutorial-mtls
data:
  server.js: |
    const https = require(`https`);
    const fs = require(`fs`);
    
    const options = {
        key: fs.readFileSync('/var/otterize/credentials/key.pem'),
        cert: fs.readFileSync('/var/otterize/credentials/svid.pem'),
        ca: fs.readFileSync('/var/otterize/credentials/bundle.pem'),
        requestCert: true
    };
    
    https.createServer(options, (req, res) => {
        console.log(req.method + " " + req.url);
        if (req.url === '/hello') {
            res.writeHead(200);
            res.end(`Hello world mTLS`);
        } else {
            res.end();
        }
    }).listen(443);
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: server
  namespace: otterize-tutorial-mtls
spec:
  selector:
    matchLabels:
      app: server
  template:
    metadata:
      labels:
        app: server
      annotations:
#        to rename credentials-secret-nam   e
        otterize/tls-secret-name: server-credentials-secret
        otterize/cert-ttl: "2592000"
    spec:
      containers:
        - name: server
          image: node
          command: [ "node", "/app/server.js" ]
          volumeMounts:
            - mountPath: /app/
              name: server-js
            - name: otterize-credentials
              mountPath: /var/otterize/credentials
              readOnly: true
      volumes:
        - name: server-js
          configMap:
            name: server-js
        - name: otterize-credentials
          secret:
            secretName: server-credentials-secret
---
apiVersion: v1
kind: Service
metadata:
  name: server
  namespace: otterize-tutorial-mtls
spec:
  selector:
    app: server
  ports:
    - protocol: TCP
      port: 443
      name: tls
      targetPort: 443
---
