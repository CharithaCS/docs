apiVersion: v1
kind: Namespace
metadata:
  name: otterize-tutorial-kafka-mtls
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: client-go
  namespace: otterize-tutorial-kafka-mtls
data:
  client.go: |
   package main
   
   import (
      "crypto/tls"
      "crypto/x509"
      "fmt"
      "github.com/Shopify/sarama"
      "github.com/sirupsen/logrus"
      "io/ioutil"
      "log"
      "os"
   )
   
   const (
      kafkaAddr     = "kafka.kafka:9092"
      tlsEnabled    = true
      testTopicName = "test"
      certFile      = "/var/otterize/credentials/svid.pem"
      keyFile       = "/var/otterize/credentials/key.pem"
      rootCAFile    = "/var/otterize/credentials/bundle.pem"
   )
   
   func getTLSConfig() (*tls.Config, error) {
      cert, err := tls.LoadX509KeyPair(certFile, keyFile)
      if err != nil {
         return nil, fmt.Errorf("failed loading x509 key pair: %w", err)
      }

      pool := x509.NewCertPool()
      rootCAPEM, err := ioutil.ReadFile(rootCAFile)
      if err != nil {
         return nil, fmt.Errorf("failed loading root CA PEM file: %w ", err)
      }
      pool.AppendCertsFromPEM(rootCAPEM)
      
      return &tls.Config{
         Certificates: []tls.Certificate{cert},
         RootCAs:      pool,
      }, nil
   }

   func ensureKafkaTopic(client sarama.Client, topic string) error {
      logrus.WithField("topicName", testTopicName).Info("Ensuring topic")
      
      admin, err := sarama.NewClusterAdminFromClient(client)
      if err != nil {
         return err
      }

      topics, err := admin.ListTopics()
      if err != nil {
         return fmt.Errorf("failed listing topics: %w", err)
      }

      if _, found := topics[topic]; !found {
         err = admin.CreateTopic(topic, &sarama.TopicDetail{
            NumPartitions:     1,
            ReplicationFactor: 1,
         }, false)
         if err != nil {
            return fmt.Errorf("failed creating topic: %w", err)
         }
      }

      _, err = admin.DescribeTopics([]string{topic})
      if err != nil {
         return fmt.Errorf("failed describing topic: %w", err)
      }
      logrus.WithField("topicName", testTopicName).Info("Ensured topic")
      return nil
   }

   func main() {
      logrus.WithField("addr", kafkaAddr).Info("Connecting to kafka server")
      addrs := []string{kafkaAddr}
      
      config := sarama.NewConfig()
      config.Version = sarama.V2_0_0_0
      config.ClientID = "Client"
      
      config.Net.TLS.Enable = tlsEnabled
      if tlsEnabled {
         tlsConfig, err := getTLSConfig()
         if err != nil {
            logrus.WithError(err).Panic()
         }
         config.Net.TLS.Config = tlsConfig
      }

      sarama.Logger = log.New(os.Stdout, "[sarama] ", log.LstdFlags)
      
      client, err := sarama.NewClient(addrs, config)
      if err != nil {
         logrus.WithError(err).Panic()
      }

      topics, err := client.Topics()
      if err != nil {
         logrus.WithError(err).Panic()
      }

      logrus.WithField("topics", topics).Info("Topics")
      
      if err := ensureKafkaTopic(client, testTopicName); err != nil {
         logrus.WithError(err).Panic()
      }

   }

  go.mod: |
    module main
            
            go 1.18
            
            require (
            github.com/Shopify/sarama v1.36.0
            github.com/sirupsen/logrus v1.9.0
            )
            
            require (
            github.com/davecgh/go-spew v1.1.1 // indirect
            github.com/eapache/go-resiliency v1.3.0 // indirect
            github.com/eapache/go-xerial-snappy v0.0.0-20180814174437-776d5712da21 // indirect
            github.com/eapache/queue v1.1.0 // indirect
            github.com/golang/snappy v0.0.4 // indirect
            github.com/hashicorp/errwrap v1.0.0 // indirect
            github.com/hashicorp/go-multierror v1.1.1 // indirect
            github.com/hashicorp/go-uuid v1.0.3 // indirect
            github.com/jcmturner/aescts/v2 v2.0.0 // indirect
            github.com/jcmturner/dnsutils/v2 v2.0.0 // indirect
            github.com/jcmturner/gofork v1.7.6 // indirect
            github.com/jcmturner/gokrb5/v8 v8.4.3 // indirect
            github.com/jcmturner/rpc/v2 v2.0.3 // indirect
            github.com/klauspost/compress v1.15.9 // indirect
            github.com/pierrec/lz4/v4 v4.1.15 // indirect
            github.com/rcrowley/go-metrics v0.0.0-20201227073835-cf1acfcdf475 // indirect
            golang.org/x/crypto v0.0.0-20220722155217-630584e8d5aa // indirect
            golang.org/x/net v0.0.0-20220809184613-07c6da5e1ced // indirect
            golang.org/x/sys v0.0.0-20220728004956-3c1f35247d10 // indirect
            )
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: client
  namespace: otterize-tutorial-kafka-mtls
spec:
  selector:
    matchLabels:
      app: client
  template:
    metadata:
      labels:
        app: client
      annotations:
        otterize/tls-secret-name: client-credentials-secret
        otterize/cert-ttl: "2592000"
    spec:
      containers:
        - name: client
          image: golang
          command: [ "/bin/sh", "-c", "--" ]
          args: [ "while true; do cd /app; cp src/* .; go get main; go run .; sleep infinity; done" ]
          volumeMounts:
            - name: ephemeral
              mountPath: /app
            - mountPath: /app/src
              name: client-go
            - name: otterize-credentials
              mountPath: /var/otterize/credentials
              readOnly: true
      volumes:
        - name: client-go
          configMap:
            name: client-go
        - name: otterize-credentials
          secret:
            secretName: client-credentials-secret
        - name: ephemeral
          emptyDir: { }